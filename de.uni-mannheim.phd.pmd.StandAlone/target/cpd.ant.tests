Found a 425 line (2337 tokens) duplication in the following files: 
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 71 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java

    }

    public Object visit(ASTExtendsList node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTClassOrInterfaceDeclaration node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTImplementsList node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTTypeParameters node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTMemberSelector node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTTypeParameter node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTTypeBound node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTClassOrInterfaceBody node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTClassOrInterfaceBodyDeclaration node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTEnumBody node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTEnumConstant node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTReferenceType node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTClassOrInterfaceType node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTTypeArguments node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTTypeArgument node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTWildcardBounds node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTAnnotation node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTNormalAnnotation node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTMarkerAnnotation node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTSingleMemberAnnotation node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTMemberValuePairs node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTMemberValuePair node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTMemberValue node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTMemberValueArrayInitializer node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTAnnotationTypeDeclaration node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTAnnotationTypeBody node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTAnnotationTypeMemberDeclaration node, Object data) {
        return visit((JavaNode) node, data);
    }
    public Object visit(ASTAnnotationMethodDeclaration node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTDefaultValue node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTRUNSIGNEDSHIFT node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTRSIGNEDSHIFT node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTCompilationUnit node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTEnumDeclaration node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTAssertStatement node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTPackageDeclaration node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTImportDeclaration node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTTypeDeclaration node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTFieldDeclaration node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTVariableDeclarator node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTVariableDeclaratorId node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTVariableInitializer node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTArrayInitializer node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTMethodDeclaration node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTMethodDeclarator node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTFormalParameters node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTFormalParameter node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTConstructorDeclaration node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTExplicitConstructorInvocation node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTInitializer node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTType node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTPrimitiveType node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTResultType node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTName node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTNameList node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTExpression node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTAssignmentOperator node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTConditionalExpression node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTConditionalOrExpression node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTConditionalAndExpression node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTInclusiveOrExpression node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTExclusiveOrExpression node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTAndExpression node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTEqualityExpression node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTInstanceOfExpression node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTRelationalExpression node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTShiftExpression node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTAdditiveExpression node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTMultiplicativeExpression node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTUnaryExpression node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTPreIncrementExpression node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTPreDecrementExpression node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTUnaryExpressionNotPlusMinus node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTPostfixExpression node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTCastExpression node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTPrimaryExpression node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTPrimaryPrefix node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTPrimarySuffix node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTLiteral node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTBooleanLiteral node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTNullLiteral node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTArguments node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTArgumentList node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTAllocationExpression node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTArrayDimsAndInits node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTStatement node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTLabeledStatement node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTBlock node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTBlockStatement node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTLocalVariableDeclaration node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTEmptyStatement node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTStatementExpression node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTSwitchStatement node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTSwitchLabel node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTIfStatement node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTWhileStatement node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTDoStatement node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTForStatement node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTForInit node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTStatementExpressionList node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTForUpdate node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTBreakStatement node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTContinueStatement node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTReturnStatement node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTThrowStatement node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTSynchronizedStatement node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTTryStatement node, Object data) {
        return visit((JavaNode) node, data);
    }
    public Object visit(ASTResourceSpecification node, Object data) {
=====================================================================
Found a 460 line (2201 tokens) duplication in the following files: 
Starting at line 65 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 149 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java

		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTObjectNameDeclaration node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTFormalParameter node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTMethodDeclaration node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTMethodDeclarator node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTFormalParameters node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTVariableOrConstantDeclarator node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTVariableOrConstantDeclaratorId node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTVariableOrConstantInitializer node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTDatatype node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTCompilationDataType node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTCollectionTypeName node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTScalarDataTypeName node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTDateTimeLiteral node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTExceptionHandler node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTSkip2NextTerminator node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTSkip2NextOccurrence node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTSkipPastNextOccurrence node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTSkip2NextTokenOccurrence node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTSkipPastNextTokenOccurrence node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTRead2NextOccurrence node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTReadPastNextOccurrence node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTSqlStatement node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTWrappedObject node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTUnlabelledStatement node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTStatement node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTLabelledStatement node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTCaseStatement node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTCaseWhenClause node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTElseClause node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTElsifClause node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTLoopStatement node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTForStatement node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTWhileStatement node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTIfStatement node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTForIndex node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTForAllIndex node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTForAllStatement node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTGotoStatement node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTReturnStatement node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTContinueStatement node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTExitStatement node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTRaiseStatement node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTCloseStatement node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTOpenStatement node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTFetchStatement node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTEmbeddedSqlStatement node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTPipelineStatement node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTConditionalCompilationStatement node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTSubTypeDefinition node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTFieldDeclaration node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTCollectionTypeDefinition node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTCollectionDeclaration node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTObjectDeclaration node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTCallSpecTail node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTCursorUnit node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTCursorSpecification node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTCursorBody node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTExpression node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTCompilationExpression node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTAssignment node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTCaseExpression node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTLikeExpression node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTTrimExpression node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTObjectExpression node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTConditionalOrExpression node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTConditionalAndExpression node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTEqualityExpression node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTRelationalExpression node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTAdditiveExpression node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTStringExpression node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTMultiplicativeExpression node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTUnaryExpression node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTUnaryExpressionNotPlusMinus node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTPrimaryExpression node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTPrimaryPrefix node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTPrimarySuffix node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTLiteral node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTStringLiteral node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTBooleanLiteral node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTNullLiteral node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTMultiSetCondition node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTNumericLiteral node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTLabel node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTName node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTQualifiedName node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTArguments node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTArgumentList node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTArgument node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTVariableOrConstantDeclaration node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTDatatypeDeclaration node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTPragma node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTInlinePragma node, Object data) {
=====================================================================
Found a 251 line (1119 tokens) duplication in the following files: 
Starting at line 5 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\VmParserVisitorAdapter.java
Starting at line 81 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\rule\AbstractVmRule.java

    @Override
    public Object visit(final VmNode node, final Object data) {
        node.childrenAccept(this, data);
        return null;
    }

    @Override
    public Object visit(final ASTprocess node, final Object data) {
        return visit((VmNode) node, data);
    }

    @Override
    public Object visit(final ASTEscapedDirective node, final Object data) {
        return visit((VmNode) node, data);
    }

    @Override
    public Object visit(final ASTEscape node, final Object data) {
        return visit((VmNode) node, data);
    }

    @Override
    public Object visit(final ASTComment node, final Object data) {
        return visit((VmNode) node, data);
    }

    @Override
    public Object visit(final ASTTextblock node, final Object data) {
        return visit((VmNode) node, data);
    }

    @Override
    public Object visit(final ASTFloatingPointLiteral node, final Object data) {
        return visit((VmNode) node, data);
    }

    @Override
    public Object visit(final ASTIntegerLiteral node, final Object data) {
        return visit((VmNode) node, data);
    }

    @Override
    public Object visit(final ASTStringLiteral node, final Object data) {
        return visit((VmNode) node, data);
    }

    @Override
    public Object visit(final ASTIdentifier node, final Object data) {

        return visit((VmNode) node, data);
    }

    @Override
    public Object visit(final ASTWord node, final Object data) {

        return visit((VmNode) node, data);
    }

    @Override
    public Object visit(final ASTDirective node, final Object data) {

        return visit((VmNode) node, data);
    }

    @Override
    public Object visit(final ASTBlock node, final Object data) {

        return visit((VmNode) node, data);
    }

    @Override
    public Object visit(final ASTMap node, final Object data) {

        return visit((VmNode) node, data);
    }

    @Override
    public Object visit(final ASTObjectArray node, final Object data) {

        return visit((VmNode) node, data);
    }

    @Override
    public Object visit(final ASTIntegerRange node, final Object data) {

        return visit((VmNode) node, data);
    }

    @Override
    public Object visit(final ASTMethod node, final Object data) {

        return visit((VmNode) node, data);
    }

    @Override
    public Object visit(final ASTIndex node, final Object data) {

        return visit((VmNode) node, data);
    }

    @Override
    public Object visit(final ASTReference node, final Object data) {

        return visit((VmNode) node, data);
    }

    @Override
    public Object visit(final ASTTrue node, final Object data) {

        return visit((VmNode) node, data);
    }

    @Override
    public Object visit(final ASTFalse node, final Object data) {

        return visit((VmNode) node, data);
    }

    @Override
    public Object visit(final ASTText node, final Object data) {

        return visit((VmNode) node, data);
    }

    @Override
    public Object visit(final ASTForeachStatement node, final Object data) {

        return visit((VmNode) node, data);
    }

    @Override
    public Object visit(final ASTIfStatement node, final Object data) {

        return visit((VmNode) node, data);
    }

    @Override
    public Object visit(final ASTElseStatement node, final Object data) {

        return visit((VmNode) node, data);
    }

    @Override
    public Object visit(final ASTElseIfStatement node, final Object data) {

        return visit((VmNode) node, data);
    }

    @Override
    public Object visit(final ASTSetDirective node, final Object data) {

        return visit((VmNode) node, data);
    }

    @Override
    public Object visit(final ASTExpression node, final Object data) {

        return visit((VmNode) node, data);
    }

    @Override
    public Object visit(final ASTAssignment node, final Object data) {

        return visit((VmNode) node, data);
    }

    @Override
    public Object visit(final ASTOrNode node, final Object data) {

        return visit((VmNode) node, data);
    }

    @Override
    public Object visit(final ASTAndNode node, final Object data) {

        return visit((VmNode) node, data);
    }

    @Override
    public Object visit(final ASTEQNode node, final Object data) {

        return visit((VmNode) node, data);
    }

    @Override
    public Object visit(final ASTNENode node, final Object data) {

        return visit((VmNode) node, data);
    }

    @Override
    public Object visit(final ASTLTNode node, final Object data) {

        return visit((VmNode) node, data);
    }

    @Override
    public Object visit(final ASTGTNode node, final Object data) {

        return visit((VmNode) node, data);
    }

    @Override
    public Object visit(final ASTLENode node, final Object data) {

        return visit((VmNode) node, data);
    }

    @Override
    public Object visit(final ASTGENode node, final Object data) {

        return visit((VmNode) node, data);
    }

    @Override
    public Object visit(final ASTAddNode node, final Object data) {

        return visit((VmNode) node, data);
    }

    @Override
    public Object visit(final ASTSubtractNode node, final Object data) {

        return visit((VmNode) node, data);
    }

    @Override
    public Object visit(final ASTMulNode node, final Object data) {

        return visit((VmNode) node, data);
    }

    @Override
    public Object visit(final ASTDivNode node, final Object data) {

        return visit((VmNode) node, data);
    }

    @Override
    public Object visit(final ASTModNode node, final Object data) {

        return visit((VmNode) node, data);
    }

    @Override
    public Object visit(final ASTNotNode node, final Object data) {

        return visit((VmNode) node, data);
    }

}
=====================================================================
Found a 201 line (1101 tokens) duplication in the following files: 
Starting at line 8 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\EcmascriptParserVisitorAdapter.java
Starting at line 104 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\rule\AbstractEcmascriptRule.java

    public Object visit(EcmascriptNode node, Object data) {
	node.childrenAccept(this, data);
	return null;
    }

    public Object visit(ASTArrayComprehension node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTArrayComprehensionLoop node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTArrayLiteral node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTAssignment node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTAstRoot node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTBlock node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTBreakStatement node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTCatchClause node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTComment node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTConditionalExpression node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTContinueStatement node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTDoLoop node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTElementGet node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTEmptyExpression node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTExpressionStatement node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTForInLoop node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTForLoop node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTFunctionCall node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTFunctionNode node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTIfStatement node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTInfixExpression node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTKeywordLiteral node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTLabel node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTLabeledStatement node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTLetNode node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTName node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTNewExpression node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTNumberLiteral node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTObjectLiteral node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTObjectProperty node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTParenthesizedExpression node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTPropertyGet node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTRegExpLiteral node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTReturnStatement node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTScope node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTStringLiteral node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTSwitchCase node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTSwitchStatement node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTThrowStatement node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTTryStatement node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTUnaryExpression node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTVariableDeclaration node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTVariableInitializer node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTWhileLoop node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTWithStatement node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTXmlDotQuery node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTXmlExpression node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTXmlMemberGet node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTXmlString node, Object data) {
	return visit((EcmascriptNode) node, data);
    }
}
=====================================================================
Found a 111 line (557 tokens) duplication in the following files: 
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\TypeSet.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\TypeSet.java

public class TypeSet {

    /**
     * TODO should Resolver provide a canResolve() and a resolve()?
     * Requiring 2 calls seems clunky... but so does this
     * throwing an exception for flow control...
     */
    public interface Resolver {
	Class<?> resolve(String name) throws ClassNotFoundException;
    }

    public static class ExplicitImportResolver implements Resolver {
	private Set<String> importStmts;

	public ExplicitImportResolver(Set<String> importStmts) {
	    this.importStmts = importStmts;
	}

	public Class<?> resolve(String name) throws ClassNotFoundException {
	    for (String importStmt : importStmts) {
		if (importStmt.endsWith(name)) {
		    return Class.forName(importStmt);
		}
	    }
	    throw new ClassNotFoundException("Type " + name + " not found");
	}
    }

    public static class CurrentPackageResolver implements Resolver {
	private String pkg;

	public CurrentPackageResolver(String pkg) {
	    this.pkg = pkg;
	}

	public Class<?> resolve(String name) throws ClassNotFoundException {
	    return Class.forName(pkg + name);
	}
    }

    // TODO cite the JLS section on implicit imports
    public static class ImplicitImportResolver implements Resolver {
	public Class<?> resolve(String name) throws ClassNotFoundException {
	    return Class.forName("java.lang." + name);
	}
    }

    public static class ImportOnDemandResolver implements Resolver {
	private Set<String> importStmts;

	public ImportOnDemandResolver(Set<String> importStmts) {
	    this.importStmts = importStmts;
	}

	public Class<?> resolve(String name) throws ClassNotFoundException {
	    for (String importStmt : importStmts) {
		if (importStmt.endsWith("*")) {
		    try {
			String importPkg = importStmt.substring(0, importStmt.indexOf('*') - 1);
			return Class.forName(importPkg + '.' + name);
		    } catch (ClassNotFoundException cnfe) {
		    }
		}
	    }
	    throw new ClassNotFoundException("Type " + name + " not found");
	}
    }

    public static class PrimitiveTypeResolver implements Resolver {
	private Map<String, Class<?>> primitiveTypes = new HashMap<String, Class<?>>();

	@SuppressWarnings("PMD.AvoidUsingShortType")
	public PrimitiveTypeResolver() {
	    primitiveTypes.put("int", int.class);
	    primitiveTypes.put("float", float.class);
	    primitiveTypes.put("double", double.class);
	    primitiveTypes.put("long", long.class);
	    primitiveTypes.put("boolean", boolean.class);
	    primitiveTypes.put("byte", byte.class);
	    primitiveTypes.put("short", short.class);
	    primitiveTypes.put("char", char.class);
	}

	public Class<?> resolve(String name) throws ClassNotFoundException {
	    if (!primitiveTypes.containsKey(name)) {
		throw new ClassNotFoundException();
	    }
	    return primitiveTypes.get(name);
	}
    }

    public static class VoidResolver implements Resolver {
	public Class<?> resolve(String name) throws ClassNotFoundException {
	    if (name.equals("void")) {
		return void.class;
	    }
	    throw new ClassNotFoundException();
	}
    }

    public static class FullyQualifiedNameResolver implements Resolver {
	public Class<?> resolve(String name) throws ClassNotFoundException {
	    return Class.forName(name);
	}
    }

    private String pkg;
    private Set<String> imports = new HashSet<String>();
    private List<Resolver> resolvers = new ArrayList<Resolver>();

    public void setASTCompilationUnitPackage(String pkg) {
=====================================================================
Found a 93 line (507 tokens) duplication in the following files: 
Starting at line 8 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\JspParserVisitorAdapter.java
Starting at line 66 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\rule\AbstractJspRule.java

    public Object visit(JspNode node, Object data) {
        node.childrenAccept(this, data);
        return null;
    }

    public Object visit(ASTCompilationUnit node, Object data) {
        return visit((JspNode) node, data);
    }

    public Object visit(ASTContent node, Object data) {
        return visit((JspNode) node, data);
    }

    public Object visit(ASTJspDirective node, Object data) {
        return visit((JspNode) node, data);
    }

    public Object visit(ASTJspDirectiveAttribute node, Object data) {
        return visit((JspNode) node, data);
    }

    public Object visit(ASTJspScriptlet node, Object data) {
        return visit((JspNode) node, data);
    }

    public Object visit(ASTJspExpression node, Object data) {
        return visit((JspNode) node, data);
    }

    public Object visit(ASTJspDeclaration node, Object data) {
        return visit((JspNode) node, data);
    }

    public Object visit(ASTJspComment node, Object data) {
        return visit((JspNode) node, data);
    }

    public Object visit(ASTText node, Object data) {
        return visit((JspNode) node, data);
    }

    public Object visit(ASTUnparsedText node, Object data) {
        return visit((JspNode) node, data);
    }

    public Object visit(ASTElExpression node, Object data) {
        return visit((JspNode) node, data);
    }

    public Object visit(ASTValueBinding node, Object data) {
        return visit((JspNode) node, data);
    }

    public Object visit(ASTCData node, Object data) {
        return visit((JspNode) node, data);
    }

    public Object visit(ASTElement node, Object data) {
        return visit((JspNode) node, data);
    }

    public Object visit(ASTAttribute node, Object data) {
        return visit((JspNode) node, data);
    }

    public Object visit(ASTAttributeValue node, Object data) {
        return visit((JspNode) node, data);
    }

    public Object visit(ASTJspExpressionInAttribute node, Object data) {
        return visit((JspNode) node, data);
    }

    public Object visit(ASTCommentTag node, Object data) {
        return visit((JspNode) node, data);
    }

    public Object visit(ASTDeclaration node, Object data) {
        return visit((JspNode) node, data);
    }

    public Object visit(ASTDoctypeDeclaration node, Object data) {
        return visit((JspNode) node, data);
    }

    public Object visit(ASTDoctypeExternalId node, Object data) {
        return visit((JspNode) node, data);
    }

    public Object visit(ASTHtmlScript node, Object data) {
        return visit((JspNode) node, data);
    }
}
=====================================================================
Found a 77 line (371 tokens) duplication in the following files: 
Starting at line 615 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 703 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java

		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTCompoundTriggerBlock node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTNonDMLTrigger node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTDDLEvent node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTDatabaseEvent node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTNonDMLEvent node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTAlterTrigger node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTKEYWORD_RESERVED node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTKEYWORD_UNRESERVED node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTID node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTUnqualifiedID node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTQualifiedID node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTTypeKeyword node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTJavaInterfaceClass node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTEqualsOldIDNewID node, Object data) {
		return visit((PLSQLNode) node, data);
	}

        @Override
        public Object visit(ASTAccessibleByClause node, Object data) {
                return visit((PLSQLNode) node, data);
        }
=====================================================================
Found a 56 line (270 tokens) duplication in the following files: 
Starting at line 524 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 603 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java

	public Object visit(ASTInlinePragma node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTExceptionDeclaration node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTParallelClause node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTTable node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTTableColumn node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTView node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTSynonym node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTDirectory node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTDatabaseLink node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTViewColumn node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTComment node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTTypeMethod node, Object data) {
=====================================================================
Found a 36 line (225 tokens) duplication in the following files: 
Starting at line 103 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\VariableAccessVisitor.java
Starting at line 130 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\VariableAccessVisitor.java

	if (occurrence.isOnLeftHandSide()) {
	    this.addVariableAccess(occurrence.getLocation(), new VariableAccess(VariableAccess.DEFINITION, occurrence
		    .getImage()), inode.getFlow());
	} else if (occurrence.isOnRightHandSide() || !occurrence.isOnLeftHandSide() && !occurrence.isOnRightHandSide()) {
	    this.addVariableAccess(occurrence.getLocation(), new VariableAccess(VariableAccess.REFERENCING, occurrence
		    .getImage()), inode.getFlow());
	}
    }

    /**
     * Adds a VariableAccess to a dataflow node.
     * @param node location of the access of a variable
     * @param va variable access to add
     * @param flow dataflownodes that can contain the node.
     */
    private void addVariableAccess(Node node, VariableAccess va, List<DataFlowNode> flow) {
	// backwards to find the right inode (not a method declaration)
	for (int i = flow.size() - 1; i > 0; i--) {
	    DataFlowNode inode = flow.get(i);
	    if (inode.getNode() == null) {
		continue;
	    }

	    List<? extends Node> children = inode.getNode().findDescendantsOfType(node.getClass());
	    for (Node n : children) {
		if (node.equals(n)) {
		    List<VariableAccess> v = new ArrayList<VariableAccess>();
		    v.add(va);
		    inode.setVariableAccess(v);
		    return;
		}
	    }
	}
    }

}
=====================================================================
Found a 47 line (194 tokens) duplication in the following files: 
Starting at line 42 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\CyclomaticComplexityRule.java
Starting at line 44 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\CyclomaticComplexityRule.java

    public static final IntegerProperty REPORT_LEVEL_DESCRIPTOR = new IntegerProperty("reportLevel",
	    "Cyclomatic Complexity reporting threshold", 1, 30, 10, 1.0f);

    public static final BooleanProperty SHOW_CLASSES_COMPLEXITY_DESCRIPTOR = new BooleanProperty("showClassesComplexity",
	"Add class average violations to the report", true, 2.0f);

    public static final BooleanProperty SHOW_METHODS_COMPLEXITY_DESCRIPTOR = new BooleanProperty("showMethodsComplexity",
	"Add method average violations to the report", true, 3.0f);

  private int reportLevel;
  private boolean showClassesComplexity = true;
  private boolean showMethodsComplexity = true;

  private static class Entry {
    private Node node;
    private int decisionPoints = 1;
    public int highestDecisionPoints;
    public int methodCount;

    private Entry(Node node) {
      this.node = node;
    }

    public void bumpDecisionPoints() {
      decisionPoints++;
    }

    public void bumpDecisionPoints(int size) {
      decisionPoints += size;
    }

    public int getComplexityAverage() {
      return (double) methodCount == 0 ? 1
          : (int) Math.rint( (double) decisionPoints / (double) methodCount );
    }
  }

  private Stack<Entry> entryStack = new Stack<Entry>();

  public CyclomaticComplexityRule() {
      definePropertyDescriptor(REPORT_LEVEL_DESCRIPTOR);
      definePropertyDescriptor(SHOW_CLASSES_COMPLEXITY_DESCRIPTOR);
      definePropertyDescriptor(SHOW_METHODS_COMPLEXITY_DESCRIPTOR);
  }

  @Override
public Object visit(ASTCompilationUnit node, Object data) {
=====================================================================
Found a 39 line (176 tokens) duplication in the following files: 
Starting at line 278 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\ScopeAndDeclarationFinder.java
Starting at line 316 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\ScopeAndDeclarationFinder.java

public Object visit(ASTTypeMethod node, Object data) {
	createMethodScope(node);
	ASTMethodDeclarator md = node.getFirstChildOfType(ASTMethodDeclarator.class);
	// A PLSQL Method (FUNCTION|PROCEDURE) may be schema-level 
	try
	{
	  node.getScope().getEnclosingScope(ClassScope.class).addDeclaration(new MethodNameDeclaration(md));
	}
	catch (Exception e)
	{
	  //@TODO possibly add to a pseudo-ClassScope equivalent to the Schema name 
	  LOGGER.finest("ProgramUnit getEnclosingClassScope Exception string=\""+e.getMessage()+"\"");
	  if("getEnclosingClassScope() called on SourceFileScope".equals(e.getMessage()))
	  {
            LOGGER.finest("ClassScope skipped for Schema-level method: methodName=" 
		               + node.getMethodName()
		               + "; Image=" + node.getImage()
		              );
	   
	    //A File-level/Schema-level object may have a Schema-name explicitly specified in the declaration 
	    ASTObjectNameDeclaration on = md.getFirstChildOfType(ASTObjectNameDeclaration.class);
	    if( 1 < on.jjtGetNumChildren())
	    {
              ASTID schemaName = on.getFirstChildOfType(ASTID.class);
	      LOGGER.finest("SchemaName for Schema-level method: methodName=" 
				 + node.getMethodName()
				 + "; Image=" + node.getImage()
				 + "is " + schemaName.getImage()
				);
	     
	    }
	  }
	}
	cont(node);
	return data;
  }

    @Override
    public Object visit(ASTProgramUnit node, Object data) {
=====================================================================
Found a 26 line (174 tokens) duplication in the following files: 
Starting at line 373 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\DesignPatternDetection.java
Starting at line 426 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\DesignPatternDetection.java

				candidate.setPackageName(expression
						.getParentsOfType(ASTCompilationUnit.class).get(0)
						.findChildrenOfType(ASTPackageDeclaration.class).get(0)
						.getFirstChildOfType(ASTName.class).getImage());
//				ArrayList<ASTClassOrInterfaceDeclaration> classDeclaration = (ArrayList<ASTClassOrInterfaceDeclaration>) expression
//						.getParentsOfType(ASTClassOrInterfaceDeclaration.class);
				
				if (expression.getParentsOfType(ASTClassOrInterfaceDeclaration.class)
						.size() == 0) {
					candidate.setClassName(expression
							.getParentsOfType(ASTEnumDeclaration.class).get(0)
							.getImage());
				} else {
					candidate.setClassName(expression
							.getParentsOfType(ASTClassOrInterfaceDeclaration.class)
							.get(0).getImage());
				}
				//candidate.setClassName(classDeclaration.get(0).getImage());
				ArrayList<ASTMethodDeclaration> methodDeclaration = (ArrayList<ASTMethodDeclaration>) expression
						.getParentsOfType(ASTMethodDeclaration.class);
				if (methodDeclaration.size() != 0) {
					candidate.setMethodName(methodDeclaration.get(0)
							.getFirstChildOfType(ASTMethodDeclarator.class)
							.getImage());
					this.extraxtParameter(methodDeclaration.get(0), candidate);
				} else {
=====================================================================
Found a 39 line (171 tokens) duplication in the following files: 
Starting at line 130 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\TypeSet.java
Starting at line 130 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\TypeSet.java

    public String getASTCompilationUnitPackage() {
	return pkg;
    }

    public void addImport(String importString) {
	imports.add(importString);
    }

    public int getImportsCount() {
	return imports.size();
    }

    public Class<?> findClass(String name) throws ClassNotFoundException {
	// we don't build the resolvers until now since we first want to get all the imports
	if (resolvers.isEmpty()) {
	    buildResolvers();
	}

	for (Resolver resolver : resolvers) {
	    try {
		return resolver.resolve(name);
	    } catch (ClassNotFoundException cnfe) {
	    }
	}

	throw new ClassNotFoundException("Type " + name + " not found");
    }

    private void buildResolvers() {
	resolvers.add(new PrimitiveTypeResolver());
	resolvers.add(new VoidResolver());
	resolvers.add(new ExplicitImportResolver(imports));
	resolvers.add(new CurrentPackageResolver(pkg));
	resolvers.add(new ImplicitImportResolver());
	resolvers.add(new ImportOnDemandResolver(imports));
	resolvers.add(new FullyQualifiedNameResolver());
    }

}
=====================================================================
Found a 24 line (165 tokens) duplication in the following files: 
Starting at line 42 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\VariableAccessVisitor.java
Starting at line 64 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\VariableAccessVisitor.java

    public void compute(ASTConstructorDeclaration node) {
	this.computeNow(node);
    }

    private void computeNow(Node node) {
	DataFlowNode inode = node.getDataFlowNode();

	List<VariableAccess> undefinitions = markUsages(inode);

	// all variables are first in state undefinition
	DataFlowNode firstINode = inode.getFlow().get(0);
	firstINode.setVariableAccess(undefinitions);

	// all variables are getting undefined when leaving scope
	DataFlowNode lastINode = inode.getFlow().get(inode.getFlow().size() - 1);
	lastINode.setVariableAccess(undefinitions);
    }

    private List<VariableAccess> markUsages(DataFlowNode inode) {
	// undefinitions was once a field... seems like it works fine as a local
	List<VariableAccess> undefinitions = new ArrayList<VariableAccess>();
	Set<Map<NameDeclaration, List<NameOccurrence>>> variableDeclarations = collectDeclarations(inode);
	for (Map<NameDeclaration, List<NameOccurrence>> declarations : variableDeclarations) {
	    for (Map.Entry<NameDeclaration, List<NameOccurrence>> entry : declarations.entrySet()) {
=====================================================================
Found a 39 line (158 tokens) duplication in the following files: 
Starting at line 106 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\ClassScope.java
Starting at line 111 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\ClassScope.java

                (occurrence.getImage() != null && occurrence.getImage().equals(className))) {
            if (variableDeclarations.isEmpty() && methodDeclarations.isEmpty()) {
                // this could happen if you do this:
                // public class Foo {
                //  private String x = super.toString();
                // }
                return null;
            }
            // return any name declaration, since all we really want is to get the scope
            // for example, if there's a
            // public class Foo {
            //  private static final int X = 2;
            //  private int y = Foo.X;
            // }
            // we'll look up Foo just to get a handle to the class scope
            // and then we'll look up X.
            if (!variableDeclarations.isEmpty()) {
                return variableDeclarations.keySet().iterator().next();
            }
            return methodDeclarations.keySet().iterator().next();
        }

        if (occurrence.isMethodOrConstructorInvocation()) {
            for (MethodNameDeclaration mnd: methodDeclarations.keySet()) {
                if (mnd.getImage().equals(occurrence.getImage())) {
                    int args = occurrence.getArgumentCount();
                    if (args == mnd.getParameterCount() || (mnd.isVarargs() && args >= mnd.getParameterCount() - 1)) {
                        // FIXME if several methods have the same name
                        // and parameter count, only one will get caught here
                        // we need to make some attempt at type lookup and discrimination
                        // or, failing that, mark this as a usage of all those methods
                        return mnd;
                    }
                }
            }
            return null;
        }

        List<String> images = new ArrayList<String>();
=====================================================================
Found a 22 line (147 tokens) duplication in the following files: 
Starting at line 60 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\dcd\graph\ConstructorNode.java
Starting at line 39 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\dcd\graph\MethodNode.java

	public int compareTo(ConstructorNode that) {
		// Order by name
		int cmp = this.getName().compareTo(that.getName());
		if (cmp == 0) {
			// Order by parameter list length
			cmp = this.getMember().getParameterTypes().length - that.getMember().getParameterTypes().length;
			if (cmp == 0) {
				// Order by parameter class name
				for (int i = 0; i < this.getMember().getParameterTypes().length; i++) {
					cmp = this.getMember().getParameterTypes()[i].getName().compareTo(
							that.getMember().getParameterTypes()[i].getName());
					if (cmp != 0) {
						break;
					}
				}
			}
		}
		return cmp;
	}

	public boolean equals(Object obj) {
		if (obj instanceof ConstructorNode) {
=====================================================================
Found a 22 line (141 tokens) duplication in the following files: 
Starting at line 233 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\DesignPatternDetection.java
Starting at line 581 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\DesignPatternDetection.java

	public Object visit(ASTFieldDeclaration context, Object data) {
		context.childrenAccept(this, data);
		Candidate candidate = new Candidate();
		RuleContext result = (RuleContext) data;

		if (context.getParentsOfType(ASTClassOrInterfaceDeclaration.class)
				.size() == 0) {
			candidate.setClassName(context
					.getParentsOfType(ASTEnumDeclaration.class).get(0)
					.getImage());
		} else {
			candidate.setClassName(context
					.getParentsOfType(ASTClassOrInterfaceDeclaration.class)
					.get(0).getImage());
		}

		candidate.setPackageName(context
				.getParentsOfType(ASTCompilationUnit.class).get(0)
				.findChildrenOfType(ASTPackageDeclaration.class).get(0)
				.getFirstChildOfType(ASTName.class).getImage());
		candidate.setAttributeName(context
				.getFirstChildOfType(ASTVariableDeclarator.class)
=====================================================================
Found a 29 line (138 tokens) duplication in the following files: 
Starting at line 49 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\MethodNameDeclaration.java
Starting at line 67 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\MethodNameDeclaration.java

            sb.append(',');
        }
        if (sb.charAt(sb.length() - 1) == ',') {
            sb.deleteCharAt(sb.length() - 1);
        }
        sb.append(')');
        return sb.toString();
    }

    @Override
    public boolean equals(Object o) {
        if (!(o instanceof MethodNameDeclaration)) {
            return false;
        }

        MethodNameDeclaration other = (MethodNameDeclaration) o;

        // compare name
        if (!other.node.getImage().equals(node.getImage())) {
            return false;
        }

        // compare parameter count - this catches the case where there are no params, too
        if (((ASTMethodDeclarator) other.node).getParameterCount() != ((ASTMethodDeclarator) node).getParameterCount()) {
            return false;
        }

        // compare parameter types
        ASTFormalParameters myParams = (ASTFormalParameters) node.jjtGetChild(0);
=====================================================================
Found a 38 line (137 tokens) duplication in the following files: 
Starting at line 285 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\CyclomaticComplexityRule.java
Starting at line 340 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\CyclomaticComplexityRule.java

                    || null != node.getFirstParentOfType(ASTTriggerUnit.class) //Trigger of any form
                    //@TODO || null != node.getFirstParentOfType(ASTProgramUnit.class) //Another Procedure
                    //@TODO || null != node.getFirstParentOfType(ASTTypeMethod.class) //Another Type method
               )
            {
              /* @TODO This does not cope with nested methods 
               * We need the outer most 
               * ASTPackageBody
               * ASTTriggerUni
               * ASTProgramUnit
               * ASTTypeMethod
               * 
               */
              Entry classEntry = entryStack.peek();
              classEntry.methodCount++;
              classEntry.bumpDecisionPoints( methodDecisionPoints );

              if ( methodDecisionPoints > classEntry.highestDecisionPoints ) {
                classEntry.highestDecisionPoints = methodDecisionPoints;
              }
            }

	    ASTMethodDeclarator methodDeclarator = null;
	    for ( int n = 0; n < node.jjtGetNumChildren(); n++ ) {
	      Node childNode = node.jjtGetChild( n );
	      if ( childNode instanceof ASTMethodDeclarator ) {
	        methodDeclarator = (ASTMethodDeclarator) childNode;
	        break;
	      }
	    }

	    if ( methodEntry.decisionPoints >= reportLevel ) {
	        addViolation( data, node, new String[] { "method",
	            methodDeclarator == null ? "" : methodDeclarator.getImage(),
	            String.valueOf( methodEntry.decisionPoints ) } );
	      }
    }
    LOGGER.exiting(CLASS_NAME,"visit(ASTProgramUnit)");
=====================================================================
Found a 29 line (134 tokens) duplication in the following files: 
Starting at line 11 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 92 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java

	}

	@Override
	public Object visit(ASTInput node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTDDLCommand node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTSqlPlusCommand node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTGlobal node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTBlock node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTPackageSpecification node, Object data) {
=====================================================================
Found a 27 line (127 tokens) duplication in the following files: 
Starting at line 19 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\AbstractJavaNode.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\AbstractJspNode.java

    public AbstractJavaNode(JavaParser parser, int id) {
        super(id);
        this.parser = parser;
    }

    public void jjtOpen() {
	if (beginLine == -1 && parser.token.next != null) {
	    beginLine = parser.token.next.beginLine;
	    beginColumn = parser.token.next.beginColumn;
	}
    }

    public void jjtClose() {
	if (beginLine == -1 && (children == null || children.length == 0)) {
	    beginColumn = parser.token.beginColumn;
	}
	if (beginLine == -1) {
	    beginLine = parser.token.beginLine;
	}
	endLine = parser.token.endLine;
	endColumn = parser.token.endColumn;
    }

    /**
     * Accept the visitor. *
     */
    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
=====================================================================
Found a 19 line (123 tokens) duplication in the following files: 
Starting at line 18 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\rule\EcmascriptRuleChainVisitor.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\xml\rule\XmlRuleChainVisitor.java

public class EcmascriptRuleChainVisitor extends AbstractRuleChainVisitor {

    protected void indexNodes(List<Node> nodes, RuleContext ctx) {
	// Visit Nodes in DFS order
	Stack<Node> stack = new Stack<Node>();
	stack.addAll(nodes);
	Collections.reverse(stack);
	while (!stack.isEmpty()) {
	    Node node = stack.pop();
	    indexNode(node);
	    if (node.jjtGetNumChildren() > 0) {
		for (int i = node.jjtGetNumChildren() - 1; i >= 0; i--) {
		    stack.push(node.jjtGetChild(i));
		}
	    }
	}
    }

    protected void visit(Rule rule, Node node, RuleContext ctx) {
=====================================================================
Found a 16 line (115 tokens) duplication in the following files: 
Starting at line 79 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\VariableAccessVisitor.java
Starting at line 105 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\VariableAccessVisitor.java

		    addAccess((JavaNameOccurrence)occurrence, inode);
		}
	    }
	}
	return undefinitions;
    }

    private Set<Map<NameDeclaration, List<NameOccurrence>>> collectDeclarations(DataFlowNode inode) {
	Set<Map<NameDeclaration, List<NameOccurrence>>> decls = new HashSet<Map<NameDeclaration, List<NameOccurrence>>>();
	Map<NameDeclaration, List<NameOccurrence>> varDecls;
	for (int i = 0; i < inode.getFlow().size(); i++) {
	    DataFlowNode n = inode.getFlow().get(i);
	    if (n instanceof StartOrEndDataFlowNode) {
		continue;
	    }
	    varDecls = ((JavaNode)n.getNode()).getScope().getDeclarations();
=====================================================================
Found a 25 line (113 tokens) duplication in the following files: 
Starting at line 585 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 666 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java

		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTAlterTypeSpec node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTAttributeDeclaration node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTAttribute node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTPragmaClause node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTTriggerUnit node, Object data) {
=====================================================================
Found a 18 line (112 tokens) duplication in the following files: 
Starting at line 57 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 80 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java

            throw new RuntimeException("Can't build a data flow for anything other than a method or a constructor");
        }

        this.dataFlow = new Structure(dataFlowHandler);
        this.dataFlow.createStartNode(node.getBeginLine());
        this.dataFlow.createNewNode(node);

        node.jjtAccept(this, dataFlow);

        this.dataFlow.createEndNode(node.getEndLine());
        if (LOGGER.isLoggable(Level.FINE))
        {
          LOGGER.fine("DataFlow is " + this.dataFlow.dump() ); // @TODO SRT Remove after development  
        }
        Linker linker = new Linker(dataFlowHandler, dataFlow.getBraceStack(), dataFlow.getContinueBreakReturnStack());
        try {
            linker.computePaths();
        } catch (LinkerException e) {
=====================================================================
Found a 20 line (112 tokens) duplication in the following files: 
Starting at line 34 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\LocalScope.java
Starting at line 44 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\MethodScope.java

    }

    @Override
    public void addDeclaration(NameDeclaration declaration) {
        if (declaration instanceof VariableNameDeclaration && getDeclarations().keySet().contains(declaration)) {
            throw new RuntimeException(declaration + " is already in the symbol table");
        }
        super.addDeclaration(declaration);
    }

    public NameDeclaration findVariableHere(PLSQLNameOccurrence occurrence) {
        if (occurrence.isThisOrSuper() || occurrence.isMethodOrConstructorInvocation()) {
            return null;
        }
        ImageFinderFunction finder = new ImageFinderFunction(occurrence.getImage());
        Applier.apply(finder, getVariableDeclarations().keySet().iterator());
        return finder.getDecl();
    }

    public String toString() {
=====================================================================
Found a 19 line (111 tokens) duplication in the following files: 
Starting at line 67 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\JavaNameOccurrence.java
Starting at line 58 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\PLSQLNameOccurrence.java

    public JavaNode getLocation() {
        return location;
    }

    public boolean isOnRightHandSide() {
	Node node = location.jjtGetParent().jjtGetParent().jjtGetParent();
        return node instanceof ASTExpression && node.jjtGetNumChildren() == 3;
    }


    public boolean isOnLeftHandSide() {
        // I detest this method with every atom of my being
	Node primaryExpression;
        if (location.jjtGetParent() instanceof ASTPrimaryExpression) {
            primaryExpression = location.jjtGetParent().jjtGetParent();
        } else if (location.jjtGetParent().jjtGetParent() instanceof ASTPrimaryExpression) {
            primaryExpression = location.jjtGetParent().jjtGetParent().jjtGetParent();
        } else {
            throw new RuntimeException("Found a NameOccurrence that didn't have an ASTPrimary Expression as parent or grandparent.  Parent = " + location.jjtGetParent() + " and grandparent = " + location.jjtGetParent().jjtGetParent());
=====================================================================
Found a 18 line (111 tokens) duplication in the following files: 
Starting at line 118 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\database\DBMSMetadata.java
Starting at line 157 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\database\DBMSMetadata.java

  public DBMSMetadata(String user, String password, DBURI dbURI) throws SQLException, MalformedURLException, ClassNotFoundException
  { 
    this.dburi = dbURI;

    this.returnSourceCodeObjectsStatement = dbURI.getDbType().getProperties().getProperty(GET_SOURCE_OBJECTS_STATEMENT) ; 

    this.returnSourceCodeStatement = dbURI.getDbType().getProperties().getProperty(GET_SOURCE_CODE_STATEMENT) ; 

    this.returnType =  dbURI.getSourceCodeType();

    LOGGER.fine("returnSourceCodeStatement="+returnSourceCodeStatement +", returnType="+returnType);
    
    String driverClass = dbURI.getDriverClass();
    String urlString = dbURI.getURL().toString();
    
    LOGGER.fine("driverClass="+driverClass+", urlString="+urlString);

    Class.forName(driverClass);
=====================================================================
Found a 16 line (110 tokens) duplication in the following files: 
Starting at line 256 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 579 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java

        LOGGER.finest("pushOnStack CONTINUE_STATEMENT: line " + node.getBeginLine() +", column " + node.getBeginColumn());
        return super.visit(node, data);
    }

    public Object visit(ASTReturnStatement node, Object data) {
        if (!(data instanceof Structure)) {
            return data;
        }
        Structure dataFlow = (Structure) data;
        dataFlow.createNewNode(node);
        dataFlow.pushOnStack(NodeType.RETURN_STATEMENT, dataFlow.getLast());
        LOGGER.finest("pushOnStack RETURN_STATEMENT: line " + node.getBeginLine() +", column " + node.getBeginColumn());
        return super.visit(node, data);
    }

    public Object visit(ASTThrowStatement node, Object data) {
=====================================================================
Found a 24 line (109 tokens) duplication in the following files: 
Starting at line 22 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\AbstractJavaNode.java
Starting at line 19 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\AbstractJspNode.java
Starting at line 23 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\AbstractPLSQLNode.java

    }

    public void jjtOpen() {
	if (beginLine == -1 && parser.token.next != null) {
	    beginLine = parser.token.next.beginLine;
	    beginColumn = parser.token.next.beginColumn;
	}
    }

    public void jjtClose() {
	if (beginLine == -1 && (children == null || children.length == 0)) {
	    beginColumn = parser.token.beginColumn;
	}
	if (beginLine == -1) {
	    beginLine = parser.token.beginLine;
	}
	endLine = parser.token.endLine;
	endColumn = parser.token.endColumn;
    }

    /**
     * Accept the visitor. *
     */
    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
=====================================================================
Found a 21 line (105 tokens) duplication in the following files: 
Starting at line 31 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTFormalParameter.java
Starting at line 24 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTLocalVariableDeclaration.java

    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }

    public boolean hasSuppressWarningsAnnotationFor(Rule rule) {
        for (int i = 0; i < jjtGetNumChildren(); i++) {
            if (jjtGetChild(i) instanceof ASTAnnotation) {
                ASTAnnotation a = (ASTAnnotation) jjtGetChild(i);
                if (a.suppresses(rule)) {
                    return true;
                }
            }
        }
        return false;
    }

    public boolean isArray() {
        return checkType() + checkDecl() > 0;
    }

    public int getArrayDepth() {
=====================================================================
Found a 18 line (99 tokens) duplication in the following files: 
Starting at line 305 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\CyclomaticComplexityRule.java
Starting at line 354 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\CyclomaticComplexityRule.java
Starting at line 394 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\CyclomaticComplexityRule.java

            }

	    ASTMethodDeclarator methodDeclarator = null;
	    for ( int n = 0; n < node.jjtGetNumChildren(); n++ ) {
	      Node childNode = node.jjtGetChild( n );
	      if ( childNode instanceof ASTMethodDeclarator ) {
	        methodDeclarator = (ASTMethodDeclarator) childNode;
	        break;
	      }
	    }

	    if ( methodEntry.decisionPoints >= reportLevel ) {
	        addViolation( data, node, new String[] { "method",
	            methodDeclarator == null ? "" : methodDeclarator.getImage(),
	            String.valueOf( methodEntry.decisionPoints ) } );
	      }
    }
    LOGGER.exiting(CLASS_NAME,"visit(ASTProgramUnit)");
=====================================================================
Found a 23 line (96 tokens) duplication in the following files: 
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\ImageFinderFunction.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\ImageFinderFunction.java

public class ImageFinderFunction implements UnaryFunction<NameDeclaration> {

    private Set<String> images = new HashSet<String>();
    private NameDeclaration decl;

    public ImageFinderFunction(String img) {
        images.add(img);
    }

    public ImageFinderFunction(List<String> imageList) {
        images.addAll(imageList);
    }

    public void applyTo(NameDeclaration nameDeclaration) {
        if (images.contains(nameDeclaration.getImage())) {
            decl = nameDeclaration;
        }
    }

    public NameDeclaration getDecl() {
        return this.decl;
    }
}
=====================================================================
Found a 20 line (96 tokens) duplication in the following files: 
Starting at line 45 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 128 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java

		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTDeclarativeUnit node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTDeclarativeSection node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTCompilationDeclarationFragment node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTProgramUnit node, Object data) {
=====================================================================
Found a 22 line (93 tokens) duplication in the following files: 
Starting at line 98 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\rules\state\StateRule.java
Starting at line 229 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\rules\state\StateRule.java

				+ " FROM switchnodes AS s "
				+ " JOIN methodes AS m ON m.id = s.method_id "
				+ " JOIN classes AS c ON c.id = m.class_id "
				+ " WHERE c.id =  "
				+ rsClassIDList.getInt("classID")
				+ " AND s.count = "
				+ rsAppearence.getInt("count")
				+ " AND s.count > 2 "
				+ " AND s.attribut_id > -1 "
				+ " GROUP BY s.attribut_id " + " HAVING appearence > 1;";
		ResultSet rsAttribList = stmtArgumentList
				.executeQuery(sqlGetAttribList);

		while (rsAttribList.next()) {
			// Hole die IDs die den gleichen Attribute und in der
			// gleichen Klasse sind.
			int attributeID = rsAttribList.getInt("attribut_id");
			// Hole die IDs der Switches der passenden Switches.
			ResultSet rsSwitchIDs = getSwitchIDs(rsClassIDList, rsAppearence,
					attributeID, "s.attribut_id");
			HashMap<String, Integer> caseNames = new HashMap<String, Integer>();
			int numberOfSwitchIDs = 0;
=====================================================================
Found a 39 line (91 tokens) duplication in the following files: 
Starting at line 73 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\strictexception\SignatureDeclareThrowsExceptionRule.java
Starting at line 140 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\rules\SignatureDeclareThrowsException.java

    }

    /**
     * Checks all exceptions for possible violation on the exception declaration.
     *
     * @param exceptionList containing all exception for declaration
     * @param context
     */
    private void evaluateExceptions(List<ASTName> exceptionList, Object context) {
        for (ASTName exception: exceptionList) {
            if (hasDeclaredExceptionInSignature(exception)) {
                addViolation(context, exception);
            }
        }
    }

    /**
     * Checks if the given value is defined as <code>Exception</code> and the parent is either
     * a method or constructor declaration.
     *
     * @param exception to evaluate
     * @return true if <code>Exception</code> is declared and has proper parents
     */
    private boolean hasDeclaredExceptionInSignature(ASTName exception) {
        return exception.hasImageEqualTo("Exception") && isParentSignatureDeclaration(exception);
    }

    /**
     * Checks if the given exception is declared in the method or constructor
     * signature.
     * @param exception to evaluate
     * @return true if parent node is either a method or constructor declaration
     */
    private boolean isParentSignatureDeclaration(ASTName exception) {
        Node parent = exception.jjtGetParent().jjtGetParent();
        return parent instanceof ASTMethodDeclaration || parent instanceof ASTConstructorDeclaration;
    }

}
=====================================================================
Found a 20 line (90 tokens) duplication in the following files: 
Starting at line 247 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\rules\state\StateRule.java
Starting at line 296 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\rules\state\StateRule.java

					attributeID, "s.attribut_id");
			HashMap<String, Integer> caseNames = new HashMap<String, Integer>();
			int numberOfSwitchIDs = 0;
			ArrayList<Integer> methodID = new ArrayList<Integer>();
			while (rsSwitchIDs.next()) {
				methodID.add(rsSwitchIDs.getInt("method_id"));
				// Hole die verschiedenen Bedienungen aus den Cases
				// und gleiche sie ab
				int startLine = -2;
				int stopLine = -2;
				/**
				 * Hole die switchIDs aus dem Strategy-Ergebnis die auch im Body
				 * das gleich Attribute haben
				 */
				numberOfSwitchIDs = extractCaseAttributes(rsSwitchIDs,
						caseNames, numberOfSwitchIDs, startLine, stopLine);
			}
			// Verarbeite Ergebnisse.
			findStrategyPattern(rsClassIDList, caseNames, numberOfSwitchIDs,
					methodID);
=====================================================================
Found a 18 line (90 tokens) duplication in the following files: 
Starting at line 55 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTFormalParameter.java
Starting at line 45 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTLocalVariableDeclaration.java

        return checkType() + checkDecl();
    }

    public ASTType getTypeNode() {
        for (int i = 0; i < jjtGetNumChildren(); i++) {
            if (jjtGetChild(i) instanceof ASTType) {
                return (ASTType) jjtGetChild(i);
            }
        }
        throw new IllegalStateException("ASTType not found");
    }

    private int checkType() {
        return getTypeNode().getArrayDepth();
    }

    private ASTVariableDeclaratorId getDecl() {
        return (ASTVariableDeclaratorId) jjtGetChild(jjtGetNumChildren()-1);
=====================================================================
Found a 12 line (90 tokens) duplication in the following files: 
Starting at line 35 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\coupling\LooseCouplingRule.java
Starting at line 33 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\rules\LooseCoupling.java

            addViolation(data, node, typeName);
        }
        return data;
    }

    private boolean methodHasOverride(Node node) {
        ASTClassOrInterfaceBodyDeclaration method = node.getFirstParentOfType(ASTClassOrInterfaceBodyDeclaration.class);
        if (method != null && method.jjtGetNumChildren() > 0 && method.jjtGetChild(0) instanceof ASTAnnotation) {
            ASTMarkerAnnotation marker = method.getFirstDescendantOfType(ASTMarkerAnnotation.class);
            if (marker != null && marker.getFirstChildOfType(ASTName.class) != null) {
                ASTName name = marker.getFirstChildOfType(ASTName.class);
                if ("Override".equals(name.getImage())) {
=====================================================================
Found a 16 line (90 tokens) duplication in the following files: 
Starting at line 30 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\MethodNameDeclaration.java
Starting at line 48 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\MethodNameDeclaration.java

        }
        return false;
    }

    public ASTMethodDeclarator getMethodNameDeclaratorNode() {
        return (ASTMethodDeclarator) node;
    }

    public String getParameterDisplaySignature() {
    	StringBuilder sb = new StringBuilder("(");
        ASTFormalParameters params = (ASTFormalParameters) node.jjtGetChild(0);
        // TODO - this can be optimized - add [0] then ,[n] in a loop.
        //        no need to trim at the end
        for (int i = 0; i < ((ASTMethodDeclarator) node).getParameterCount(); i++) {
            ASTFormalParameter p = (ASTFormalParameter) params.jjtGetChild(i);
            sb.append(p.getTypeNode().getTypeImage());
=====================================================================
Found a 9 line (90 tokens) duplication in the following files: 
Starting at line 17 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\rule\basic\EmptyForeachStmtRule.java
Starting at line 35 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\rule\basic\EmptyIfStmtRule.java

    public Object visit(final ASTForeachStatement node, final Object data) {
        final ASTBlock block = node.getFirstChildOfType(ASTBlock.class);
        if (block.jjtGetNumChildren() == 0) {
            addViolation(data, node);
        }
        else if (block.jjtGetNumChildren() == 1 && block.jjtGetChild(0) instanceof ASTText
                && StringUtils.isBlank(((AbstractVmNode)block.jjtGetChild(0)).getFirstToken().toString())) {
            addViolation(data, node);
        }
=====================================================================
Found a 35 line (89 tokens) duplication in the following files: 
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTPrimarySuffix.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTPrimarySuffix.java

        super(p, id);
    }

    private boolean isArguments;
    private boolean isArrayDereference;

    public void setIsArrayDereference() {
        isArrayDereference = true;
    }

    public boolean isArrayDereference() {
        return isArrayDereference;
    }

    public void setIsArguments() {
        this.isArguments = true;
    }

    public boolean isArguments() {
        return this.isArguments;
    }

    /**
     * Get the number of arguments for this primary suffix.  One should call
     * {@link #isArguments()} to see if there are arguments.  If this method is
     * called when there are no arguments it returns <code>-1</code>.
     * @return A non-negative argument number when there are arguments,
     * <code>-1</code> otherwise.
     */
    public int getArgumentCount() {
        if (!this.isArguments()) {
            return -1;
        }
        return ((ASTArguments)jjtGetChild(jjtGetNumChildren()-1)).getArgumentCount();
    }
=====================================================================
Found a 20 line (89 tokens) duplication in the following files: 
Starting at line 213 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\CyclomaticComplexityRule.java
Starting at line 386 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\CyclomaticComplexityRule.java

    if (!isSuppressed(node)) {
	    int methodDecisionPoints = methodEntry.decisionPoints;
	    Entry classEntry = entryStack.peek();
	    classEntry.methodCount++;
	    classEntry.bumpDecisionPoints( methodDecisionPoints );

	    if ( methodDecisionPoints > classEntry.highestDecisionPoints ) {
	      classEntry.highestDecisionPoints = methodDecisionPoints;
	    }

	    ASTMethodDeclarator methodDeclarator = null;
	    for ( int n = 0; n < node.jjtGetNumChildren(); n++ ) {
	      Node childNode = node.jjtGetChild( n );
	      if ( childNode instanceof ASTMethodDeclarator ) {
	        methodDeclarator = (ASTMethodDeclarator) childNode;
	        break;
	      }
	    }

	    if ( showMethodsComplexity && methodEntry.decisionPoints >= reportLevel ) {
=====================================================================
Found a 18 line (88 tokens) duplication in the following files: 
Starting at line 48 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\TooManyFieldsRule.java
Starting at line 68 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\TooManyFieldsRule.java

    public Object visit(ASTPackageSpecification node, Object data) {

        int maxFields = getProperty(MAX_FIELDS_DESCRIPTOR);
        
        List<ASTVariableOrConstantDeclaration> l = node.findDescendantsOfType(ASTVariableOrConstantDeclaration.class);

        for (ASTVariableOrConstantDeclaration fd: l) {
          bumpCounterFor(node);
        }
        for (String k : stats.keySet()) {
            int val = stats.get(k);
            Node n = nodes.get(k);
            if (val > maxFields) {
                addViolation(data, n);
            }
        }
        return data;
    }
=====================================================================
Found a 25 line (87 tokens) duplication in the following files: 
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTFunctionCall.java
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTNewExpression.java

	super(functionCall);
    }

    /**
     * Accept the visitor.
     */
    public Object jjtAccept(EcmascriptParserVisitor visitor, Object data) {
	return visitor.visit(this, data);
    }

    public EcmascriptNode getTarget() {
	return (EcmascriptNode) jjtGetChild(0);
    }

    public int getNumArguments() {
	return node.getArguments().size();
    }

    public EcmascriptNode getArgument(int index) {
	return (EcmascriptNode) jjtGetChild(index + 1);
    }

    public boolean hasArguments() {
	return getNumArguments() != 0;
    }
=====================================================================
Found a 16 line (87 tokens) duplication in the following files: 
Starting at line 431 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 501 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java

    public Object visit(ASTTryStatement node, Object data) {
        return visit((JavaNode) node, data);
    }
    public Object visit(ASTResourceSpecification node, Object data) {
        return visit((JavaNode) node, data);
    }
    
    public Object visit(ASTResources node, Object data) {
        return visit((JavaNode) node, data);
    }
    
    public Object visit(ASTResource node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTFinallyStatement node, Object data) {
=====================================================================
Found a 20 line (87 tokens) duplication in the following files: 
Starting at line 212 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\JavaNameOccurrence.java
Starting at line 222 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\PLSQLNameOccurrence.java

    		JavaNameOccurrence n = (JavaNameOccurrence) o;
    		return n.getImage().equals(getImage());
    		}
    	return false;
    }

    @Override
    public int hashCode() {
        return getImage().hashCode();
    }

    public String getImage() {
        return image;
    }

    @Override
    public String toString() {
        return getImage() + ":" + location.getBeginLine() + ":" + location.getClass() + (this.isMethodOrConstructorInvocation() ? "(method call)" : "");
    }
}
=====================================================================
Found a 11 line (85 tokens) duplication in the following files: 
Starting at line 129 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\StringUtil.java
Starting at line 155 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\StringUtil.java

		int index = original.indexOf(oldChar);
		if (index < 0) {
		    return original;
		} else {
		    final String replace = newString == null ? "" : newString;
		    final StringBuilder buf = new StringBuilder(Math.max(16, original.length() + replace.length()));
		    int last = 0;
		    while (index != -1) {
				buf.append(original.substring(last, index));
				buf.append(replace);
				last = index + 1;
=====================================================================
Found a 21 line (84 tokens) duplication in the following files: 
Starting at line 22 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTClassOrInterfaceBodyDeclaration.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTTypeDeclaration.java

	return isAnonymousInnerClass();
    }

    public boolean hasSuppressWarningsAnnotationFor(Rule rule) {
        for (int i = 0; i < jjtGetNumChildren(); i++) {
            if (jjtGetChild(i) instanceof ASTAnnotation) {
                ASTAnnotation a = (ASTAnnotation) jjtGetChild(i);
                if (a.suppresses(rule)) {
                    return true;
                }
            }
        }
        return false;
    }

    /**
     * Accept the visitor. *
     */
    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }
=====================================================================
Found a 34 line (83 tokens) duplication in the following files: 
Starting at line 239 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\strings\ConsecutiveLiteralAppendsRule.java
Starting at line 302 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\strings\InsufficientStringBufferDeclarationRule.java

	}

	/**
	 * Get the first parent. Keep track of the last node though. For If
	 * statements it's the only way we can differentiate between if's and else's
	 * For switches it's the only way we can differentiate between switches
	 *
	 * @param node The node to check
	 * @return The first parent block
	 */
	private Node getFirstParentBlock(Node node) {
		Node parentNode = node.jjtGetParent();

		Node lastNode = node;
		while (parentNode != null && !BLOCK_PARENTS.contains(parentNode.getClass())) {
			lastNode = parentNode;
			parentNode = parentNode.jjtGetParent();
		}
		if (parentNode instanceof ASTIfStatement) {
			parentNode = lastNode;
		} else if (parentNode instanceof ASTSwitchStatement) {
			parentNode = getSwitchParent(parentNode, lastNode);
		}
		return parentNode;
	}

	/**
	 * Determine which SwitchLabel we belong to inside a switch
	 *
	 * @param parentNode The parent node we're looking at
	 * @param lastNode   The last node processed
	 * @return The parent node for the switch statement
	 */
	private Node getSwitchParent(Node parentNode, Node lastNode) {
=====================================================================
Found a 29 line (79 tokens) duplication in the following files: 
Starting at line 30 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTAttribute.java
Starting at line 31 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTElement.java

    public boolean isHasNamespacePrefix() {
        return name.indexOf(':') >= 0;
    }

    /**
     * @return String - the part of the name that is before the (first) colon (":")
     */
    public String getNamespacePrefix() {
        int colonIndex = name.indexOf(':');
        return colonIndex >= 0
                ? name.substring(0, colonIndex)
                : "";
    }

    /**
     * @return String - The part of the name that is after the first colon (":").
     *         If the name does not contain a colon, the full name is returned.
     */
    public String getLocalName() {
        int colonIndex = name.indexOf(':');
        return colonIndex >= 0
                ? name.substring(colonIndex + 1)
                : name;
    }

/* END CUSTOM CODE */


    public ASTAttribute(int id) {
=====================================================================
Found a 13 line (79 tokens) duplication in the following files: 
Starting at line 223 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NPathComplexityRule.java
Starting at line 256 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NPathComplexityRule.java

	int boolCompIf = sumExpressionComplexity(node.getFirstChildOfType(ASTExpression.class));

	int complexity = 0;

	List<PLSQLNode> statementChildren = new ArrayList<PLSQLNode>();
	for (int i = 0; i < node.jjtGetNumChildren(); i++) {
	    if (
                node.jjtGetChild(i).getClass() == ASTStatement.class
               ) {
		statementChildren.add((PLSQLNode) node.jjtGetChild(i));
	    }
	}
        LOGGER.finest(statementChildren.size() + " statementChildren found for ELSIF statement " + node.getBeginLine() +", column " + node.getBeginColumn());
=====================================================================
Found a 6 line (78 tokens) duplication in the following files: 
Starting at line 111 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 205 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java

            LOGGER.finest("pushOnStack parent IF_EXPR: line " + node.getBeginLine() +", column " + node.getBeginColumn());
        } else if (node.jjtGetParent() instanceof ASTWhileStatement) {
            dataFlow.createNewNode(node); // START WHILE
            dataFlow.pushOnStack(NodeType.WHILE_EXPR, dataFlow.getLast());
            LOGGER.finest("pushOnStack parent WHILE_EXPR: line " + node.getBeginLine() +", column " + node.getBeginColumn());
        } else if (node.jjtGetParent() instanceof ASTSwitchStatement) {
=====================================================================
Found a 14 line (78 tokens) duplication in the following files: 
Starting at line 272 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\strings\ConsecutiveLiteralAppendsRule.java
Starting at line 337 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\strings\InsufficientStringBufferDeclarationRule.java

	private Node getSwitchParent(Node parentNode, Node lastNode) {
		int allChildren = parentNode.jjtGetNumChildren();
		ASTSwitchLabel label = null;
		for (int ix = 0; ix < allChildren; ix++) {
			Node n = parentNode.jjtGetChild(ix);
			if (n instanceof ASTSwitchLabel) {
				label = (ASTSwitchLabel) n;
			} else if (n.equals(lastNode)) {
				parentNode = label;
				break;
			}
		}
		return parentNode;
	}
=====================================================================
Found a 12 line (78 tokens) duplication in the following files: 
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\MethodNameDeclaration.java
Starting at line 29 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\MethodNameDeclaration.java

    public MethodNameDeclaration(ASTMethodDeclarator node) {
        super(node);
    }

    public int getParameterCount() {
        return ((ASTMethodDeclarator) node).getParameterCount();
    }

    public boolean isVarargs() {
        ASTFormalParameters params = (ASTFormalParameters) node.jjtGetChild(0);
        for (int i = 0; i < ((ASTMethodDeclarator) node).getParameterCount(); i++) {
            ASTFormalParameter p = (ASTFormalParameter) params.jjtGetChild(i);
=====================================================================
Found a 15 line (77 tokens) duplication in the following files: 
Starting at line 227 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\CyclomaticComplexityRule.java
Starting at line 252 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\CyclomaticComplexityRule.java

    LOGGER.finest("ASTPackageBody: ComplexityAverage==" + classEntry.getComplexityAverage() 
                   +", highestDecisionPoint=" 
                   + classEntry.highestDecisionPoints
                 );
    if ( showClassesComplexity ) {
	    if ( classEntry.getComplexityAverage() >= reportLevel
	        || classEntry.highestDecisionPoints >= reportLevel ) {
	      addViolation( data, node, new String[] {
	          "class",
	          node.getImage(),
	          classEntry.getComplexityAverage() + " (Highest = "
	              + classEntry.highestDecisionPoints + ')' } );
	    }
    }
    LOGGER.exiting(CLASS_NAME,"visit(ASTPackageBody)");
=====================================================================
Found a 9 line (76 tokens) duplication in the following files: 
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\rule\basic\AvoidReassigningParametersRule.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\rule\basic\UnusedMacroParameterRule.java

public class AvoidReassigningParametersRule extends AbstractVmRule {

    @Override
    public Object visit(final ASTDirective node, final Object data) {
        if ("macro".equals(node.getDirectiveName())) {
            final Set<String> paramNames = new HashSet<String>();
            final List<ASTReference> params = node.findChildrenOfType(ASTReference.class);
            for (final ASTReference param : params) {
                paramNames.add(param.getFirstToken().toString());
=====================================================================
Found a 11 line (75 tokens) duplication in the following files: 
Starting at line 256 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\DesignPatternDetection.java
Starting at line 609 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\DesignPatternDetection.java

		if (context.findDescendantsOfType(ASTPrimitiveType.class).size() == 0) {
			candidate.setAttributeType(context
					.getFirstChildOfType(ASTType.class)
					.getFirstChildOfType(ASTReferenceType.class)
					.getFirstChildOfType(ASTClassOrInterfaceType.class)
					.getImage());
		} else {
			candidate.setAttributeType(context
					.findDescendantsOfType(ASTPrimitiveType.class).get(0)
					.getImage());
		}
=====================================================================
Found a 17 line (75 tokens) duplication in the following files: 
Starting at line 70 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\DumpFacade.java
Starting at line 72 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\DumpFacade.java

			if (image != null) {
				result += "." + image;
			}
			image = result;
		} else if (node instanceof ASTPrimarySuffix) {
			ASTPrimarySuffix primarySuffix = (ASTPrimarySuffix) node;
			if (primarySuffix.isArrayDereference()) {
				if (image == null) {
					image = "[";
				} else {
					image = "[" + image;
				}
			}
		}

		// Extras
		List<String> extras = new ArrayList<String>();
=====================================================================
Found a 18 line (75 tokens) duplication in the following files: 
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractStatisticalJavaRule.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractStatisticalPLSQLRule.java

public abstract class AbstractStatisticalJavaRule extends AbstractJavaRule implements StatisticalRule {

    private final StatisticalRuleHelper helper = new StatisticalRuleHelper(this);

    public void addDataPoint(DataPoint point) {
	helper.addDataPoint(point);
    }

    public Object[] getViolationParameters(DataPoint point) {
	return null;
    }

    @Override
    public void apply(List<? extends Node> nodes, RuleContext ctx) {
	super.apply(nodes, ctx);
	helper.apply(ctx);
    }
}
=====================================================================
Found a 11 line (75 tokens) duplication in the following files: 
Starting at line 81 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NPathComplexityRule.java
Starting at line 97 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NPathComplexityRule.java
Starting at line 113 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NPathComplexityRule.java
Starting at line 129 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NPathComplexityRule.java
Starting at line 145 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NPathComplexityRule.java

        LOGGER.entering(CLASS_NAME,"visit(ASTMethodDeclaration)");
	int npath = complexityMultipleOf(node, 1, data);

	DataPoint point = new DataPoint();
	point.setNode(node);
	point.setScore(1.0 * npath);
	point.setMessage(getMessage());
	addDataPoint(point);

        LOGGER.finest("NPath complexity:  " + npath + " for line " + node.getBeginLine() +", column " + node.getBeginColumn());
        LOGGER.exiting(CLASS_NAME,"visit(ASTMethodDeclaration)", npath);
=====================================================================
Found a 15 line (72 tokens) duplication in the following files: 
Starting at line 37 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\ExcessiveNodeCountRule.java
Starting at line 37 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\design\ExcessiveNodeCountRule.java

	    Integer treeSize = (Integer) ((JavaNode) node.jjtGetChild(i)).jjtAccept(this, data);
	    numNodes += treeSize;
	}

	if (nodeClass.isInstance(node)) {
	    DataPoint point = new DataPoint();
	    point.setNode(node);
	    point.setScore(1.0 * numNodes);
	    point.setMessage(getMessage());
	    addDataPoint(point);
	}

	return Integer.valueOf(numNodes);
    }
}
=====================================================================
Found a 20 line (71 tokens) duplication in the following files: 
Starting at line 186 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\DumpFacade.java
Starting at line 85 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\DumpFacade.java
Starting at line 74 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\xml\ast\DumpFacade.java

			extras.add("has side effects");
		}

		// Output image and extras
		if (image != null || !extras.isEmpty()) {
			writer.print(':');
			if (image != null) {
				writer.print(image);
			}
			for (String extra : extras) {
				writer.print('(');
				writer.print(extra);
				writer.print(')');
			}
		}

		writer.println();
	}

}
=====================================================================
Found a 17 line (71 tokens) duplication in the following files: 
Starting at line 239 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\NPathComplexityRule.java
Starting at line 408 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NPathComplexityRule.java

            return 0;
        }

        List<ASTConditionalAndExpression> andNodes = expr.findDescendantsOfType(ASTConditionalAndExpression.class);
        List<ASTConditionalOrExpression> orNodes = expr.findDescendantsOfType(ASTConditionalOrExpression.class);

        int children = 0;

        for (ASTConditionalOrExpression element : orNodes) {
            children += element.jjtGetNumChildren();
            children--;
        }

        for (ASTConditionalAndExpression element : andNodes) {
            children += element.jjtGetNumChildren();
            children--;
        }
=====================================================================
Found a 12 line (69 tokens) duplication in the following files: 
Starting at line 72 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\CandidateDAO.java
Starting at line 106 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\CandidateDAO.java

				if (candidate.getClassName() != null) {
					this.searchPackageID(candidate, true);
					Statement stmt = connection.createStatement();
					String sql = "INSERT into Classes (name, activeClass, package_id)"
							+ "VALUES ('"
							+ candidate.getClassName()
							+ "','"
							+ Boolean.toString(candidate.isActiveClass())
							+ "'," + candidate.getPackageNumber() + ");";
					stmt.executeUpdate(sql);
					stmt.close();
					connection.commit();
=====================================================================
Found a 17 line (69 tokens) duplication in the following files: 
Starting at line 187 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\DumpFacade.java
Starting at line 187 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\DumpFacade.java
Starting at line 86 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\DumpFacade.java
Starting at line 75 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\xml\ast\DumpFacade.java

		}

		// Output image and extras
		if (image != null || !extras.isEmpty()) {
			writer.print(':');
			if (image != null) {
				writer.print(image);
			}
			for (String extra : extras) {
				writer.print('(');
				writer.print(extra);
				writer.print(')');
			}
		}

		writer.println();
	}
=====================================================================
Found a 16 line (69 tokens) duplication in the following files: 
Starting at line 190 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\DumpFacade.java
Starting at line 89 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\DumpFacade.java
Starting at line 91 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\DumpFacade.java
Starting at line 78 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\xml\ast\DumpFacade.java

		if (image != null || !extras.isEmpty()) {
			writer.print(':');
			if (image != null) {
				writer.print(image);
			}
			for (String extra : extras) {
				writer.print('(');
				writer.print(extra);
				writer.print(')');
			}
		}

		writer.println();
	}

}
=====================================================================
Found a 15 line (68 tokens) duplication in the following files: 
Starting at line 137 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\DesignPatternDetection.java
Starting at line 176 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\DesignPatternDetection.java

		if (method.getParentsOfType(ASTClassOrInterfaceDeclaration.class)
				.size() == 0) {
			candidate.setClassName(method
					.getParentsOfType(ASTEnumDeclaration.class).get(0)
					.getImage());
		} else {
			candidate.setClassName(method
					.getParentsOfType(ASTClassOrInterfaceDeclaration.class)
					.get(0).getImage());
		}
//		
//		candidate.setClassName(method
//				.getParentsOfType(ASTClassOrInterfaceDeclaration.class).get(0)
//				.getImage());
		candidate.setMethodName(candidate.getClassName());
=====================================================================
Found a 14 line (68 tokens) duplication in the following files: 
Starting at line 190 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\DumpFacade.java
Starting at line 91 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\DumpFacade.java

		if (image != null || !extras.isEmpty()) {
			writer.print(':');
			if (image != null) {
				writer.print(image);
			}
			for (String extra : extras) {
				writer.print('(');
				writer.print(extra);
				writer.print(')');
			}
		}

		writer.println();
	}
=====================================================================
Found a 9 line (68 tokens) duplication in the following files: 
Starting at line 71 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\VariableAccessVisitor.java
Starting at line 97 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\VariableAccessVisitor.java

		} else if (vnd.getAccessNodeParent().getFirstDescendantOfType(ASTVariableInitializer.class) != null) {
		    // add definition for initialized variables
		    addVariableAccess(vnd.getNode(), new VariableAccess(VariableAccess.DEFINITION, vnd.getImage()),
			    inode.getFlow());
		}
		undefinitions.add(new VariableAccess(VariableAccess.UNDEFINITION, vnd.getImage()));

		for (NameOccurrence occurrence : entry.getValue()) {
		    addAccess((JavaNameOccurrence)occurrence, inode);
=====================================================================
Found a 6 line (68 tokens) duplication in the following files: 
Starting at line 42 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\NameFinder.java
Starting at line 46 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\NameFinder.java

            add(new JavaNameOccurrence(node, node.getImage()));
        }
        if (node.jjtGetNumChildren() > 0 && node.jjtGetChild(0) instanceof ASTName) {
            ASTName grandchild = (ASTName) node.jjtGetChild(0);
            for (StringTokenizer st = new StringTokenizer(grandchild.getImage(), "."); st.hasMoreTokens();) {
                add(new JavaNameOccurrence(grandchild, st.nextToken()));
=====================================================================
Found a 13 line (68 tokens) duplication in the following files: 
Starting at line 272 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\CyclomaticComplexityRule.java
Starting at line 328 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\CyclomaticComplexityRule.java

    LOGGER.entering(CLASS_NAME,"visit(ASTProgramUnit)");
    entryStack.push( new Entry( node ) );
    super.visit( node, data );
    Entry methodEntry = entryStack.pop();
    LOGGER.finest("ASTProgramUnit: ComplexityAverage==" + methodEntry.getComplexityAverage() 
                   +", highestDecisionPoint=" 
                   + methodEntry.highestDecisionPoints
                 );
    if ( showMethodsComplexity ) {
	    //Entry methodEntry = entryStack.pop();
	    int methodDecisionPoints = methodEntry.decisionPoints;
            if ( 
                    null != node.getFirstParentOfType(ASTPackageBody.class) //PackageBody (including Object Type Body)
=====================================================================
Found a 16 line (67 tokens) duplication in the following files: 
Starting at line 157 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\NPathComplexityRule.java
Starting at line 323 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NPathComplexityRule.java

        ASTExpression expr = node.getFirstChildOfType(ASTExpression.class);

        if (expr == null) {
            return NumericConstants.ONE;
        }

        int boolCompReturn = sumExpressionComplexity(expr);
        int conditionalExpressionComplexity = complexityMultipleOf(expr, 1, data);

        if (conditionalExpressionComplexity > 1) {
            boolCompReturn += conditionalExpressionComplexity;
        }

        if (boolCompReturn > 0) {
            return Integer.valueOf(boolCompReturn);
        }
=====================================================================
Found a 10 line (67 tokens) duplication in the following files: 
Starting at line 64 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\TooManyFieldsRule.java
Starting at line 87 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\TooManyFieldsRule.java

    private void bumpCounterFor(ASTClassOrInterfaceDeclaration clazz) {
        String key = clazz.getImage();
        if (!stats.containsKey(key)) {
            stats.put(key, NumericConstants.ZERO);
            nodes.put(key, clazz);
        }
        Integer i = Integer.valueOf(stats.get(key) + 1);
        stats.put(key, i);
    }
}
=====================================================================
Found a 5 line (67 tokens) duplication in the following files: 
Starting at line 25 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\AssignmentToNonFinalStaticRule.java
Starting at line 30 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\unusedcode\UnusedPrivateFieldRule.java

    public Object visit(ASTClassOrInterfaceDeclaration node, Object data) {
        Map<VariableNameDeclaration, List<NameOccurrence>> vars = node.getScope().getDeclarations(VariableNameDeclaration.class);
        for (Map.Entry<VariableNameDeclaration, List<NameOccurrence>> entry: vars.entrySet()) {
            VariableNameDeclaration decl = entry.getKey();
            AccessNode accessNodeParent = (AccessNode)decl.getAccessNodeParent();
=====================================================================
Found a 11 line (67 tokens) duplication in the following files: 
Starting at line 53 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\LocalScope.java
Starting at line 44 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\LocalScope.java

    public NameDeclaration findVariableHere(JavaNameOccurrence occurrence) {
        if (occurrence.isThisOrSuper() || occurrence.isMethodOrConstructorInvocation()) {
            return null;
        }
        ImageFinderFunction finder = new ImageFinderFunction(occurrence.getImage());
        Applier.apply(finder, getVariableDeclarations().keySet().iterator());
        return finder.getDecl();
    }

    public String toString() {
        return "LocalScope:" + glomNames(getVariableDeclarations().keySet());
=====================================================================
Found a 13 line (66 tokens) duplication in the following files: 
Starting at line 17 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\DumpFacade.java
Starting at line 19 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\DumpFacade.java
Starting at line 17 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\DumpFacade.java

	public void initializeWith(Writer writer, String prefix, boolean recurse, JavaNode node) {
		this.writer = (writer instanceof PrintWriter) ? (PrintWriter) writer : new PrintWriter(writer);
		this.recurse = recurse;
		this.visit(node, prefix);
		try {
			writer.flush();
		} catch (IOException e) {
			throw new RuntimeException("Problem flushing PrintWriter.", e);
		}
	}

	@Override
	public Object visit(JavaNode node, Object data) {
=====================================================================
Found a 14 line (66 tokens) duplication in the following files: 
Starting at line 310 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\ConstructorCallsOverridableMethodRule.java
Starting at line 345 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\ConstructorCallsOverridableMethodRule.java

                                for (int x = thisIndex + 1; x < i - 1; x++) {//everything after this is var name or method name
                                    ASTPrimarySuffix child = (ASTPrimarySuffix) node.jjtGetChild(x);
                                    if (!child.isArguments()) { //skip the () of method calls
                                        String name = child.getImage();
                                        //										System.out.println("Found suffix: " + suffixName);
                                        if (x == i - 2) {
                                            methodName = name;
                                        } else {
                                            varNames.add(name);
                                        }
                                    }
                                }
                            }
                        }
=====================================================================
Found a 12 line (66 tokens) duplication in the following files: 
Starting at line 51 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\LocalScope.java
Starting at line 48 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\MethodScope.java

    }

    public NameDeclaration findVariableHere(JavaNameOccurrence occurrence) {
        if (occurrence.isThisOrSuper() || occurrence.isMethodOrConstructorInvocation()) {
            return null;
        }
        ImageFinderFunction finder = new ImageFinderFunction(occurrence.getImage());
        Applier.apply(finder, getVariableDeclarations().keySet().iterator());
        return finder.getDecl();
    }

    public String toString() {
=====================================================================
Found a 13 line (65 tokens) duplication in the following files: 
Starting at line 442 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 493 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java

    public Object visit(ASTResource node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTFinallyStatement node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTCatchStatement node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTLambdaExpression node, Object data) {
=====================================================================
Found a 12 line (65 tokens) duplication in the following files: 
Starting at line 88 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\DataFlowFacade.java
Starting at line 102 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\DataFlowFacade.java

                      + node.getClass().getCanonicalName() + " @ line " 
                      + node.getBeginLine() 
                      +", column " + node.getBeginColumn()
                      + " --- " + new Throwable().getStackTrace()
                );
        sbf.buildDataFlowFor(node);
        vav.compute(node);
        LOGGER.exiting(CLASS_PATH,"visit(ASTProgramUnit)");
        return data;
    }

    public Object visit(ASTProgramUnit node, Object data) {
=====================================================================
Found a 11 line (65 tokens) duplication in the following files: 
Starting at line 169 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NPathComplexityRule.java
Starting at line 220 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NPathComplexityRule.java

        LOGGER.entering(CLASS_NAME,"visit(ASTIfStatement)");
	// (npath of if + npath of else (or 1) + bool_comp of if) * npath of next

	int boolCompIf = sumExpressionComplexity(node.getFirstChildOfType(ASTExpression.class));

	int complexity = 0;

	List<PLSQLNode> statementChildren = new ArrayList<PLSQLNode>();
	for (int i = 0; i < node.jjtGetNumChildren(); i++) {
	    if (
                node.jjtGetChild(i).getClass() == ASTStatement.class
=====================================================================
Found a 11 line (65 tokens) duplication in the following files: 
Starting at line 23 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\xml\rule\AbstractXmlRule.java
Starting at line 12 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\xml\rule\XmlXPathRule.java

public class AbstractXmlRule extends AbstractRule implements ImmutableLanguage {

    public static final BooleanProperty COALESCING_DESCRIPTOR = XmlParserOptions.COALESCING_DESCRIPTOR;
    public static final BooleanProperty EXPAND_ENTITY_REFERENCES_DESCRIPTOR = XmlParserOptions.EXPAND_ENTITY_REFERENCES_DESCRIPTOR;
    public static final BooleanProperty IGNORING_COMMENTS_DESCRIPTOR = XmlParserOptions.IGNORING_COMMENTS_DESCRIPTOR;
    public static final BooleanProperty IGNORING_ELEMENT_CONTENT_WHITESPACE_DESCRIPTOR = XmlParserOptions.IGNORING_ELEMENT_CONTENT_WHITESPACE_DESCRIPTOR;
    public static final BooleanProperty NAMESPACE_AWARE_DESCRIPTOR = XmlParserOptions.NAMESPACE_AWARE_DESCRIPTOR;
    public static final BooleanProperty VALIDATING_DESCRIPTOR = XmlParserOptions.VALIDATING_DESCRIPTOR;
    public static final BooleanProperty XINCLUDE_AWARE_DESCRIPTOR = XmlParserOptions.XINCLUDE_AWARE_DESCRIPTOR;

    public AbstractXmlRule() {
=====================================================================
Found a 12 line (64 tokens) duplication in the following files: 
Starting at line 19 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\DumpFacade.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\xml\ast\DumpFacade.java

	public void initializeWith(Writer writer, String prefix, boolean recurse, EcmascriptNode<?> node) {
		this.writer = (writer instanceof PrintWriter) ? (PrintWriter) writer : new PrintWriter(writer);
		this.recurse = recurse;
		this.dump(node, prefix);
		try {
			writer.flush();
		} catch (IOException e) {
			throw new RuntimeException("Problem flushing PrintWriter.", e);
		}
	}

	public Object visit(EcmascriptNode<?> node, Object data) {
=====================================================================
Found a 19 line (64 tokens) duplication in the following files: 
Starting at line 22 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTClassOrInterfaceBodyDeclaration.java
Starting at line 32 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTFormalParameter.java
Starting at line 25 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTLocalVariableDeclaration.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTTypeDeclaration.java

	return isAnonymousInnerClass();
    }

    public boolean hasSuppressWarningsAnnotationFor(Rule rule) {
        for (int i = 0; i < jjtGetNumChildren(); i++) {
            if (jjtGetChild(i) instanceof ASTAnnotation) {
                ASTAnnotation a = (ASTAnnotation) jjtGetChild(i);
                if (a.suppresses(rule)) {
                    return true;
                }
            }
        }
        return false;
    }

    /**
     * Accept the visitor. *
     */
    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
=====================================================================
Found a 7 line (64 tokens) duplication in the following files: 
Starting at line 41 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\optimizations\UnnecessaryWrapperObjectCreationRule.java
Starting at line 22 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\strings\UselessStringValueOfRule.java

    public Object visit(ASTPrimaryPrefix node, Object data) {
        if (node.jjtGetNumChildren() == 0 || !(node.jjtGetChild(0) instanceof ASTName)) {
            return super.visit(node, data);
        }

        String image = ((ASTName) node.jjtGetChild(0)).getImage();
        if (image.startsWith("java.lang.")) {
=====================================================================
Found a 10 line (64 tokens) duplication in the following files: 
Starting at line 50 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\MethodScope.java
Starting at line 54 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\MethodScope.java

    public NameDeclaration findVariableHere(JavaNameOccurrence occurrence) {
        if (occurrence.isThisOrSuper() || occurrence.isMethodOrConstructorInvocation()) {
            return null;
        }
        ImageFinderFunction finder = new ImageFinderFunction(occurrence.getImage());
        Applier.apply(finder, getVariableDeclarations().keySet().iterator());
        return finder.getDecl();
    }

    public String getName() {
=====================================================================
Found a 9 line (63 tokens) duplication in the following files: 
Starting at line 335 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 347 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java

            ASTWhileStatement statement = (ASTWhileStatement) node.jjtGetParent();
            List<ASTStatement> children = statement.findChildrenOfType(ASTStatement.class);
            LOGGER.finest("(LastChildren): size " + children.size() );
            ASTStatement lastChild = children.get(children.size()-1);

            // Push on stack if this Node is the LAST Statement associated with the FOR Statment
            if ( node.equals(lastChild) )
            {
              dataFlow.pushOnStack(NodeType.WHILE_LAST_STATEMENT, dataFlow.getLast());
=====================================================================
Found a 14 line (63 tokens) duplication in the following files: 
Starting at line 156 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\filter\Filters.java
Starting at line 188 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\filter\Filters.java

		} else {
			for (String includeRegex : includeRegexes) {
				includeFilter.addFilter(new RegexStringFilter(includeRegex));
			}
		}

		OrFilter<String> excludeFilter = new OrFilter<String>();
		if (excludeRegexes != null) {
			for (String excludeRegex : excludeRegexes) {
				excludeFilter.addFilter(new RegexStringFilter(excludeRegex));
			}
		}

		return new AndFilter<String>(includeFilter, new NotFilter<String>(excludeFilter));
=====================================================================
Found a 12 line (62 tokens) duplication in the following files: 
Starting at line 450 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 513 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java

    public Object visit(ASTCatchStatement node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTLambdaExpression node, Object data) {
        return visit((JavaNode)node, data);
    }

    public Object visit(ASTMethodReference node, Object data) {
        return visit((JavaNode)node, data);
    }
}
=====================================================================
Found a 8 line (62 tokens) duplication in the following files: 
Starting at line 109 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\strings\ConsecutiveLiteralAppendsRule.java
Starting at line 81 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\strings\InsufficientStringBufferDeclarationRule.java

				}
				ASTPrimaryExpression s = n.getFirstParentOfType(ASTPrimaryExpression.class);
				int numChildren = s.jjtGetNumChildren();
				for (int jx = 0; jx < numChildren; jx++) {
					Node sn = s.jjtGetChild(jx);
					if (!(sn instanceof ASTPrimarySuffix) || sn.getImage() != null) {
						continue;
					}
=====================================================================
Found a 5 line (61 tokens) duplication in the following files: 
Starting at line 108 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 197 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java

        if (node.jjtGetParent() instanceof ASTIfStatement) {
            dataFlow.createNewNode(node); // START IF
            dataFlow.pushOnStack(NodeType.IF_EXPR, dataFlow.getLast());
            LOGGER.finest("pushOnStack parent IF_EXPR: line " + node.getBeginLine() +", column " + node.getBeginColumn());
        } else if (node.jjtGetParent() instanceof ASTWhileStatement) {
=====================================================================
Found a 14 line (61 tokens) duplication in the following files: 
Starting at line 33 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\strictexception\SignatureDeclareThrowsExceptionRule.java
Starting at line 93 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\rules\SignatureDeclareThrowsException.java

        return super.visit(node, o);
    }

    @Override
    public Object visit(ASTImportDeclaration node, Object o) {
        if (node.getImportedName().indexOf("junit") != -1) {
            junitImported = true;
        }
        return super.visit(node, o);
    }

    @Override
    public Object visit(ASTMethodDeclaration methodDeclaration, Object o) {
        if ((methodDeclaration.getMethodName().equals("setUp") || methodDeclaration.getMethodName().equals("tearDown")) && junitImported) {
=====================================================================
Found a 22 line (61 tokens) duplication in the following files: 
Starting at line 34 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\JavaNameOccurrence.java
Starting at line 25 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\PLSQLNameOccurrence.java

    public JavaNameOccurrence(JavaNode location, String image) {
        this.location = location;
        this.image = image;
    }

    public void setIsMethodOrConstructorInvocation() {
        isMethodOrConstructorInvocation = true;
    }

    public void setArgumentCount(int count) {
        argumentCount = count;
    }

    public int getArgumentCount() {
        return argumentCount;
    }

    public boolean isMethodOrConstructorInvocation() {
        return isMethodOrConstructorInvocation;
    }

    public void setNameWhichThisQualifies(NameOccurrence qualifiedName) {
=====================================================================
Found a 11 line (61 tokens) duplication in the following files: 
Starting at line 33 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\AbstractPLSQLNode.java
Starting at line 90 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\AbstractVmNode.java

	if (beginLine == -1 && (children == null || children.length == 0)) {
	    beginColumn = parser.token.beginColumn;
	}
	if (beginLine == -1) {
	    beginLine = parser.token.beginLine;
	}
	endLine = parser.token.endLine;
	endColumn = parser.token.endColumn;
  }

  public void jjtSetValue(Object value) { this.value = value; }
=====================================================================
Found a 8 line (61 tokens) duplication in the following files: 
Starting at line 51 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\AbstractNcssCountRule.java
Starting at line 51 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NcssObjectCountRule.java

    public Object visit(PLSQLNode node, Object data) {
	int numNodes = 0;

	for (int i = 0; i < node.jjtGetNumChildren(); i++) {
		PLSQLNode n = (PLSQLNode) node.jjtGetChild(i);
	    Integer treeSize = (Integer) n.jjtAccept(this, data);
	    numNodes += treeSize.intValue();
	}
=====================================================================
Found a 14 line (60 tokens) duplication in the following files: 
Starting at line 74 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\CandidateDAO.java
Starting at line 90 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\CandidateDAO.java

					Statement stmt = connection.createStatement();
					String sql = "INSERT into Classes (name, activeClass, package_id)"
							+ "VALUES ('"
							+ candidate.getClassName()
							+ "','"
							+ Boolean.toString(candidate.isActiveClass())
							+ "'," + candidate.getPackageNumber() + ");";
					stmt.executeUpdate(sql);
					stmt.close();
					connection.commit();
					// System.out
					// .println("Class Records created successfully in Case 1"
					// + candidate.getClassName());
				}
=====================================================================
Found a 21 line (60 tokens) duplication in the following files: 
Starting at line 40 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTVariableDeclaratorId.java
Starting at line 37 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTVariableOrConstantDeclaratorId.java

    public void setNameDeclaration(VariableNameDeclaration decl) {
        nameDeclaration = decl;
    }

    public List<NameOccurrence> getUsages() {
        return getScope().getDeclarations().get(nameDeclaration);
    }

    public void bumpArrayDepth() {
        arrayDepth++;
    }

    public int getArrayDepth() {
        return arrayDepth;
    }

    public boolean isArray() {
        return arrayDepth > 0;
    }

    public boolean isExceptionBlockParameter() {
=====================================================================
Found a 14 line (60 tokens) duplication in the following files: 
Starting at line 32 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\AbstractJavaNode.java
Starting at line 29 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\AbstractJspNode.java
Starting at line 90 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\AbstractVmNode.java

	if (beginLine == -1 && (children == null || children.length == 0)) {
	    beginColumn = parser.token.beginColumn;
	}
	if (beginLine == -1) {
	    beginLine = parser.token.beginLine;
	}
	endLine = parser.token.endLine;
	endColumn = parser.token.endColumn;
    }

    /**
     * Accept the visitor. *
     */
    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
=====================================================================
Found a 8 line (60 tokens) duplication in the following files: 
Starting at line 145 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 235 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java

    public Object visit(ASTLabeledStatement node, Object data) {
        dataFlow.createNewNode(node);
        dataFlow.pushOnStack(NodeType.LABEL_STATEMENT, dataFlow.getLast());
        LOGGER.finest("pushOnStack LABEL_STATEMENT: line " + node.getBeginLine() +", column " + node.getBeginColumn());
        return super.visit(node, data);
    }

    public Object visit(ASTForUpdate node, Object data) {
=====================================================================
Found a 10 line (60 tokens) duplication in the following files: 
Starting at line 53 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\LocalScope.java
Starting at line 54 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\MethodScope.java

    public NameDeclaration findVariableHere(JavaNameOccurrence occurrence) {
        if (occurrence.isThisOrSuper() || occurrence.isMethodOrConstructorInvocation()) {
            return null;
        }
        ImageFinderFunction finder = new ImageFinderFunction(occurrence.getImage());
        Applier.apply(finder, getVariableDeclarations().keySet().iterator());
        return finder.getDecl();
    }

    public String toString() {
=====================================================================
Found a 10 line (60 tokens) duplication in the following files: 
Starting at line 50 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\MethodScope.java
Starting at line 44 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\LocalScope.java

    public NameDeclaration findVariableHere(JavaNameOccurrence occurrence) {
        if (occurrence.isThisOrSuper() || occurrence.isMethodOrConstructorInvocation()) {
            return null;
        }
        ImageFinderFunction finder = new ImageFinderFunction(occurrence.getImage());
        Applier.apply(finder, getVariableDeclarations().keySet().iterator());
        return finder.getDecl();
    }

    public String getName() {
=====================================================================
Found a 5 line (60 tokens) duplication in the following files: 
Starting at line 33 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\rules\CloneMethodMustImplementCloneable.java
Starting at line 50 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\rules\SignatureDeclareThrowsException.java

	ASTImplementsList impl = node.getFirstChildOfType(ASTImplementsList.class);
	if (impl != null && impl.jjtGetParent().equals(node)) {
	    for (int ix = 0; ix < impl.jjtGetNumChildren(); ix++) {
		ASTClassOrInterfaceType type = (ASTClassOrInterfaceType) impl.jjtGetChild(ix);
		if (type.getType() == null) {
=====================================================================
Found a 22 line (60 tokens) duplication in the following files: 
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTTriggerTimingPointSection.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTTriggerUnit.java

  public ASTTriggerTimingPointSection(PLSQLParser p, int id) {
    super(p, id);
  }


  /** Accept the visitor. **/
  public Object jjtAccept(PLSQLParserVisitor visitor, Object data) {
    return visitor.visit(this, data);
  }

  /** 
   * return executable's name. 
   * @return 
   */
  public String getMethodName() {
      return getImage() ;
  }

  @Override
  public String getName() {
      return getMethodName();
  }
=====================================================================
Found a 11 line (60 tokens) duplication in the following files: 
Starting at line 351 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NPathComplexityRule.java
Starting at line 373 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NPathComplexityRule.java

	int caseRange = 0;
	for (int i = 0; i < node.jjtGetNumChildren(); i++) {
		PLSQLNode n = (PLSQLNode) node.jjtGetChild(i);

	    // Fall-through labels count as 1 for complexity
            Integer complexity = (Integer) n.jjtAccept(this, data);
            caseRange *= complexity;
	}
	// add in npath of last label
	npath += caseRange;
        LOGGER.exiting(CLASS_NAME,"visit(ASTCaseWhenClause)", (boolCompSwitch + npath) );
=====================================================================
Found a 28 line (60 tokens) duplication in the following files: 
Starting at line 102 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\properties\MethodMultiProperty.java
Starting at line 270 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\properties\MethodProperty.java

        return value == null ? "" : MethodProperty.asStringFor((Method) value);
    }

    /**
     * @param item Object
     * @return String
     */
    @Override
    protected String packageNameOf(Object item) {

        final Method method = (Method) item;
        return method.getDeclaringClass().getName() + '.' + method.getName();
    }

    /**
     * @return String
     */
    @Override
    protected String itemTypeName() {
        return "method";
    }
    
    /**
     *
     * @return Class
     * @see net.sourceforge.pmd.PropertyDescriptor#type()
     */
    public Class<Method[]> type() {
=====================================================================
Found a 11 line (59 tokens) duplication in the following files: 
Starting at line 90 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\CandidateDAO.java
Starting at line 109 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\CandidateDAO.java

				Statement stmt = connection.createStatement();
				String sql = "INSERT into Classes (name, activeClass, package_id)"
						+ "VALUES ('"
						+ candidate.getClassName()
						+ "','"
						+ Boolean.toString(candidate.isActiveClass())
						+ "',"
						+ candidate.getPackageNumber() + ");";
				stmt.executeUpdate(sql);
				stmt.close();
				connection.commit();
=====================================================================
Found a 8 line (58 tokens) duplication in the following files: 
Starting at line 20 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\LocalScope.java
Starting at line 26 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\MethodScope.java

    public Map<VariableNameDeclaration, List<NameOccurrence>> getVariableDeclarations() {
        return getDeclarations(VariableNameDeclaration.class);
    }

    public NameDeclaration addNameOccurrence(NameOccurrence occurrence) {
        JavaNameOccurrence javaOccurrence = (JavaNameOccurrence)occurrence;
        NameDeclaration decl = findVariableHere(javaOccurrence);
        if (decl != null && !javaOccurrence.isThisOrSuper()) {
=====================================================================
Found a 18 line (58 tokens) duplication in the following files: 
Starting at line 448 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\database\DBMSMetadata.java
Starting at line 526 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\database\DBMSMetadata.java

                                   ,sourceCodeObjects.getString("PROCEDURE_SCHEM")
                                   ,sourceCodeObjects.getString("PROCEDURE_TYPE")
                                   ,sourceCodeObjects.getString("PROCEDURE_NAME")
                                   )
                               );


                  sourceObjectsList.add(new SourceObject(
                                                          sourceCodeObjects.getString("PROCEDURE_SCHEM")
                                                         ,sourceCodeObjects.getString("PROCEDURE_TYPE")
                                                         ,sourceCodeObjects.getString("PROCEDURE_NAME")
                                                         ,null
                                                        ) 
                                       );
                }
              }
            }
          }
=====================================================================
Found a 28 line (57 tokens) duplication in the following files: 
Starting at line 536 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\DesignPatternDetection.java
Starting at line 184 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\coupling\LawOfDemeterRule.java

	private boolean hasSuffixesWithArguments(AbstractJavaNode expr) {
		boolean result = false;
		// pr�ft erst auf THIS und Super gibt es diese nicht dann
		if (hasRealPrefix(expr)) {
			List<ASTPrimarySuffix> suffixes = expr
					.findDescendantsOfType(ASTPrimarySuffix.class);
			// pr�fe jeden Knoten vom Type Suffix auf Argument. Sobald einer
			// gefunden liefere True zur�ck
			for (ASTPrimarySuffix suffix : suffixes) {
				if (suffix.isArguments()) {
					result = true;
					break;
				}
			}
		}
		return result;
	}

	/**
	 * Pr�ft ab ein Knoten vom Type PrimaryExpression einen THIS oder einen
	 * SUPER Keyword verwendt. Wenn ja dann gibt die Methode False zur�ck. This
	 * und Super weisen auf Lokale bzw. Vererbte MEthoden hin die man als Lokal
	 * betrachten kann.
	 * 
	 * @param expr
	 * @return
	 */
	private boolean hasRealPrefix(AbstractJavaNode expr) {
=====================================================================
Found a 10 line (57 tokens) duplication in the following files: 
Starting at line 124 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 226 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java

        } else if (node.jjtGetParent() instanceof ASTDoStatement) {
            dataFlow.createNewNode(node); // DO EXPR
            dataFlow.pushOnStack(NodeType.DO_EXPR, dataFlow.getLast());
            LOGGER.finest("pushOnStack parent DO_EXPR: line " + node.getBeginLine() +", column " + node.getBeginColumn());
        }

        return super.visit(node, data);
    }

    public Object visit(ASTForInit node, Object data) {
=====================================================================
Found a 25 line (56 tokens) duplication in the following files: 
Starting at line 19 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTPrimitiveType.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTReferenceType.java

        return getImage().equals("boolean");
    }

    /**
     * Accept the visitor. *
     */
    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }

    private int arrayDepth;

    public void bumpArrayDepth() {
        arrayDepth++;
    }

    public int getArrayDepth() {
        return arrayDepth;
    }

    public boolean isArray() {
        return arrayDepth > 0;
    }

}
=====================================================================
Found a 11 line (56 tokens) duplication in the following files: 
Starting at line 246 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 527 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java

    }


    public Object visit(ASTContinueStatement node, Object data) {
        if (!(data instanceof Structure)) {
            return data;
        }
        Structure dataFlow = (Structure) data;
        dataFlow.createNewNode(node);
        dataFlow.pushOnStack(NodeType.CONTINUE_STATEMENT, dataFlow.getLast());
        LOGGER.finest("pushOnStack CONTINUE_STATEMENT: line " + node.getBeginLine() +", column " + node.getBeginColumn());
=====================================================================
Found a 8 line (56 tokens) duplication in the following files: 
Starting at line 88 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\DataFlowFacade.java
Starting at line 102 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\DataFlowFacade.java
Starting at line 116 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\DataFlowFacade.java

                      + node.getClass().getCanonicalName() + " @ line " 
                      + node.getBeginLine() 
                      +", column " + node.getBeginColumn()
                      + " --- " + new Throwable().getStackTrace()
                );
        sbf.buildDataFlowFor(node);
        vav.compute(node);
        LOGGER.exiting(CLASS_PATH,"visit(ASTProgramUnit)");
=====================================================================
Found a 11 line (56 tokens) duplication in the following files: 
Starting at line 70 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\AbstractNcssCountRule.java
Starting at line 67 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NcssObjectCountRule.java

	    numNodes++;
	    DataPoint point = new DataPoint();
	    point.setNode(node);
	    point.setScore(1.0 * numNodes);
	    point.setMessage(getMessage());
	    addDataPoint(point);
            LOGGER.fine("Running score is " +  point.getScore());
	}

	return Integer.valueOf(numNodes);
    }
=====================================================================
Found a 5 line (55 tokens) duplication in the following files: 
Starting at line 116 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 210 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java

        } else if (node.jjtGetParent() instanceof ASTSwitchStatement) {
            dataFlow.createNewNode(node); // START SWITCH
            dataFlow.pushOnStack(NodeType.SWITCH_START, dataFlow.getLast());
            LOGGER.finest("pushOnStack parent SWITCH_START: line " + node.getBeginLine() +", column " + node.getBeginColumn());
        } else if (node.jjtGetParent() instanceof ASTForStatement) {
=====================================================================
Found a 4 line (55 tokens) duplication in the following files: 
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\unusedcode\UnusedModifierRule.java
Starting at line 24 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\unusedcode\UnusedModifierRule.java

        if (!node.isInterface() && node.isNested() && (node.isPublic() || node.isStatic())) {
            ASTClassOrInterfaceDeclaration parentClassInterface = node.getFirstParentOfType(ASTClassOrInterfaceDeclaration.class);
            ASTEnumDeclaration parentEnum = node.getFirstParentOfType(ASTEnumDeclaration.class);
            if (parentClassInterface != null && parentClassInterface.isInterface()
=====================================================================
Found a 15 line (55 tokens) duplication in the following files: 
Starting at line 33 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\xml\rule\AbstractXmlRule.java
Starting at line 22 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\xml\rule\XmlXPathRule.java

    public AbstractXmlRule() {
	super.setLanguage(Language.XML);
	definePropertyDescriptor(COALESCING_DESCRIPTOR);
	definePropertyDescriptor(EXPAND_ENTITY_REFERENCES_DESCRIPTOR);
	definePropertyDescriptor(IGNORING_COMMENTS_DESCRIPTOR);
	definePropertyDescriptor(IGNORING_ELEMENT_CONTENT_WHITESPACE_DESCRIPTOR);
	definePropertyDescriptor(NAMESPACE_AWARE_DESCRIPTOR);
	definePropertyDescriptor(VALIDATING_DESCRIPTOR);
	definePropertyDescriptor(XINCLUDE_AWARE_DESCRIPTOR);
    }

    @Override
    public ParserOptions getParserOptions() {
	return new XmlParserOptions(this);
    }
=====================================================================
Found a 12 line (54 tokens) duplication in the following files: 
Starting at line 274 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\RuleSetWriter.java
Starting at line 297 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\RuleSetWriter.java

				Object value = propertiesByPropertyDescriptor.get(propertyDescriptor);
				if (value != defaultValue && (value == null || !value.equals(defaultValue))) {
				    if (propertiesElement == null) {
				    	propertiesElement = createPropertiesElement();
				    }
				    
				    Element propertyElement = createPropertyValueElement(propertyDescriptor, value);
				    propertiesElement.appendChild(propertyElement);
					}
			    }
			}
		}
=====================================================================
Found a 7 line (54 tokens) duplication in the following files: 
Starting at line 392 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\DesignPatternDetection.java
Starting at line 446 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\DesignPatternDetection.java
Starting at line 643 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\DesignPatternDetection.java

						.getParentsOfType(ASTMethodDeclaration.class);
				if (methodDeclaration.size() != 0) {
					candidate.setMethodName(methodDeclaration.get(0)
							.getFirstChildOfType(ASTMethodDeclarator.class)
							.getImage());
					this.extraxtParameter(methodDeclaration.get(0), candidate);
				} else {
=====================================================================
Found a 13 line (54 tokens) duplication in the following files: 
Starting at line 84 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\AbstractNcssCountRule.java
Starting at line 96 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\AbstractNcssCountRule.java

            nodeCount = (Integer) ((JavaNode) node.jjtGetChild(i)).jjtAccept(this, data);
            lineCount += nodeCount.intValue();
        }
        return ++lineCount;
    }

    @Override
    public Object visit(ASTForStatement node, Object data) {
        return countNodeChildren(node, data);
    }

    @Override
    public Object visit(ASTDoStatement node, Object data) {
=====================================================================
Found a 17 line (53 tokens) duplication in the following files: 
Starting at line 11 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTArrayComprehensionLoop.java
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTForInLoop.java

	super(arrayComprehensionLoop);
    }

    /**
     * Accept the visitor.
     */
    public Object jjtAccept(EcmascriptParserVisitor visitor, Object data) {
	return visitor.visit(this, data);
    }

    public EcmascriptNode getIterator() {
	return (EcmascriptNode) jjtGetChild(0);
    }

    public EcmascriptNode getIteratedObject() {
	return (EcmascriptNode) jjtGetChild(1);
    }
=====================================================================
Found a 10 line (53 tokens) duplication in the following files: 
Starting at line 83 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\AbstractJavaHandler.java
Starting at line 68 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\PLSQLHandler.java

		new TypeResolutionFacade().initializeWith(classLoader, (ASTCompilationUnit) rootNode);
	    }
	};
    }

    @Override
    public VisitorStarter getDumpFacade(final Writer writer, final String prefix, final boolean recurse) {
	return new VisitorStarter() {
	    public void start(Node rootNode) {
		new DumpFacade().initializeWith(writer, prefix, recurse, (JavaNode) rootNode);
=====================================================================
Found a 15 line (53 tokens) duplication in the following files: 
Starting at line 46 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\UselessAssignment.java
Starting at line 45 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\controversial\DataflowAnomalyAnalysisRule.java

    private static class Usage {
        public int accessType;
        public DataFlowNode node;

        public Usage(int accessType, DataFlowNode node) {
            this.accessType = accessType;
            this.node = node;
        }

        public String toString() {
            return "accessType = " + accessType + ", line = " + node.getLine();
        }
    }

    public void execute(CurrentPath path) {
=====================================================================
Found a 19 line (53 tokens) duplication in the following files: 
Starting at line 66 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\AbstractNcssCountRule.java
Starting at line 76 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\AbstractNcssCountRule.java

            addDataPoint(point);
        }

        return Integer.valueOf(numNodes);
    }

    /**
     * Count the number of children of the given Java node. Adds one to count
     * the node itself.
     * 
     * @param node java node having children counted
     * @param data node data
     * @return count of the number of children of the node, plus one
     */
    protected Integer countNodeChildren(Node node, Object data) {
        Integer nodeCount = null;
        int lineCount = 0;
        for (int i = 0; i < node.jjtGetNumChildren(); i++) {
            nodeCount = (Integer) ((JavaNode) node.jjtGetChild(i)).jjtAccept(this, data);
=====================================================================
Found a 9 line (53 tokens) duplication in the following files: 
Starting at line 196 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\CyclomaticComplexityRule.java
Starting at line 232 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\CyclomaticComplexityRule.java
Starting at line 257 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\CyclomaticComplexityRule.java

	    if ( classEntry.getComplexityAverage() >= reportLevel
	        || classEntry.highestDecisionPoints >= reportLevel ) {
	      addViolation( data, node, new String[] {
	          "class",
	          node.getImage(),
	          classEntry.getComplexityAverage() + " (Highest = "
	              + classEntry.highestDecisionPoints + ')' } );
	    }
    }
=====================================================================
Found a 12 line (53 tokens) duplication in the following files: 
Starting at line 53 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\TooManyFieldsRule.java
Starting at line 76 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\TooManyFieldsRule.java

        }
        for (String k : stats.keySet()) {
            int val = stats.get(k);
            Node n = nodes.get(k);
            if (val > maxFields) {
                addViolation(data, n);
            }
        }
        return data;
    }

    private void bumpCounterFor(ASTClassOrInterfaceDeclaration clazz) {
=====================================================================
Found a 11 line (53 tokens) duplication in the following files: 
Starting at line 284 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\database\DBURI.java
Starting at line 328 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\database\DBURI.java

      String[] params = query.split("&");  
      for (String param : params)  
      {  
          String[] splits = param.split("=");  
          String name =splits[0];
          String value = null ;
          if (splits.length > 1 ) 
          {
            value = splits[1] ;
          }
          map.put(name, (null==value) ? value:  URLDecoder.decode(value,"UTF-8"));  
=====================================================================
Found a 15 line (52 tokens) duplication in the following files: 
Starting at line 220 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ast\xpath\DocumentNavigator.java
Starting at line 262 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ast\xpath\DocumentNavigator.java

		    Node sibling = getNextSibling(node);
		    if (sibling == null) {
			return getFirstNode(node.jjtGetParent());
		    } else {
			return sibling;
		    }
		}
	    }

	    @Override
	    protected Node getNextNode(Node node) {
		if (node == null) {
		    return null;
		} else {
		    Node n = getFirstChild(node);
=====================================================================
Found a 6 line (52 tokens) duplication in the following files: 
Starting at line 126 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\JavaNameOccurrence.java
Starting at line 111 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\PLSQLNameOccurrence.java

    }

    private boolean thirdChildHasDottedName(Node primaryExpression) {
        Node thirdChild = primaryExpression.jjtGetChild(0).jjtGetChild(0).jjtGetChild(0);
        return thirdChild instanceof ASTName && ((ASTName) thirdChild).getImage().indexOf('.') == -1;
    }
=====================================================================
Found a 11 line (52 tokens) duplication in the following files: 
Starting at line 120 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\ScopeAndDeclarationFinder.java
Starting at line 117 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\ScopeAndDeclarationFinder.java

	if (n != null) {
	    scope = new SourceFileScope(n.jjtGetChild(0).getImage());
	} else {
	    scope = new SourceFileScope();
	}
	scopes.push(scope);
	node.setScope(scope);
    }

    @Override
    public Object visit(ASTCompilationUnit node, Object data) {
=====================================================================
Found a 20 line (52 tokens) duplication in the following files: 
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTPackageBody.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTPackageSpecification.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTTypeSpecification.java

  public ASTPackageBody(PLSQLParser p, int id) {
    super(p, id);
  }


  /** Accept the visitor. **/
  public Object jjtAccept(PLSQLParserVisitor visitor, Object data) {
    return visitor.visit(this, data);
  }

  /**
   * Gets the name of the Oracle Object.
   * 
   * @return a String representing the name of the Oracle Object
   */
  @Override
  public String getObjectName() {
	return this.getImage();
  }
}
=====================================================================
Found a 8 line (51 tokens) duplication in the following files: 
Starting at line 47 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\Ecmascript3Handler.java
Starting at line 44 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\JspHandler.java
Starting at line 53 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\xml\XmlHandler.java

	return new Ecmascript3Parser(parserOptions);
    }

    @Override
    public VisitorStarter getDumpFacade(final Writer writer, final String prefix, final boolean recurse) {
	return new VisitorStarter() {
	    public void start(Node rootNode) {
		new DumpFacade().initializeWith(writer, prefix, recurse, (EcmascriptNode) rootNode);
=====================================================================
Found a 26 line (51 tokens) duplication in the following files: 
Starting at line 42 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\DumpFacade.java
Starting at line 44 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\xml\ast\DumpFacade.java

	private void dump(EcmascriptNode<?> node, String prefix) {
		//
		// Dump format is generally composed of the following items...
		//

		// 1) Dump prefix
		writer.print(prefix);

		// 2) JJT Name of the Node
		writer.print(node.toString());

		//
		// If there are any additional details, then:
		// 1) A colon
		// 2) The Node.getImage() if it is non-empty
		// 3) Extras in parentheses
		//

		// Standard image handling
		String image = node.getImage();

		// Special image handling (e.g. Nodes with normally null images)
		image = StringUtil.escapeWhitespace(image);

		// Extras
		List<String> extras = new ArrayList<String>();
=====================================================================
Found a 9 line (51 tokens) duplication in the following files: 
Starting at line 84 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\rule\AbstractEcmascriptRule.java
Starting at line 46 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\xml\rule\AbstractXmlRule.java

	return new EcmascriptParserOptions(this);
    }

    public void apply(List<? extends Node> nodes, RuleContext ctx) {
	visitAll(nodes, ctx);
    }

    protected void visitAll(List<? extends Node> nodes, RuleContext ctx) {
	for (Object element : nodes) {
=====================================================================
Found a 11 line (51 tokens) duplication in the following files: 
Starting at line 278 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 601 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java

        LOGGER.finest("pushOnStack THROW_STATEMENT: line " + node.getBeginLine() +", column " + node.getBeginColumn());
        return super.visit(node, data);
    }

    /*
     * The method handles the special "for" loop. It creates always an
     * expression node even if the loop looks like for(;;).
     * */
    private void addForExpressionNode(Node node, Structure dataFlow) {
        ASTForStatement parent = (ASTForStatement) node.jjtGetParent();
        boolean hasExpressionChild = false;
=====================================================================
Found a 13 line (51 tokens) duplication in the following files: 
Starting at line 18 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\junit\JUnitTestsShouldIncludeAssertRule.java
Starting at line 23 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\sunsecure\MethodReturnsInternalArrayRule.java

public class JUnitTestsShouldIncludeAssertRule extends AbstractJUnitRule {

    @Override
    public Object visit(ASTClassOrInterfaceDeclaration node, Object data) {
        if (node.isInterface()) {
            return data;
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTMethodDeclaration method, Object data) {
        if (isJUnitMethod(method, data))  {
=====================================================================
Found a 10 line (51 tokens) duplication in the following files: 
Starting at line 54 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\ClassScope.java
Starting at line 24 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\MethodScope.java

    }

    public Map<VariableNameDeclaration, List<NameOccurrence>> getVariableDeclarations() {
        return getDeclarations(VariableNameDeclaration.class);
    }

    public NameDeclaration addNameOccurrence(NameOccurrence occurrence) {
        JavaNameOccurrence javaOccurrence = (JavaNameOccurrence)occurrence;
        NameDeclaration decl = findVariableHere(javaOccurrence);
        if (decl != null && javaOccurrence.isMethodOrConstructorInvocation()) {
=====================================================================
Found a 8 line (51 tokens) duplication in the following files: 
Starting at line 172 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NPathComplexityRule.java
Starting at line 256 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NPathComplexityRule.java

	int boolCompIf = sumExpressionComplexity(node.getFirstChildOfType(ASTExpression.class));

	int complexity = 0;

	List<PLSQLNode> statementChildren = new ArrayList<PLSQLNode>();
	for (int i = 0; i < node.jjtGetNumChildren(); i++) {
	    if (
                node.jjtGetChild(i).getClass() == ASTStatement.class
=====================================================================
Found a 10 line (51 tokens) duplication in the following files: 
Starting at line 126 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\database\DBMSMetadata.java
Starting at line 162 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\database\DBMSMetadata.java
Starting at line 207 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\database\DBMSMetadata.java

    this.returnType =  dbURI.getSourceCodeType();

    LOGGER.fine("returnSourceCodeStatement="+returnSourceCodeStatement +", returnType="+returnType);
    
    String driverClass = dbURI.getDriverClass();
    String urlString = dbURI.getURL().toString();
    
    LOGGER.fine("driverClass="+driverClass+", urlString="+urlString);

    Class.forName(driverClass);
=====================================================================
Found a 22 line (50 tokens) duplication in the following files: 
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTBlock.java
Starting at line 22 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTConstructorDeclaration.java

        super(p, id);
    }


    /**
     * Accept the visitor. *
     */
    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }

    private boolean containsComment;

    public boolean containsComment() {
        return this.containsComment;
    }

    public void setContainsComment() {
        this.containsComment = true;
    }

}
=====================================================================
Found a 8 line (50 tokens) duplication in the following files: 
Starting at line 237 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 554 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java

    public Object visit(ASTBreakStatement node, Object data) {
        if (!(data instanceof Structure)) {
            return data;
        }
        Structure dataFlow = (Structure) data;
        dataFlow.createNewNode(node);
        dataFlow.pushOnStack(NodeType.BREAK_STATEMENT, dataFlow.getLast());
        LOGGER.finest("pushOnStack BREAK_STATEMENT: line " + node.getBeginLine() +", column " + node.getBeginColumn());
=====================================================================
Found a 8 line (50 tokens) duplication in the following files: 
Starting at line 249 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 536 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 572 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java

    public Object visit(ASTContinueStatement node, Object data) {
        if (!(data instanceof Structure)) {
            return data;
        }
        Structure dataFlow = (Structure) data;
        dataFlow.createNewNode(node);
        dataFlow.pushOnStack(NodeType.CONTINUE_STATEMENT, dataFlow.getLast());
        LOGGER.finest("pushOnStack CONTINUE_STATEMENT: line " + node.getBeginLine() +", column " + node.getBeginColumn());
=====================================================================
Found a 8 line (50 tokens) duplication in the following files: 
Starting at line 271 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 594 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java

    public Object visit(ASTThrowStatement node, Object data) {
        if (!(data instanceof Structure)) {
            return data;
        }
        Structure dataFlow = (Structure) data;
        dataFlow.createNewNode(node);
        dataFlow.pushOnStack(NodeType.THROW_STATEMENT, dataFlow.getLast());
        LOGGER.finest("pushOnStack THROW_STATEMENT: line " + node.getBeginLine() +", column " + node.getBeginColumn());
=====================================================================
Found a 7 line (50 tokens) duplication in the following files: 
Starting at line 195 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\CyclomaticComplexityRule.java
Starting at line 245 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\CyclomaticComplexityRule.java

    	Entry classEntry = entryStack.pop();
	    if ( classEntry.getComplexityAverage() >= reportLevel
	        || classEntry.highestDecisionPoints >= reportLevel ) {
	      addViolation( data, node, new String[] {
	          "class",
	          node.getImage(),
	          classEntry.getComplexityAverage() + " (Highest = "
=====================================================================
Found a 8 line (50 tokens) duplication in the following files: 
Starting at line 258 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\NPathComplexityRule.java
Starting at line 27 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\NcssMethodCountRule.java

    }

    @Override
    public Object[] getViolationParameters(DataPoint point) {
        return new String[] { ((ASTMethodDeclaration) point.getNode()).getMethodName(),
                String.valueOf((int) point.getScore()) };
    }
}
=====================================================================
Found a 7 line (50 tokens) duplication in the following files: 
Starting at line 56 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\javabeans\BeanMembersShouldSerializeRule.java
Starting at line 27 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\unusedcode\UnusedPrivateMethodRule.java

    public Object visit(ASTClassOrInterfaceDeclaration node, Object data) {
	if (node.isInterface()) {
	    return data;
	}

	Map<MethodNameDeclaration, List<NameOccurrence>> methods = node.getScope().getEnclosingScope(ClassScope.class)
		.getMethodDeclarations();
=====================================================================
Found a 8 line (50 tokens) duplication in the following files: 
Starting at line 56 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\ClassScope.java
Starting at line 20 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\LocalScope.java

    public Map<VariableNameDeclaration, List<NameOccurrence>> getVariableDeclarations() {
        return getDeclarations(VariableNameDeclaration.class);
    }

    public NameDeclaration addNameOccurrence(NameOccurrence occurrence) {
        JavaNameOccurrence javaOccurrence = (JavaNameOccurrence)occurrence;
        NameDeclaration decl = findVariableHere(javaOccurrence);
        if (decl != null && javaOccurrence.isMethodOrConstructorInvocation()) {
=====================================================================
Found a 8 line (50 tokens) duplication in the following files: 
Starting at line 18 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\Search.java
Starting at line 20 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\Search.java

            System.out.println("new search for " + (occ.isMethodOrConstructorInvocation() ? "method" : "variable") + " " + occ);
        }
        this.occ = occ;
    }

    public void execute() {
        decl = searchUpward(occ, occ.getLocation().getScope());
        if (TRACE) {
=====================================================================
Found a 7 line (50 tokens) duplication in the following files: 
Starting at line 73 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\DataFlowFacade.java
Starting at line 88 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\DataFlowFacade.java
Starting at line 102 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\DataFlowFacade.java
Starting at line 116 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\DataFlowFacade.java

                        + node.getClass().getCanonicalName() + " @ line " 
                        + node.getBeginLine() 
                        +", column " + node.getBeginColumn()
                        + " --- " + new Throwable().getStackTrace()
                      );
          sbf.buildDataFlowFor(node);
          vav.compute(node);
=====================================================================
Found a 8 line (50 tokens) duplication in the following files: 
Starting at line 428 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NPathComplexityRule.java
Starting at line 27 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NcssMethodCountRule.java

    }

    @Override
    public Object[] getViolationParameters(DataPoint point) {
	return new String[] { ((ExecutableCode) point.getNode()).getMethodName(),
		String.valueOf((int) point.getScore()) };
    }
}
=====================================================================
Found a 12 line (50 tokens) duplication in the following files: 
Starting at line 61 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\ClassScope.java
Starting at line 74 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\ClassScope.java

            List<NameOccurrence> nameOccurrences = methodNames.get(decl);
            if (nameOccurrences == null) {
                // TODO may be a class name: Foo.this.super();
            } else {
                nameOccurrences.add(occurrence);
                Node n = occurrence.getLocation();
                if (n instanceof ASTName) {
                    ((ASTName) n).setNameDeclaration(decl);
                } // TODO what to do with PrimarySuffix case?
            }

        } else if (decl != null && !occurrence.isThisOrSuper()) {
=====================================================================
Found a 10 line (50 tokens) duplication in the following files: 
Starting at line 134 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\ScopeAndDeclarationFinder.java
Starting at line 143 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\ScopeAndDeclarationFinder.java
Starting at line 153 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\ScopeAndDeclarationFinder.java
Starting at line 162 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\ScopeAndDeclarationFinder.java

    public Object visit(ASTPackageSpecification node, Object data) {
	createClassScope(node);
	Scope s = ((PLSQLNode)node.jjtGetParent()).getScope();
	s.addDeclaration(new ClassNameDeclaration(node));
	cont(node);
	return data;
    }

    @Override
    public Object visit(ASTPackageBody node, Object data) {
=====================================================================
Found a 8 line (49 tokens) duplication in the following files: 
Starting at line 50 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\CsTokenizer.java
Starting at line 99 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\CsTokenizer.java

				case '>':
					ic = reader.read();
					if(ic == '=')
					{
						tokenEntries.add(new TokenEntry(String.valueOf(c)+"=", sourceCode.getFileName(), line));
						ic = reader.read();
					}
					else if(ic == c)
=====================================================================
Found a 9 line (49 tokens) duplication in the following files: 
Starting at line 84 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\rule\AbstractEcmascriptRule.java
Starting at line 20 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 46 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\xml\rule\AbstractXmlRule.java

	return new EcmascriptParserOptions(this);
    }

    public void apply(List<? extends Node> nodes, RuleContext ctx) {
	visitAll(nodes, ctx);
    }

    protected void visitAll(List<? extends Node> nodes, RuleContext ctx) {
	for (Object element : nodes) {
=====================================================================
Found a 7 line (49 tokens) duplication in the following files: 
Starting at line 215 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 404 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java

        super.visit(node, data);
        dataFlow.pushOnStack(NodeType.SWITCH_END, dataFlow.getLast());
        LOGGER.finest("pushOnStack SWITCH_END: line " + node.getBeginLine() +", column " + node.getBeginColumn());
        return data;
    }

    public Object visit(ASTSwitchLabel node, Object data) {
=====================================================================
Found a 12 line (49 tokens) duplication in the following files: 
Starting at line 221 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\CyclomaticComplexityRule.java
Starting at line 305 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\CyclomaticComplexityRule.java
Starting at line 354 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\CyclomaticComplexityRule.java

	    }

	    ASTMethodDeclarator methodDeclarator = null;
	    for ( int n = 0; n < node.jjtGetNumChildren(); n++ ) {
	      Node childNode = node.jjtGetChild( n );
	      if ( childNode instanceof ASTMethodDeclarator ) {
	        methodDeclarator = (ASTMethodDeclarator) childNode;
	        break;
	      }
	    }

	    if ( showMethodsComplexity && methodEntry.decisionPoints >= reportLevel ) {
=====================================================================
Found a 10 line (49 tokens) duplication in the following files: 
Starting at line 53 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\TooManyFieldsRule.java
Starting at line 56 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\TooManyFieldsRule.java

        }
        for (String k : stats.keySet()) {
            int val = stats.get(k);
            Node n = nodes.get(k);
            if (val > maxFields) {
                addViolation(data, n);
            }
        }
        return data;
    }
=====================================================================
Found a 8 line (49 tokens) duplication in the following files: 
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\Applier.java
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\Applier.java

public class Applier {

    public static <E> void apply(UnaryFunction<E> f, Iterator<? extends E> i) {
        while (i.hasNext()) {
            f.applyTo(i.next());
        }
    }
}
=====================================================================
Found a 9 line (48 tokens) duplication in the following files: 
Starting at line 251 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dfa\pathfinder\DAAPathFinder.java
Starting at line 270 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dfa\pathfinder\DAAPathFinder.java

        }

        int childCount = level.getChildCount();
        DefaultMutableTreeNode child;

        for (int i = 0; i < childCount; i++) {
            child = (DefaultMutableTreeNode) level.getChildAt(i);
            PathElement pe = (PathElement) child.getUserObject();
            if (pe != null && pe.isPseudoPathElement() && pe.pseudoRef.equals(inode)) {
=====================================================================
Found a 7 line (48 tokens) duplication in the following files: 
Starting at line 48 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\Ecmascript3Handler.java
Starting at line 86 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\AbstractJavaHandler.java
Starting at line 45 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\JspHandler.java
Starting at line 71 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\PLSQLHandler.java
Starting at line 54 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\xml\XmlHandler.java

    }

    @Override
    public VisitorStarter getDumpFacade(final Writer writer, final String prefix, final boolean recurse) {
	return new VisitorStarter() {
	    public void start(Node rootNode) {
		new DumpFacade().initializeWith(writer, prefix, recurse, (EcmascriptNode) rootNode);
=====================================================================
Found a 8 line (48 tokens) duplication in the following files: 
Starting at line 85 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\rule\AbstractEcmascriptRule.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 47 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\rule\AbstractJspRule.java
Starting at line 47 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\xml\rule\AbstractXmlRule.java

    }

    public void apply(List<? extends Node> nodes, RuleContext ctx) {
	visitAll(nodes, ctx);
    }

    protected void visitAll(List<? extends Node> nodes, RuleContext ctx) {
	for (Object element : nodes) {
=====================================================================
Found a 16 line (48 tokens) duplication in the following files: 
Starting at line 24 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTMethodDeclaration.java
Starting at line 22 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTTypeMethod.java

    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }

    /**
     * Gets the name of the method.
     *
     * @return a String representing the name of the method
     */
    public String getMethodName() {
        ASTMethodDeclarator md = getFirstChildOfType(ASTMethodDeclarator.class);
        if (md != null) {
	    return md.getImage();
	}
        return null;
    }
=====================================================================
Found a 9 line (48 tokens) duplication in the following files: 
Starting at line 45 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\AbstractNcssCountRule.java
Starting at line 28 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\ExcessiveNodeCountRule.java

    protected AbstractNcssCountRule(Class<?> nodeClass) {
        this.nodeClass = nodeClass;
    }

    @Override
    public Object visit(JavaNode node, Object data) {
        int numNodes = 0;

        for (int i = 0; i < node.jjtGetNumChildren(); i++) {
=====================================================================
Found a 14 line (48 tokens) duplication in the following files: 
Starting at line 88 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\MethodNameDeclaration.java
Starting at line 108 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\MethodNameDeclaration.java

            Node myTypeNode = myParam.getTypeNode().jjtGetChild(0);
            Node otherTypeNode = otherParam.getTypeNode().jjtGetChild(0);

            // compare primitive vs reference type
            if (myTypeNode.getClass() != otherTypeNode.getClass()) {
                return false;
            }

            // simple comparison of type images
            // this can be fooled by one method using "String"
            // and the other method using "java.lang.String"
            // once we get real types in here that should get fixed
            String myTypeImg;
            String otherTypeImg;
=====================================================================
Found a 10 line (48 tokens) duplication in the following files: 
Starting at line 44 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\ClassScope.java
Starting at line 33 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\LocalScope.java

        anonymousInnerClassCounter.set(v + 1);
    }

    @Override
    public void addDeclaration(NameDeclaration declaration) {
        if (declaration instanceof VariableNameDeclaration && getDeclarations().keySet().contains(declaration)) {
            throw new RuntimeException(declaration + " is already in the symbol table");
        }
        super.addDeclaration(declaration);
    }
=====================================================================
Found a 17 line (47 tokens) duplication in the following files: 
Starting at line 350 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\RuleSet.java
Starting at line 32 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\AbstractRenderer.java

	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}
=====================================================================
Found a 9 line (47 tokens) duplication in the following files: 
Starting at line 9 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\EcmascriptTokenizer.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\RubyTokenizer.java

    public EcmascriptTokenizer() {
        // setting markers for "string" in javascript
        this.stringToken = new ArrayList<String>();
        this.stringToken.add( "\'" );
        this.stringToken.add( "\"" );
        
        // setting markers for 'ignorable character' in javascript
        this.ignorableCharacter = new ArrayList<String>();
        this.ignorableCharacter.add( ";" );
=====================================================================
Found a 5 line (47 tokens) duplication in the following files: 
Starting at line 177 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 306 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java

        } else if (node.jjtGetParent() instanceof ASTDoStatement) {
            dataFlow.pushOnStack(NodeType.DO_BEFORE_FIRST_STATEMENT, dataFlow.getLast());
            dataFlow.createNewNode(node.jjtGetParent());
            LOGGER.finest("pushOnStack DO_BEFORE_FIRST_STATEMENT: line " + node.getBeginLine() +", column " + node.getBeginColumn());
        }
=====================================================================
Found a 7 line (47 tokens) duplication in the following files: 
Starting at line 165 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\AccessorClassGenerationRule.java
Starting at line 199 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\AccessorClassGenerationRule.java

                ClassData formerClassData = classDataList.get(formerID);
                newClassData.addClassQualifyingName(formerClassData.getClassName());
                classDataList.add(getClassID(), newClassData);
                Object o = super.visit(node, data);
                setClassID(formerID);
                return o;
            } else {
=====================================================================
Found a 5 line (47 tokens) duplication in the following files: 
Starting at line 19 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\AvoidReassigningParametersRule.java
Starting at line 44 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\AvoidReassigningParametersRule.java

    public Object visit(ASTMethodDeclarator node, Object data) {
        Map<VariableNameDeclaration, List<NameOccurrence>> params = node.getScope().getDeclarations(VariableNameDeclaration.class);
        this.lookForViolation(params, data);
        return super.visit(node, data);
    }
=====================================================================
Found a 6 line (47 tokens) duplication in the following files: 
Starting at line 297 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\ConstructorCallsOverridableMethodRule.java
Starting at line 326 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\ConstructorCallsOverridableMethodRule.java

                                if (thisIndex == 1) {//qualifiers in node 0
                                    ASTPrimaryPrefix child = (ASTPrimaryPrefix) node.jjtGetChild(0);
                                    String toParse = getNameFromPrefix(child);
                                    //									System.out.println("parsing for class/package names in : " + toParse);
                                    java.util.StringTokenizer st = new java.util.StringTokenizer(toParse, ".");
                                    while (st.hasMoreTokens()) {
=====================================================================
Found a 4 line (47 tokens) duplication in the following files: 
Starting at line 78 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\MethodNameDeclaration.java
Starting at line 98 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\MethodNameDeclaration.java

        ASTFormalParameters otherParams = (ASTFormalParameters) other.node.jjtGetChild(0);
        for (int i = 0; i < ((ASTMethodDeclarator) node).getParameterCount(); i++) {
            ASTFormalParameter myParam = (ASTFormalParameter) myParams.jjtGetChild(i);
            ASTFormalParameter otherParam = (ASTFormalParameter) otherParams.jjtGetChild(i);
=====================================================================
Found a 5 line (47 tokens) duplication in the following files: 
Starting at line 53 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\NameFinder.java
Starting at line 57 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\NameFinder.java

                JavaNameOccurrence occurrence = names.get(names.size() - 1);
                occurrence.setIsMethodOrConstructorInvocation();
                ASTArguments args = (ASTArguments) ((ASTPrimarySuffix) node).jjtGetChild(0);
                occurrence.setArgumentCount(args.getArgumentCount());
            } else if (suffix.jjtGetNumChildren() == 1 && suffix.jjtGetChild(0) instanceof ASTMemberSelector) {
=====================================================================
Found a 18 line (47 tokens) duplication in the following files: 
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTMethodDeclaration.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTProgramUnit.java

  public ASTMethodDeclaration(PLSQLParser p, int id) {
    super(p, id);
  }


  /** Accept the visitor. **/
  public Object jjtAccept(PLSQLParserVisitor visitor, Object data) {
    return visitor.visit(this, data);
  }

  /**
   * Gets the name of the method.
   *
   * @return a String representing the name of the method
   */
  @Override
  public String getMethodName() {
    ASTMethodDeclarator md = getFirstDescendantOfType(ASTMethodDeclarator.class);
=====================================================================
Found a 11 line (47 tokens) duplication in the following files: 
Starting at line 519 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 685 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java

	public Object visit(ASTPragma node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTInlinePragma node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTExceptionDeclaration node, Object data) {
=====================================================================
Found a 9 line (47 tokens) duplication in the following files: 
Starting at line 45 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\ClassScope.java
Starting at line 44 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\MethodScope.java

    }

    @Override
    public void addDeclaration(NameDeclaration declaration) {
        if (declaration instanceof VariableNameDeclaration && getDeclarations().keySet().contains(declaration)) {
            throw new RuntimeException(declaration + " is already in the symbol table");
        }
        super.addDeclaration(declaration);
    }
=====================================================================
Found a 5 line (47 tokens) duplication in the following files: 
Starting at line 33 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\xpath\Initializer.java
Starting at line 55 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\xpath\Initializer.java

		for (Language language : Language.values()) {
		    for (LanguageVersion languageVersion : language.getVersions()) {
			LanguageVersionHandler languageVersionHandler = languageVersion.getLanguageVersionHandler();
			if (languageVersionHandler != null) {
			    languageVersionHandler.getXPathHandler().initialize(context);
=====================================================================
Found a 14 line (47 tokens) duplication in the following files: 
Starting at line 197 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\database\DBURI.java
Starting at line 541 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\database\DBURI.java

        languages = parameters.get("languages");

        //Populate the lists 
        if (null!=sourceCodeNames)
        {
          sourceCodeNamesList = Arrays.asList(sourceCodeNames.split(","));
        }

        if (null!=languages)
        {
          languagesList = Arrays.asList(languages.split(","));
        }

        if (null!=parameters.get("schemas"))
=====================================================================
Found a 11 line (46 tokens) duplication in the following files: 
Starting at line 85 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\CsTokenizer.java
Starting at line 103 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\CsTokenizer.java

						tokenEntries.add(new TokenEntry(String.valueOf(c)+String.valueOf((char)ic), sourceCode.getFileName(), line));
						ic = reader.read();
					}
					else
					{
						tokenEntries.add(new TokenEntry(String.valueOf(c), sourceCode.getFileName(), line));
					}
					break;
				
					// ! != * *= % %= ^ ^= ~ ~=
				case '!':
=====================================================================
Found a 12 line (46 tokens) duplication in the following files: 
Starting at line 8 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\Parameter.java
Starting at line 77 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\database\SourceObject.java

	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getType() {
		return type;
	}
	public void setType(String type) {
		this.type = type;
	}
=====================================================================
Found a 9 line (46 tokens) duplication in the following files: 
Starting at line 99 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\CommentUtil.java
Starting at line 137 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\comments\AbstractCommentRule.java

			if (line.charAt(0) == '*') {
				filteredLines.add(line.substring(1));
				continue;
			}

			if (line.startsWith("/**")) {
				filteredLines.add(line.substring(3));
				continue;
			}
=====================================================================
Found a 10 line (46 tokens) duplication in the following files: 
Starting at line 18 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 23 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java

	super.setLanguage(Language.JAVA);
	// Enable Type Resolution on Java Rules by default
	super.setUsesTypeResolution();
    }

    public void apply(List<? extends Node> nodes, RuleContext ctx) {
	visitAll(nodes, ctx);
    }

    protected void visitAll(List<? extends Node> nodes, RuleContext ctx) {
=====================================================================
Found a 8 line (46 tokens) duplication in the following files: 
Starting at line 41 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\NPathComplexityRule.java
Starting at line 54 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\NPathComplexityRule.java

    private int complexityMultipleOf(JavaNode node, int npathStart, Object data) {

        int npath = npathStart;
        JavaNode n;

        for (int i = 0; i < node.jjtGetNumChildren(); i++) {
            n = (JavaNode) node.jjtGetChild(i);
            npath *= (Integer) n.jjtAccept(this, data);
=====================================================================
Found a 9 line (46 tokens) duplication in the following files: 
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\naming\AvoidDollarSignsRule.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\naming\AvoidDollarSignsRule.java

    public Object visit(ASTClassOrInterfaceDeclaration node, Object data) {
        if (node.getImage().indexOf('$') != -1) {
            addViolation(data, node);
            return data;
        }
        return super.visit(node, data);
    }

    public Object visit(ASTVariableDeclaratorId node, Object data) {
=====================================================================
Found a 3 line (46 tokens) duplication in the following files: 
Starting at line 24 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\MethodNameDeclaration.java
Starting at line 40 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\MethodNameDeclaration.java
Starting at line 42 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\MethodNameDeclaration.java
Starting at line 58 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\MethodNameDeclaration.java

        ASTFormalParameters params = (ASTFormalParameters) node.jjtGetChild(0);
        for (int i = 0; i < ((ASTMethodDeclarator) node).getParameterCount(); i++) {
            ASTFormalParameter p = (ASTFormalParameter) params.jjtGetChild(i);
=====================================================================
Found a 6 line (46 tokens) duplication in the following files: 
Starting at line 577 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\ClassTypeResolver.java
Starting at line 590 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\ClassTypeResolver.java

	private void rollupTypeUnary(TypeNode typeNode) {
		if (typeNode instanceof Node) {
			Node node = (Node)typeNode;
			if (node.jjtGetNumChildren() >= 1) {
				Node child = node.jjtGetChild(0);
				if (child instanceof TypeNode) {
=====================================================================
Found a 7 line (46 tokens) duplication in the following files: 
Starting at line 39 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\DataFlowFacade.java
Starting at line 63 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\DataFlowFacade.java

                      + node.getClass().getCanonicalName() + " @ line " 
                      + node.getBeginLine() 
                      +", column " + node.getBeginColumn()
                      + " --- " + new Throwable().getStackTrace()
                );

        super.visit(node, data) ;
=====================================================================
Found a 12 line (45 tokens) duplication in the following files: 
Starting at line 344 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\CandidateDAO.java
Starting at line 416 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\CandidateDAO.java

					+ relatedClass + "," + entryType + "," + 1 + "," + candidate.getStartLine() +  ");";
			stmt.executeUpdate(sql);
			stmt.close();
			connection.commit();
			// System.out.println("Attributes Records created successfully");
		} catch (SQLException e) {

			log.error( "failed!", e );;
		}
	}

	public void addMethodInvocation(Candidate candidate) {
=====================================================================
Found a 13 line (45 tokens) duplication in the following files: 
Starting at line 108 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\EcmascriptParserOptions.java
Starting at line 169 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\xml\XmlParserOptions.java

	result = prime * result + ((rhinoLanguageVersion == null) ? 0 : rhinoLanguageVersion.hashCode());
	return result;
    }

    @Override
    public boolean equals(Object obj) {
	if (this == obj) {
	    return true;
	}
	if (obj == null || getClass() != obj.getClass()) {
	    return false;
	}
	final EcmascriptParserOptions that = (EcmascriptParserOptions) obj;
=====================================================================
Found a 5 line (45 tokens) duplication in the following files: 
Starting at line 173 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 298 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java

        if (node.jjtGetParent() instanceof ASTForStatement) {
            this.addForExpressionNode(node, dataFlow);
            dataFlow.pushOnStack(NodeType.FOR_BEFORE_FIRST_STATEMENT, dataFlow.getLast());
            LOGGER.finest("pushOnStack FOR_BEFORE_FIRST_STATEMENT: line " + node.getBeginLine() +", column " + node.getBeginColumn());
        } else if (node.jjtGetParent() instanceof ASTDoStatement) {
=====================================================================
Found a 5 line (45 tokens) duplication in the following files: 
Starting at line 30 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\ExcessiveLengthRule.java
Starting at line 43 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\design\ExcessiveLengthRule.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\rule\basic\ExcessiveTemplateLengthRule.java

	    DataPoint point = new DataPoint();
	    point.setNode(node);
	    point.setScore(1.0 * (node.getEndLine() - node.getBeginLine()));
	    point.setMessage(getMessage());
	    addDataPoint(point);
=====================================================================
Found a 8 line (45 tokens) duplication in the following files: 
Starting at line 23 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\ClassScope.java
Starting at line 22 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\ClassScope.java

    private static ThreadLocal<Integer> anonymousInnerClassCounter = new ThreadLocal<Integer>() {
        protected Integer initialValue() { return Integer.valueOf(1); }
    };

    private String className;

    public ClassScope(String className) {
        this.className = className;
=====================================================================
Found a 16 line (45 tokens) duplication in the following files: 
Starting at line 31 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\ClassScope.java
Starting at line 30 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\ClassScope.java

        anonymousInnerClassCounter.set(Integer.valueOf(1));
    }

    /**
     * This is only for anonymous inner classes
     * <p/>
     * FIXME - should have name like Foo$1, not Anonymous$1
     * to get this working right, the parent scope needs
     * to be passed in when instantiating a ClassScope
     */
    public ClassScope() {
        //this.className = getParent().getEnclosingClassScope().getClassName() + "$" + String.valueOf(anonymousInnerClassCounter);
        int v = anonymousInnerClassCounter.get().intValue();
        this.className = "Anonymous$" + v;
        anonymousInnerClassCounter.set(v + 1);
    }
=====================================================================
Found a 24 line (45 tokens) duplication in the following files: 
Starting at line 27 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\SourceFileScope.java
Starting at line 23 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\SourceFileScope.java

    }

    public String getPackageName() {
        return packageImage;
    }

    /**
     * {@inheritDoc}
     * @throws IllegalArgumentException if declaration is not a {@link ClassNameDeclaration}
     */
    @Override
    public void addDeclaration(NameDeclaration declaration) {
        if (!(declaration instanceof ClassNameDeclaration)) {
            throw new IllegalArgumentException("A SourceFileScope can only contain classes.");
        }
        super.addDeclaration(declaration);
    }

    /**
     * Convenience method that casts the declarations to {@link ClassNameDeclaration}s.
     * @see #getDeclarations()
     * @return all class name declarations
     */
    public Map<ClassNameDeclaration, List<NameOccurrence>> getClassDeclarations() {
=====================================================================
Found a 12 line (45 tokens) duplication in the following files: 
Starting at line 32 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTProgramUnit.java
Starting at line 31 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTTypeMethod.java

  public String getMethodName() {
      ASTMethodDeclarator md = getFirstChildOfType(ASTMethodDeclarator.class);
      if (md != null) {
    return md.getImage();
	}
    return null;
   }

  @Override
  public String getName() {
      return getMethodName();
  }
=====================================================================
Found a 19 line (45 tokens) duplication in the following files: 
Starting at line 103 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\properties\TypeMultiProperty.java
Starting at line 94 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\properties\TypeProperty.java

        return Class[].class;
    }

    /**
     * @return String
     */
    @Override
    protected String itemTypeName() {
        return "type";
    }

    /**
     * @param value Object
     * @return String
     */
    @Override
    protected String asString(Object value) {
        return value == null ? "" : ((Class<?>) value).getName();
    }
=====================================================================
Found a 8 line (44 tokens) duplication in the following files: 
Starting at line 31 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cli\PMDCommandLineInterface.java
Starting at line 46 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\CPDCommandLineInterface.java

	    JCommander jcommander = new JCommander(arguments);
		jcommander.setProgramName(progName);

		try {
			jcommander.parse(args);
			if (arguments.isHelp()) {
				jcommander.usage();
				System.out.println(buildUsageText(jcommander));
=====================================================================
Found a 12 line (44 tokens) duplication in the following files: 
Starting at line 92 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTFieldDeclaration.java
Starting at line 45 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTFormalParameter.java

    }

    public boolean isArray() {
        return checkType() + checkDecl() > 0;
    }

    public int getArrayDepth() {
        if (!isArray()) {
            return 0;
        }
        return checkType() + checkDecl();
    }
=====================================================================
Found a 6 line (44 tokens) duplication in the following files: 
Starting at line 307 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 313 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java

                if (!hasForInitNode) {
                    dataFlow.createNewNode(node);
                    dataFlow.pushOnStack(NodeType.FOR_EXPR, dataFlow.getLast());
                    LOGGER.finest("pushOnStack FOR_EXPR: line " + node.getBeginLine() +", column " + node.getBeginColumn());
                }
            } else if (node instanceof ASTStatement) {
=====================================================================
Found a 6 line (44 tokens) duplication in the following files: 
Starting at line 232 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\CyclomaticComplexityRule.java
Starting at line 316 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\CyclomaticComplexityRule.java
Starting at line 365 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\CyclomaticComplexityRule.java
Starting at line 405 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\CyclomaticComplexityRule.java

	    if ( showMethodsComplexity && methodEntry.decisionPoints >= reportLevel ) {
	        addViolation( data, node, new String[] { "method",
	            methodDeclarator == null ? "" : methodDeclarator.getImage(),
	            String.valueOf( methodEntry.decisionPoints ) } );
	      }
    }
=====================================================================
Found a 7 line (44 tokens) duplication in the following files: 
Starting at line 69 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\NPathComplexityRule.java
Starting at line 82 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NPathComplexityRule.java
Starting at line 98 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NPathComplexityRule.java
Starting at line 114 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NPathComplexityRule.java
Starting at line 130 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NPathComplexityRule.java
Starting at line 146 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NPathComplexityRule.java

        int npath = complexityMultipleOf(node, 1, data);

        DataPoint point = new DataPoint();
        point.setNode(node);
        point.setScore(1.0 * npath);
        point.setMessage(getMessage());
        addDataPoint(point);
=====================================================================
Found a 7 line (44 tokens) duplication in the following files: 
Starting at line 91 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\comments\CommentRequiredRule.java
Starting at line 131 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\comments\CommentRequiredRule.java
Starting at line 149 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\comments\CommentRequiredRule.java
Starting at line 174 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\comments\CommentRequiredRule.java
Starting at line 201 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\comments\CommentRequiredRule.java

							HEADER_CMT_REQUIREMENT_DESCRIPTOR.name() + " "
									+ CommentRequirement.Required,
							decl.getBeginLine(), decl.getEndLine());
				}
			} else {
				if (decl.comment() != null) {
					addViolationWithMessage(data, decl,
=====================================================================
Found a 12 line (44 tokens) duplication in the following files: 
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\controversial\OnlyOneReturnRule.java
Starting at line 18 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\naming\AvoidFieldNameMatchingMethodNameRule.java

public class OnlyOneReturnRule extends AbstractJavaRule {

    @Override
    public Object visit(ASTClassOrInterfaceDeclaration node, Object data) {
        if (node.isInterface()) {
            return data;
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTMethodDeclaration node, Object data) {
=====================================================================
Found a 7 line (44 tokens) duplication in the following files: 
Starting at line 64 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\imports\UnnecessaryFullyQualifiedNameRule.java
Starting at line 77 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\imports\UnnecessaryFullyQualifiedNameRule.java

		if (name.startsWith(importDeclaration.getImportedName())) {
		    if (name.lastIndexOf('.') == importDeclaration.getImportedName().length()) {
			matches.add(importDeclaration);
			continue;
		    }
		}
	    } else {
=====================================================================
Found a 12 line (44 tokens) duplication in the following files: 
Starting at line 33 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\sunsecure\ArrayIsStoredDirectlyRule.java
Starting at line 23 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\sunsecure\MethodReturnsInternalArrayRule.java

public class ArrayIsStoredDirectlyRule extends AbstractSunSecureRule {

    @Override
    public Object visit(ASTClassOrInterfaceDeclaration node, Object data) {
        if (node.isInterface()) {
            return data;
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTConstructorDeclaration node, Object data) {
=====================================================================
Found a 13 line (44 tokens) duplication in the following files: 
Starting at line 22 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\OccurrenceFinder.java
Starting at line 25 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\OccurrenceFinder.java

        for (JavaNameOccurrence occ: names) {
            Search search = new Search(occ);
            if (decl == null) {
                // doing the first name lookup
                search.execute();
                decl = search.getResult();
                if (decl == null) {
                    // we can't find it, so just give up
                    // when we decide to do full symbol resolution
                    // force this to either find a symbol or throw a SymbolNotFoundException
                    break;
                }
            } else {
=====================================================================
Found a 17 line (44 tokens) duplication in the following files: 
Starting at line 83 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\PLSQLHandler.java
Starting at line 28 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\xml\XmlHandler.java

    @Override
    /**
     * Return minimal XPathHandler to cope with Jaxen XPath Rules.
     */
    public XPathHandler getXPathHandler() {
	return new XPathHandler() {
	    public void initialize() {
	    }

	    public void initialize(IndependentContext context) {
	    }

	    public Navigator getNavigator() {
		return new DocumentNavigator();
	    }
	};
    }
=====================================================================
Found a 9 line (44 tokens) duplication in the following files: 
Starting at line 149 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\HTMLRenderer.java
Starting at line 176 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\HTMLRenderer.java

	    for (Report.ProcessingError pe : errors) {
			buf.setLength(0);
			buf.append("<tr");
			if (colorize) {
			    buf.append(" bgcolor=\"lightgrey\"");
			}
			colorize = !colorize;
			buf.append("> " + PMD.EOL);
			buf.append("<td>" + pe.getFile() + "</td>" + PMD.EOL);
=====================================================================
Found a 5 line (43 tokens) duplication in the following files: 
Starting at line 249 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\DesignPatternDetection.java
Starting at line 602 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\DesignPatternDetection.java
Starting at line 664 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\DesignPatternDetection.java

		candidate.setPackageName(context
				.getParentsOfType(ASTCompilationUnit.class).get(0)
				.findChildrenOfType(ASTPackageDeclaration.class).get(0)
				.getFirstChildOfType(ASTName.class).getImage());
		candidate.setAttributeName(context
=====================================================================
Found a 14 line (43 tokens) duplication in the following files: 
Starting at line 27 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\rules\mediator\MediatorRule.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\rules\singleton\SingletonRule.java

		rManager.addListner(this);
	}

	public void propertyChange(PropertyChangeEvent evt) {
		this.startAnalysis();
	}

	private void startAnalysis() {

		// HashSet<Integer> alreadyUsedClasses = new HashSet<Integer>();
		
		try {
			this.stmt = this.connection.createStatement();
			String sql = "SELECT id FROM packages";
=====================================================================
Found a 18 line (43 tokens) duplication in the following files: 
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTIfStatement.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTIfStatement.java

    public ASTIfStatement(JavaParser p, int id) {
        super(p, id);
    }

    private boolean hasElse;

    public void setHasElse() {
        this.hasElse = true;
    }

    public boolean hasElse() {
        return this.hasElse;
    }

    /**
     * Accept the visitor. *
     */
    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
=====================================================================
Found a 11 line (43 tokens) duplication in the following files: 
Starting at line 45 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 56 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java

public class StatementAndBraceFinder extends JavaParserVisitorAdapter {
    private final static Logger LOGGER = Logger.getLogger(StatementAndBraceFinder.class.getName()); 

    private final DataFlowHandler dataFlowHandler;
    private Structure dataFlow;
    
    public StatementAndBraceFinder(DataFlowHandler dataFlowHandler) {
	this.dataFlowHandler = dataFlowHandler;
    }

    public void buildDataFlowFor(JavaNode node) {
=====================================================================
Found a 5 line (43 tokens) duplication in the following files: 
Starting at line 120 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 219 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java

        } else if (node.jjtGetParent() instanceof ASTForStatement) {
            dataFlow.createNewNode(node); // FOR EXPR
            dataFlow.pushOnStack(NodeType.FOR_EXPR, dataFlow.getLast());
            LOGGER.finest("pushOnStack parent FOR_EXPR: line " + node.getBeginLine() +", column " + node.getBeginColumn());
        } else if (node.jjtGetParent() instanceof ASTDoStatement) {
=====================================================================
Found a 5 line (43 tokens) duplication in the following files: 
Starting at line 302 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 307 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 313 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java

            if (node instanceof ASTForInit) {
                dataFlow.createNewNode(node);
                dataFlow.pushOnStack(NodeType.FOR_EXPR, dataFlow.getLast());
                LOGGER.finest("pushOnStack FOR_EXPR: line " + node.getBeginLine() +", column " + node.getBeginColumn());
            } else if (node instanceof ASTForUpdate) {
=====================================================================
Found a 4 line (43 tokens) duplication in the following files: 
Starting at line 95 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\NPathComplexityRule.java
Starting at line 227 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NPathComplexityRule.java
Starting at line 261 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NPathComplexityRule.java

        List<JavaNode> statementChildren = new ArrayList<JavaNode>();
        for (int i = 0; i < node.jjtGetNumChildren(); i++) {
            if (node.jjtGetChild(i).getClass() == ASTStatement.class) {
                statementChildren.add((JavaNode) node.jjtGetChild(i));
=====================================================================
Found a 10 line (43 tokens) duplication in the following files: 
Starting at line 105 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\comments\AbstractCommentRule.java
Starting at line 133 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\comments\AbstractCommentRule.java

				filteredLines.add(line.substring(start, end));
				continue;
			}

			if (line.length() > 0 && line.charAt(0) == '*') {
				filteredLines.add(line.substring(1));
				continue;
			}

			if (line.startsWith("/*")) {
=====================================================================
Found a 12 line (43 tokens) duplication in the following files: 
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\controversial\OnlyOneReturnRule.java
Starting at line 18 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\junit\JUnitTestsShouldIncludeAssertRule.java
Starting at line 23 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\sunsecure\MethodReturnsInternalArrayRule.java

public class OnlyOneReturnRule extends AbstractJavaRule {

    @Override
    public Object visit(ASTClassOrInterfaceDeclaration node, Object data) {
        if (node.isInterface()) {
            return data;
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTMethodDeclaration node, Object data) {
=====================================================================
Found a 29 line (43 tokens) duplication in the following files: 
Starting at line 186 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NPathComplexityRule.java
Starting at line 235 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NPathComplexityRule.java
Starting at line 269 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NPathComplexityRule.java

        LOGGER.finest(statementChildren.size() + " statementChildren found for IF statement " + node.getBeginLine() +", column " + node.getBeginColumn());

        /* SRT 
	if (statementChildren.isEmpty() 
            || statementChildren.size() == 1 &&  ( null !=  node.getFirstChildOfType(ASTElseClause.class) ) //.hasElse()
	    || statementChildren.size() != 1 && ( null ==  node.getFirstChildOfType(ASTElseClause.class) ) // !node.hasElse()
           ) {
	    throw new IllegalStateException("If node has wrong number of children");
	}
        */

        /* @TODO Any explicit Elsif clause(s) and Else clause are included in the list of statements 
	// add path for not taking if
	if (null ==  node.getFirstChildOfType(ASTElsifClause.class) ) // !node.hasElse()!node.hasElse()) 
        {
	    complexity++;
	}

	if (null ==  node.getFirstChildOfType(ASTElseClause.class) ) // !node.hasElse()!node.hasElse()) 
        {
	    complexity++;
	}
        * */

	for (PLSQLNode element : statementChildren) {
	    complexity += (Integer) element.jjtAccept(this, data);
	}

        LOGGER.exiting(CLASS_NAME,"visit(ASTIfStatement)", (boolCompIf + complexity));
=====================================================================
Found a 20 line (43 tokens) duplication in the following files: 
Starting at line 50 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\ASTDirective.java
Starting at line 55 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\ASTMethod.java
Starting at line 61 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\ASTReference.java

    public ASTDirective(final VmParser p, final int id) {
        super(p, id);
    }

    /**
     * @see org.apache.velocity.runtime.parser.node.SimpleNode#jjtAccept(org.apache.velocity.runtime.parser.node.VmParserVisitor,
     *      java.lang.Object)
     */
    @Override
    public Object jjtAccept(final VmParserVisitor visitor, final Object data) {
        return visitor.visit(this, data);
    }

    /**
     * Sets the directive name. Used by the parser. This keeps us from having to dig it out of the token stream and
     * gives the parse the change to override.
     * 
     * @param str
     */
    public void setDirectiveName(final String str) {
=====================================================================
Found a 14 line (43 tokens) duplication in the following files: 
Starting at line 45 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\ASTEscape.java
Starting at line 42 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\ASTMathNode.java

    public ASTEscape(final VmParser p, final int id) {
        super(p, id);
    }

    /**
     * @see org.apache.velocity.runtime.parser.node.SimpleNode#jjtAccept(org.apache.velocity.runtime.parser.node.VmParserVisitor,
     *      java.lang.Object)
     */
    @Override
    public Object jjtAccept(final VmParserVisitor visitor, final Object data) {
        return visitor.visit(this, data);
    }

}
=====================================================================
Found a 12 line (43 tokens) duplication in the following files: 
Starting at line 112 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\MacroParseException.java
Starting at line 200 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\TemplateParseException.java

        return sb.toString();
    }

    /**
     * @param sb
     * @since 1.5
     */
    protected void appendTemplateInfo(final StringBuffer sb) {
        sb.append(LogUtil.formatFileString(getTemplateName(), getLineNumber(), getColumnNumber()));
        sb.append(eol);
    }
}
=====================================================================
Found a 11 line (42 tokens) duplication in the following files: 
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ParserOptions.java
Starting at line 110 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\EcmascriptParserOptions.java
Starting at line 171 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\xml\XmlParserOptions.java

    }

    @Override
    public boolean equals(Object obj) {
	if (this == obj) {
	    return true;
	}
	if (obj == null || getClass() != obj.getClass()) {
	    return false;
	}
	final ParserOptions that = (ParserOptions) obj;
=====================================================================
Found a 10 line (42 tokens) duplication in the following files: 
Starting at line 171 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ast\xpath\DocumentNavigator.java
Starting at line 192 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ast\xpath\DocumentNavigator.java

    public Iterator<Node> getFollowingSiblingAxisIterator(Object contextNode) {
	return new NodeIterator((Node) contextNode) {
	    @Override
	    protected Node getFirstNode(Node node) {
		return getNextNode(node);
	    }

	    @Override
	    protected Node getNextNode(Node node) {
		return getNextSibling(node);
=====================================================================
Found a 15 line (42 tokens) duplication in the following files: 
Starting at line 24 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\Ecmascript3Handler.java
Starting at line 26 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\JspHandler.java

public class Ecmascript3Handler extends AbstractLanguageVersionHandler {

    @Override
    public XPathHandler getXPathHandler() {
	return new AbstractASTXPathHandler() {
	    public void initialize() {
	    }

	    public void initialize(IndependentContext context) {
	    }
	};
    }

    public RuleViolationFactory getRuleViolationFactory() {
	return EcmascriptRuleViolationFactory.INSTANCE;
=====================================================================
Found a 13 line (42 tokens) duplication in the following files: 
Starting at line 11 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTBreakStatement.java
Starting at line 11 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTContinueStatement.java

	super.setImage(breakStatement.getBreakLabel() != null ? breakStatement.getBreakLabel().getIdentifier() : null);
    }

    /**
     * Accept the visitor.
     */
    @Override
    public Object jjtAccept(EcmascriptParserVisitor visitor, Object data) {
	return visitor.visit(this, data);
    }

    public boolean hasLabel() {
	return node.getBreakLabel() != null;
=====================================================================
Found a 10 line (42 tokens) duplication in the following files: 
Starting at line 29 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\DumpFacade.java
Starting at line 31 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\DumpFacade.java
Starting at line 29 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\DumpFacade.java

	public Object visit(JavaNode node, Object data) {
		dump(node, (String) data);
		if (recurse) {
			return super.visit(node, data + " ");
		} else {
			return data;
		}
	}

	private void dump(JavaNode node, String prefix) {
=====================================================================
Found a 9 line (42 tokens) duplication in the following files: 
Starting at line 62 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\AbstractNcssCountRule.java
Starting at line 42 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\ExcessiveNodeCountRule.java
Starting at line 42 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\design\ExcessiveNodeCountRule.java

            DataPoint point = new DataPoint();
            point.setNode(node);
            point.setScore(1.0 * numNodes);
            point.setMessage(getMessage());
            addDataPoint(point);
        }

        return Integer.valueOf(numNodes);
    }
=====================================================================
Found a 6 line (42 tokens) duplication in the following files: 
Starting at line 246 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\CyclomaticComplexityRule.java
Starting at line 232 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\CyclomaticComplexityRule.java
Starting at line 257 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\CyclomaticComplexityRule.java

    if ( classEntry.getComplexityAverage() >= reportLevel
        || classEntry.highestDecisionPoints >= reportLevel ) {
      addViolation( data, node, new String[] {
          "class",
          node.getImage(),
          classEntry.getComplexityAverage() + "(Highest = "
=====================================================================
Found a 12 line (42 tokens) duplication in the following files: 
Starting at line 98 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\comments\CommentRequiredRule.java
Starting at line 181 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\comments\CommentRequiredRule.java
Starting at line 208 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\comments\CommentRequiredRule.java

							HEADER_CMT_REQUIREMENT_DESCRIPTOR.name() + " "
									+ CommentRequirement.Unwanted,
							decl.getBeginLine(), decl.getEndLine());
				}
			}
		}

		return super.visit(decl, data);
	}

	@Override
	public Object visit(ASTConstructorDeclaration decl, Object data) {
=====================================================================
Found a 12 line (42 tokens) duplication in the following files: 
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\controversial\OnlyOneReturnRule.java
Starting at line 33 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\sunsecure\ArrayIsStoredDirectlyRule.java

public class OnlyOneReturnRule extends AbstractJavaRule {

    @Override
    public Object visit(ASTClassOrInterfaceDeclaration node, Object data) {
        if (node.isInterface()) {
            return data;
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTMethodDeclaration node, Object data) {
=====================================================================
Found a 18 line (42 tokens) duplication in the following files: 
Starting at line 11 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\AvoidDeeplyNestedIfStmtsRule.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\rule\basic\AvoidDeeplyNestedIfStmtsRule.java

public class AvoidDeeplyNestedIfStmtsRule extends AbstractJavaRule {

    private int depth;
    private int depthLimit;
    
    private static final IntegerProperty PROBLEM_DEPTH_DESCRIPTOR = new IntegerProperty(
    		"problemDepth", 
    		"The if statement depth reporting threshold",
    		1, 25,
    		3,
    		1.0f
    		);
    
    public AvoidDeeplyNestedIfStmtsRule() {
	definePropertyDescriptor(PROBLEM_DEPTH_DESCRIPTOR);
    }
  
    public Object visit(ASTCompilationUnit node, Object data) {
=====================================================================
Found a 27 line (42 tokens) duplication in the following files: 
Starting at line 85 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\SimplifyBooleanReturnsRule.java
Starting at line 142 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\SimplifyBooleanReturnsRule.java

              if(terminatesInBooleanLiteral(returnStatement1) && terminatesInBooleanLiteral(returnStatement2)) {
                addViolation(data, node);
              }
              else if (expression1 instanceof ASTUnaryExpressionNotPlusMinus ^ expression2 instanceof ASTUnaryExpressionNotPlusMinus) {
                //We get the nodes under the '!' operator
                //If they are the same => error
                if(isNodesEqualWithUnaryExpression(expression1, expression2)) {
                    // second case:
                    // If
                    //  Expr
                    //  Statement
                    //   ReturnStatement
                    //     UnaryExpressionNotPlusMinus '!'
                    //       Expression E
                    //  Statement
                    //   ReturnStatement
                    //       Expression E
                    // i.e.,
                    // if (foo)
                    //  return !a;
                    // else
                    //  return a;
                  addViolation(data, node);
                }
              }
            }
          } else if (hasOneBlockStmt(node.jjtGetChild(1)) && hasOneBlockStmt(node.jjtGetChild(2))) {
=====================================================================
Found a 7 line (42 tokens) duplication in the following files: 
Starting at line 123 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\imports\UnusedImportsRule.java
Starting at line 28 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\rules\imports\UnusedImports.java

    protected void check(Node node) {
        if (imports.isEmpty()) {
            return;
        }
        ImportWrapper candidate = getImportWrapper(node);
        if (imports.contains(candidate)) {
            imports.remove(candidate);
=====================================================================
Found a 12 line (42 tokens) duplication in the following files: 
Starting at line 18 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\junit\JUnitTestsShouldIncludeAssertRule.java
Starting at line 18 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\naming\AvoidFieldNameMatchingMethodNameRule.java
Starting at line 23 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\sunsecure\MethodReturnsInternalArrayRule.java

public class JUnitTestsShouldIncludeAssertRule extends AbstractJUnitRule {

    @Override
    public Object visit(ASTClassOrInterfaceDeclaration node, Object data) {
        if (node.isInterface()) {
            return data;
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTMethodDeclaration method, Object data) {
=====================================================================
Found a 7 line (42 tokens) duplication in the following files: 
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\naming\AvoidDollarSignsRule.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\naming\AvoidDollarSignsRule.java
Starting at line 29 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\naming\AvoidDollarSignsRule.java

    public Object visit(ASTClassOrInterfaceDeclaration node, Object data) {
        if (node.getImage().indexOf('$') != -1) {
            addViolation(data, node);
            return data;
        }
        return super.visit(node, data);
    }
=====================================================================
Found a 15 line (42 tokens) duplication in the following files: 
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTTriggerTimingPointSection.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTTriggerUnit.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTTypeMethod.java

  public ASTTriggerTimingPointSection(PLSQLParser p, int id) {
    super(p, id);
  }


  /** Accept the visitor. **/
  public Object jjtAccept(PLSQLParserVisitor visitor, Object data) {
    return visitor.visit(this, data);
  }

  /** 
   * return executable's name. 
   * @return 
   */
  public String getMethodName() {
=====================================================================
Found a 12 line (42 tokens) duplication in the following files: 
Starting at line 50 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\ASTDirective.java
Starting at line 45 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\ASTEscape.java
Starting at line 42 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\ASTMathNode.java
Starting at line 55 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\ASTMethod.java
Starting at line 61 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\ASTReference.java

    public ASTDirective(final VmParser p, final int id) {
        super(p, id);
    }

    /**
     * @see org.apache.velocity.runtime.parser.node.SimpleNode#jjtAccept(org.apache.velocity.runtime.parser.node.VmParserVisitor,
     *      java.lang.Object)
     */
    @Override
    public Object jjtAccept(final VmParserVisitor visitor, final Object data) {
        return visitor.visit(this, data);
    }
=====================================================================
Found a 8 line (42 tokens) duplication in the following files: 
Starting at line 112 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\HTMLRenderer.java
Starting at line 150 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\HTMLRenderer.java
Starting at line 177 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\HTMLRenderer.java

		    buf.setLength(0);
		    buf.append("<tr");
		    if (colorize) {
		    	buf.append(" bgcolor=\"lightgrey\"");
		    }
		    colorize = !colorize;
		    buf.append("> " + PMD.EOL);
		    buf.append("<td align=\"center\">" + violationCount + "</td>" + PMD.EOL);
=====================================================================
Found a 10 line (42 tokens) duplication in the following files: 
Starting at line 249 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\designer\Designer.java
Starting at line 335 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\designer\Designer.java

		}

		public int getIndex(TreeNode node) {
			for (int i = 0; i < kids.length; i++) {
				if (kids[i] == node) {
					return i;
				}
			}
			return -1;
		}
=====================================================================
Found a 8 line (42 tokens) duplication in the following files: 
Starting at line 47 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\viewer\gui\ASTPanel.java
Starting at line 39 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\viewer\gui\SourceCodePanel.java

    public ASTPanel(ViewerModel model) {
        this.model = model;
        init();
    }

    private void init() {
        model.addViewerModelListener(this);
        setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), NLS.nls("AST.PANEL.TITLE")));
=====================================================================
Found a 6 line (41 tokens) duplication in the following files: 
Starting at line 62 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\CsTokenizer.java
Starting at line 103 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\CsTokenizer.java

							tokenEntries.add(new TokenEntry(String.valueOf(c)+String.valueOf(c)+"=", sourceCode.getFileName(), line));
							ic = reader.read();
						}
						else
						{
							tokenEntries.add(new TokenEntry(String.valueOf(c)+String.valueOf(c), sourceCode.getFileName(), line));
=====================================================================
Found a 4 line (41 tokens) duplication in the following files: 
Starting at line 153 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\DesignPatternDetection.java
Starting at line 191 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\DesignPatternDetection.java

		candidate.setPackageName(method
				.getParentsOfType(ASTCompilationUnit.class).get(0)
				.findChildrenOfType(ASTPackageDeclaration.class).get(0)
				.getFirstChildOfType(ASTName.class).getImage());
=====================================================================
Found a 8 line (41 tokens) duplication in the following files: 
Starting at line 84 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\rule\AbstractEcmascriptRule.java
Starting at line 25 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 46 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\xml\rule\AbstractXmlRule.java

	return new EcmascriptParserOptions(this);
    }

    public void apply(List<? extends Node> nodes, RuleContext ctx) {
	visitAll(nodes, ctx);
    }

    protected void visitAll(List<? extends Node> nodes, RuleContext ctx) {
=====================================================================
Found a 9 line (41 tokens) duplication in the following files: 
Starting at line 33 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\rule\EcmascriptRuleChainVisitor.java
Starting at line 32 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\JavaRuleChainVisitor.java

	}
    }

    protected void visit(Rule rule, Node node, RuleContext ctx) {
	// Rule better either be a EcmascriptParserVisitor, or a XPathRule
	if (rule instanceof XPathRule) {
	    ((XPathRule) rule).evaluate(node, ctx);
	} else {
	    ((EcmascriptNode) node).jjtAccept((EcmascriptParserVisitor) rule, ctx);
=====================================================================
Found a 9 line (41 tokens) duplication in the following files: 
Starting at line 94 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\VariableAccessVisitor.java
Starting at line 120 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\VariableAccessVisitor.java

	    varDecls = ((JavaNode)n.getNode()).getScope().getDeclarations();
	    if (!decls.contains(varDecls)) {
		decls.add(varDecls);
	    }
	}
	return decls;
    }

    private void addAccess(JavaNameOccurrence occurrence, DataFlowNode inode) {
=====================================================================
Found a 11 line (41 tokens) duplication in the following files: 
Starting at line 43 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 70 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java

	if (c != null) {
	    return c.getImage();
	}
	return null;
    }

    public static boolean isQualifiedName(Node node) {
	return node.getImage().indexOf('.') != -1;
    }

    public static boolean importsPackage(ASTCompilationUnit node, String packageName) {
=====================================================================
Found a 10 line (41 tokens) duplication in the following files: 
Starting at line 52 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\basic\DoubleCheckedLockingRule.java
Starting at line 18 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\controversial\OnlyOneReturnRule.java
Starting at line 61 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\coupling\CouplingBetweenObjectsRule.java
Starting at line 20 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\junit\JUnitTestsShouldIncludeAssertRule.java
Starting at line 20 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\naming\AvoidFieldNameMatchingMethodNameRule.java
Starting at line 35 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\sunsecure\ArrayIsStoredDirectlyRule.java
Starting at line 25 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\sunsecure\MethodReturnsInternalArrayRule.java

    @Override
    public Object visit(ASTClassOrInterfaceDeclaration node, Object data) {
        if (node.isInterface()) {
            return data;
        }
        return super.visit(node, data);
    }
 
    @Override
    public Object visit(ASTCompilationUnit compilationUnit, Object data) {
=====================================================================
Found a 11 line (41 tokens) duplication in the following files: 
Starting at line 17 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\ExcessiveParameterListRule.java
Starting at line 17 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\ExcessiveParameterListRule.java

public class ExcessiveParameterListRule extends ExcessiveNodeCountRule {
    public ExcessiveParameterListRule() {
        super(ASTFormalParameters.class);
        setProperty(MINIMUM_DESCRIPTOR, 10d);
    }

    // Count these nodes, but no others.
    public Object visit(ASTFormalParameter node, Object data) {
        return NumericConstants.ONE;
    }
}
=====================================================================
Found a 3 line (41 tokens) duplication in the following files: 
Starting at line 26 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\AssignmentToNonFinalStaticRule.java
Starting at line 78 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\PreserveStackTraceRule.java
Starting at line 31 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\unusedcode\UnusedPrivateFieldRule.java

        Map<VariableNameDeclaration, List<NameOccurrence>> vars = node.getScope().getDeclarations(VariableNameDeclaration.class);
        for (Map.Entry<VariableNameDeclaration, List<NameOccurrence>> entry: vars.entrySet()) {
            VariableNameDeclaration decl = entry.getKey();
=====================================================================
Found a 10 line (41 tokens) duplication in the following files: 
Starting at line 29 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\LocalScope.java
Starting at line 34 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\MethodScope.java

            nameOccurrences.add(javaOccurrence);
            Node n = javaOccurrence.getLocation();
            if (n instanceof ASTName) {
                ((ASTName) n).setNameDeclaration(decl);
            } // TODO what to do with PrimarySuffix case?
        }
        return decl;
    }

    public void addDeclaration(NameDeclaration nameDecl) {
=====================================================================
Found a 6 line (41 tokens) duplication in the following files: 
Starting at line 58 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\SourceFileScope.java
Starting at line 45 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\SourceFileScope.java

    protected NameDeclaration findVariableHere(JavaNameOccurrence occ) {
        ImageFinderFunction finder = new ImageFinderFunction(occ.getImage());
        Applier.apply(finder, getDeclarations().keySet().iterator());
        return finder.getDecl();
    }
}
=====================================================================
Found a 7 line (41 tokens) duplication in the following files: 
Starting at line 30 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\TypeSet.java
Starting at line 66 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\TypeSet.java
Starting at line 30 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\TypeSet.java
Starting at line 66 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\TypeSet.java

	public ExplicitImportResolver(Set<String> importStmts) {
	    this.importStmts = importStmts;
	}

	public Class<?> resolve(String name) throws ClassNotFoundException {
	    for (String importStmt : importStmts) {
		if (importStmt.endsWith(name)) {
=====================================================================
Found a 23 line (41 tokens) duplication in the following files: 
Starting at line 50 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\MacroParseException.java
Starting at line 95 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\TemplateParseException.java

    }

    /**
     * returns the Template name where this exception occured.
     * 
     * @return The Template name where this exception occured.
     * @since 1.5
     */
    public String getTemplateName() {
        return templateName;
    }

    /**
     * returns the line number where this exception occured.
     * 
     * @return The line number where this exception occured.
     * @since 1.5
     */
    public int getLineNumber() {
        if ((currentToken != null) && (currentToken.next != null)) {
            return currentToken.next.beginLine;
        }
        else if (currentToken != null) {
=====================================================================
Found a 18 line (41 tokens) duplication in the following files: 
Starting at line 73 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\MacroParseException.java
Starting at line 113 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\TemplateParseException.java

            return currentToken.beginLine;
        }
        else {
            return -1;
        }
    }

    /**
     * returns the column number where this exception occured.
     * 
     * @return The column number where this exception occured.
     * @since 1.5
     */
    public int getColumnNumber() {
        if ((currentToken != null) && (currentToken.next != null)) {
            return currentToken.next.beginColumn;
        }
        else if (currentToken != null) {
=====================================================================
Found a 9 line (40 tokens) duplication in the following files: 
Starting at line 249 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\dcd\graph\UsageGraphBuilder.java
Starting at line 356 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\dcd\graph\UsageGraphBuilder.java

				println("visitFieldInsn:");
				printlnIndent("opcode: " + opcode);
				printlnIndent("owner: " + owner);
				printlnIndent("name: " + name);
				printlnIndent("desc: " + desc);
			}
			if (INDEX) {
				String className = getClassName(owner);
				usageGraph.usageField(className, name, desc, usingMemberNode);
=====================================================================
Found a 8 line (40 tokens) duplication in the following files: 
Starting at line 213 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ast\xpath\DocumentNavigator.java
Starting at line 255 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ast\xpath\DocumentNavigator.java

    public Iterator<Node> getFollowingAxisIterator(Object contextNode) {
	return new NodeIterator((Node) contextNode) {
	    @Override
	    protected Node getFirstNode(Node node) {
		if (node == null) {
		    return null;
		} else {
		    Node sibling = getNextSibling(node);
=====================================================================
Found a 10 line (40 tokens) duplication in the following files: 
Starting at line 20 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\rules\builder\BuilderRule.java
Starting at line 25 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\rules\decorator\DecoratorRule.java
Starting at line 19 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\rules\facade\FacadeRule.java

	public BuilderRule(RuleManager rManager, Connection dbLink) {
		this.connection = dbLink;
		rManager.addListner(this);
	}

	public void propertyChange(PropertyChangeEvent evt) {
		this.startAnalysis();
	}

	private void startAnalysis() {
=====================================================================
Found a 10 line (40 tokens) duplication in the following files: 
Starting at line 22 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\rules\builder\BuilderRule.java
Starting at line 27 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\rules\mediator\MediatorRule.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\rules\singleton\SingletonRule.java

		rManager.addListner(this);
	}

	public void propertyChange(PropertyChangeEvent evt) {
		this.startAnalysis();
	}

	private void startAnalysis() {
		try {
			this.stmt = this.connection.createStatement();
=====================================================================
Found a 5 line (40 tokens) duplication in the following files: 
Starting at line 30 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\DumpFacade.java
Starting at line 32 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\xml\ast\DumpFacade.java

	public Object visit(EcmascriptNode<?> node, Object data) {
		dump(node, (String) data);
		if (recurse) {
			for (int i = 0; i < node.jjtGetNumChildren(); i++) {
				visit((EcmascriptNode<?>) node.jjtGetChild(i), data + " ");
=====================================================================
Found a 13 line (40 tokens) duplication in the following files: 
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTFieldDeclaration.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTLocalVariableDeclaration.java

    public ASTFieldDeclaration(JavaParser p, int id) {
        super(p, id);
    }

    /**
     * Accept the visitor. *
     */
    @Override
    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }

    public boolean isSyntacticallyPublic() {
=====================================================================
Found a 18 line (40 tokens) duplication in the following files: 
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTMethodDeclaration.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTPackageDeclaration.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTType.java

    public ASTMethodDeclaration(JavaParser p, int id) {
        super(p, id);
    }

    /**
     * Accept the visitor. *
     */
    @Override
    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }

    /**
     * Gets the name of the method.
     *
     * @return a String representing the name of the method
     */
    public String getMethodName() {
=====================================================================
Found a 13 line (40 tokens) duplication in the following files: 
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\AbstractJavaAccessTypeNode.java
Starting at line 19 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\AbstractJavaTypeNode.java

		super(parser, i);
	}

	private Class<?> type;

	public Class<?> getType() {
		return type;
	}

	public void setType(Class<?> type) {
		this.type = type;
	}
}
=====================================================================
Found a 7 line (40 tokens) duplication in the following files: 
Starting at line 133 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 210 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java

    public Object visit(ASTForInit node, Object data) {
        if (!(data instanceof Structure)) {
            return data;
        }
        Structure dataFlow = (Structure) data;
        super.visit(node, data);
        dataFlow.pushOnStack(NodeType.FOR_INIT, dataFlow.getLast());
=====================================================================
Found a 6 line (40 tokens) duplication in the following files: 
Starting at line 270 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\ScopeAndDeclarationFinder.java
Starting at line 369 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\ScopeAndDeclarationFinder.java

    public Object visit(ASTVariableDeclaratorId node, Object data) {
	VariableNameDeclaration decl = new VariableNameDeclaration(node);
	node.getScope().addDeclaration(decl);
	node.setNameDeclaration(decl);
	return super.visit(node, data);
    }
=====================================================================
Found a 5 line (40 tokens) duplication in the following files: 
Starting at line 48 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\rules\CloneMethodMustImplementCloneable.java
Starting at line 57 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\rules\SignatureDeclareThrowsException.java

		}
	    }
	}
	if (node.jjtGetNumChildren() != 0 && node.jjtGetChild(0) instanceof ASTExtendsList) {
	    ASTClassOrInterfaceType type = (ASTClassOrInterfaceType) node.jjtGetChild(0).jjtGetChild(0);
=====================================================================
Found a 7 line (40 tokens) duplication in the following files: 
Starting at line 47 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\rule\AbstractJspRule.java
Starting at line 26 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java

    }

    public void apply(List<? extends Node> nodes, RuleContext ctx) {
	visitAll(nodes, ctx);
    }

    protected void visitAll(List<? extends Node> nodes, RuleContext ctx) {
=====================================================================
Found a 17 line (40 tokens) duplication in the following files: 
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTMethodDeclaration.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTPackageBody.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTPackageSpecification.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTProgramUnit.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTTypeSpecification.java

  public ASTMethodDeclaration(PLSQLParser p, int id) {
    super(p, id);
  }


  /** Accept the visitor. **/
  public Object jjtAccept(PLSQLParserVisitor visitor, Object data) {
    return visitor.visit(this, data);
  }

  /**
   * Gets the name of the method.
   *
   * @return a String representing the name of the method
   */
  @Override
  public String getMethodName() {
=====================================================================
Found a 6 line (40 tokens) duplication in the following files: 
Starting at line 55 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\DataFlowFacade.java
Starting at line 69 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java

                      + node.getClass().getCanonicalName() + " @ line " 
                      + node.getBeginLine() 
                      +", column " + node.getBeginColumn()
                      + " --- " + new Throwable().getStackTrace()
                );
        if (node.hasDescendantOfType(ASTCompoundTriggerBlock.class))
=====================================================================
Found a 10 line (40 tokens) duplication in the following files: 
Starting at line 359 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\properties\AbstractProperty.java
Starting at line 204 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\CollectionUtil.java

	public static final boolean areEqual(Object value, Object otherValue) {
		if (value == otherValue) {
		    return true;
		}
		if (value == null) {
		    return false;
		}
		if (otherValue == null) {
		    return false;
		}
=====================================================================
Found a 7 line (40 tokens) duplication in the following files: 
Starting at line 70 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\IDEAJRenderer.java
Starting at line 83 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\IDEAJRenderer.java

			buf.append(getSimpleFileName(rv.getFilename())).append(':')
					.append(rv.getBeginLine()).append(')').append(PMD.EOL);
			writer.write(buf.toString());
		}
	}

	private void renderFile(Writer writer, Iterator<RuleViolation> violations) throws IOException {
=====================================================================
Found a 14 line (39 tokens) duplication in the following files: 
Starting at line 23 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\Ecmascript3Parser.java
Starting at line 22 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\xml\XmlParser.java

	ecmascriptParser = new net.sourceforge.pmd.lang.ecmascript.ast.EcmascriptParser((EcmascriptParserOptions)parserOptions);
    }

    @Override
    public TokenManager createTokenManager(Reader source) {
	return null;
    }

    public boolean canParse() {
	return true;
    }

    public Node parse(String fileName, Reader source) throws ParseException {
    return ecmascriptParser.parse(source);
=====================================================================
Found a 15 line (39 tokens) duplication in the following files: 
Starting at line 19 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTArrayLiteral.java
Starting at line 23 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTObjectLiteral.java

	return visitor.visit(this, data);
    }

    public boolean isDestructuring() {
	return node.isDestructuring();
    }

    public boolean isTrailingComma() {
	return trailingComma;
    }

    public void setTrailingComma(boolean trailingComma) {
	this.trailingComma = trailingComma;
    }
}
=====================================================================
Found a 15 line (39 tokens) duplication in the following files: 
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTFunctionCall.java
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTNewExpression.java
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTVariableInitializer.java

	super(functionCall);
    }

    /**
     * Accept the visitor.
     */
    public Object jjtAccept(EcmascriptParserVisitor visitor, Object data) {
	return visitor.visit(this, data);
    }

    public EcmascriptNode getTarget() {
	return (EcmascriptNode) jjtGetChild(0);
    }

    public int getNumArguments() {
=====================================================================
Found a 15 line (39 tokens) duplication in the following files: 
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTSwitchStatement.java
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTWithStatement.java
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTXmlExpression.java

	super(switchStatement);
    }

    /**
     * Accept the visitor.
     */
    public Object jjtAccept(EcmascriptParserVisitor visitor, Object data) {
	return visitor.visit(this, data);
    }

    public EcmascriptNode getExpression() {
	return (EcmascriptNode) jjtGetChild(0);
    }

    public int getNumCases() {
=====================================================================
Found a 11 line (39 tokens) duplication in the following files: 
Starting at line 75 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\rule\AbstractEcmascriptRule.java
Starting at line 19 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\rule\EcmascriptXPathRule.java

    public AbstractEcmascriptRule() {
	super.setLanguage(Language.ECMASCRIPT);
	definePropertyDescriptor(RECORDING_COMMENTS_DESCRIPTOR);
	definePropertyDescriptor(RECORDING_LOCAL_JSDOC_COMMENTS_DESCRIPTOR);
	definePropertyDescriptor(RHINO_LANGUAGE_VERSION);
    }

    @Override
    public ParserOptions getParserOptions() {
	return new EcmascriptParserOptions(this);
    }
=====================================================================
Found a 13 line (39 tokens) duplication in the following files: 
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTFieldDeclaration.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTLiteral.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTLocalVariableDeclaration.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTMethodDeclaration.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTPackageDeclaration.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTThrowStatement.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTType.java

    public ASTFieldDeclaration(JavaParser p, int id) {
        super(p, id);
    }

    /**
     * Accept the visitor. *
     */
    @Override
    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }

    public boolean isSyntacticallyPublic() {
=====================================================================
Found a 17 line (39 tokens) duplication in the following files: 
Starting at line 116 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTFieldDeclaration.java
Starting at line 66 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTLocalVariableDeclaration.java

        return ((ASTVariableDeclaratorId) jjtGetChild(1).jjtGetChild(0)).getArrayDepth();
    }

    /**
     * Gets the variable name of this field.
     * This method searches the first VariableDeclartorId node and returns its image or <code>null</code> if the child node is not found.
     *
     * @return a String representing the name of the variable
     */
    public String getVariableName() {
        ASTVariableDeclaratorId decl = getFirstDescendantOfType(ASTVariableDeclaratorId.class);
        if (decl != null) {
            return decl.getImage();
        }
        return null;
    }
}
=====================================================================
Found a 24 line (39 tokens) duplication in the following files: 
Starting at line 38 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\DumpFacade.java
Starting at line 38 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\DumpFacade.java

	private void dump(JavaNode node, String prefix) {
		//
		// Dump format is generally composed of the following items...
		//

		// 1) Dump prefix
		writer.print(prefix);

		// 2) JJT Name of the Node
		writer.print(node.toString());

		//
		// If there are any additional details, then:
		// 1) A colon
		// 2) The Node.getImage() if it is non-empty
		// 3) Extras in parentheses
		//

		// Standard image handling
		String image = node.getImage();

		// Special image handling (e.g. Nodes with normally null images)
		if (node instanceof ASTBooleanLiteral) {
			image = String.valueOf(((ASTBooleanLiteral) node).isTrue());
=====================================================================
Found a 9 line (39 tokens) duplication in the following files: 
Starting at line 101 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 493 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java

    public Object visit(ASTExpression node, Object data) {
        if (!(data instanceof Structure)) {
            return data;
        }
        Structure dataFlow = (Structure) data;

        // TODO what about throw stmts?
        if (node.jjtGetParent() instanceof ASTIfStatement) {
            dataFlow.createNewNode(node); // START IF
=====================================================================
Found a 5 line (39 tokens) duplication in the following files: 
Starting at line 180 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\NPathComplexityRule.java
Starting at line 370 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NPathComplexityRule.java

        int boolCompSwitch = sumExpressionComplexity(node.getFirstChildOfType(ASTExpression.class));

        int npath = 0;
        int caseRange = 0;
        for (int i = 0; i < node.jjtGetNumChildren(); i++) {
=====================================================================
Found a 13 line (39 tokens) duplication in the following files: 
Starting at line 24 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\TooManyFieldsRule.java
Starting at line 26 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\TooManyFieldsRule.java

    private Map<String, ASTClassOrInterfaceDeclaration> nodes;

    private static final IntegerProperty MAX_FIELDS_DESCRIPTOR = new IntegerProperty(
    		"maxfields", "Max allowable fields",
    		1, 300, DEFAULT_MAXFIELDS, 1.0f
    		);
    
    public TooManyFieldsRule() {
	definePropertyDescriptor(MAX_FIELDS_DESCRIPTOR);
    }

    @Override
    public Object visit(ASTCompilationUnit node, Object data) {
=====================================================================
Found a 10 line (39 tokens) duplication in the following files: 
Starting at line 66 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\NameFinder.java
Starting at line 72 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\NameFinder.java

            JavaNameOccurrence qualifiedName = names.get(names.size() - 2);
            qualifiedName.setNameWhichThisQualifies(name);
        }
    }


    @Override
    public String toString() {
    	StringBuilder result = new StringBuilder();
        for (NameOccurrence occ: names) {
=====================================================================
Found a 9 line (39 tokens) duplication in the following files: 
Starting at line 46 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\ASTAddNode.java
Starting at line 46 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\ASTDivNode.java
Starting at line 45 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\ASTModNode.java
Starting at line 46 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\ASTMulNode.java
Starting at line 46 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\ASTSubtractNode.java

    public ASTAddNode(final VmParser p, final int id) {
        super(p, id);
    }

    /** Accept the visitor. **/
    public Object jjtAccept(VmParserVisitor visitor, Object data) {
      return visitor.visit(this, data);
    }
}
=====================================================================
Found a 5 line (39 tokens) duplication in the following files: 
Starting at line 63 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\IDEAJRenderer.java
Starting at line 77 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\IDEAJRenderer.java

		StringBuilder buf = new StringBuilder();
		while (violations.hasNext()) {
			buf.setLength(0);
			RuleViolation rv = violations.next();
			buf.append(rv.getDescription() + PMD.EOL);
=====================================================================
Found a 5 line (39 tokens) duplication in the following files: 
Starting at line 50 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\log\AntLogHandler.java
Starting at line 23 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\log\ConsoleLogHandler.java

        antTask.log(FORMATTER.format(logRecord), antLevel);
        if (logRecord.getThrown() != null) {
            StringWriter stringWriter = new StringWriter();
            PrintWriter printWriter = new PrintWriter(stringWriter, true);
            logRecord.getThrown().printStackTrace(printWriter);
=====================================================================
Found a 3 line (38 tokens) duplication in the following files: 
Starting at line 197 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\Report.java
Starting at line 236 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\Report.java

        int index = Collections.binarySearch(violations, violation, RuleViolationComparator.INSTANCE);
        violations.add(index < 0 ? -index - 1 : index, violation);
        violationTree.addRuleViolation(violation);
=====================================================================
Found a 6 line (38 tokens) duplication in the following files: 
Starting at line 20 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\dcd\DumpNodeVisitor.java
Starting at line 112 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\dcd\UsageNodeVisitor.java

	public Object visit(UsageGraph usageGraph, Object data) {
		System.out.println("----------------------------------------");
		super.visit(usageGraph, data);
		System.out.println("----------------------------------------");
		return data;
	}
=====================================================================
Found a 12 line (38 tokens) duplication in the following files: 
Starting at line 100 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\dcd\graph\UsageGraphBuilder.java
Starting at line 210 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\dcd\graph\UsageGraphBuilder.java

		}

		public AnnotationVisitor visitAnnotation(String desc, boolean visible) {
			if (TRACE) {
				println("visitAnnotation:");
				printlnIndent("desc: " + desc);
				printlnIndent("visible: " + visible);
			}
			return null;
		}

		public void visitAttribute(Attribute attr) {
=====================================================================
Found a 5 line (38 tokens) duplication in the following files: 
Starting at line 113 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\DesignPatternDetection.java
Starting at line 374 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\DesignPatternDetection.java
Starting at line 427 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\DesignPatternDetection.java

				.getParentsOfType(ASTCompilationUnit.class).get(0)
				.findChildrenOfType(ASTPackageDeclaration.class).get(0)
				.getFirstChildOfType(ASTName.class).getImage());
		// Suche nach vererbten Klassen
		if (node.getFirstChildOfType(ASTExtendsList.class) != null) {
=====================================================================
Found a 4 line (38 tokens) duplication in the following files: 
Starting at line 154 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\DesignPatternDetection.java
Starting at line 250 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\DesignPatternDetection.java
Starting at line 603 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\DesignPatternDetection.java
Starting at line 665 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\DesignPatternDetection.java

				.getParentsOfType(ASTCompilationUnit.class).get(0)
				.findChildrenOfType(ASTPackageDeclaration.class).get(0)
				.getFirstChildOfType(ASTName.class).getImage());
		candidate.setConstructor(true);
=====================================================================
Found a 13 line (38 tokens) duplication in the following files: 
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTBlock.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTInitializer.java

    public ASTBlock(JavaParser p, int id) {
        super(p, id);
    }


    /**
     * Accept the visitor. *
     */
    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }

    private boolean containsComment;
=====================================================================
Found a 11 line (38 tokens) duplication in the following files: 
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTFieldDeclaration.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTLiteral.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTLocalVariableDeclaration.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTMethodDeclaration.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTPackageDeclaration.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTThrowStatement.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTType.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTVariableDeclaratorId.java

    public ASTFieldDeclaration(JavaParser p, int id) {
        super(p, id);
    }

    /**
     * Accept the visitor. *
     */
    @Override
    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }
=====================================================================
Found a 9 line (38 tokens) duplication in the following files: 
Starting at line 27 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTFormalParameter.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTTryStatement.java

    public ASTFormalParameter(JavaParser p, int id) {
        super(p, id);
    }

    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }

    public boolean hasSuppressWarningsAnnotationFor(Rule rule) {
=====================================================================
Found a 7 line (38 tokens) duplication in the following files: 
Starting at line 237 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 249 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 260 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 271 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 536 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 554 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 572 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 583 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 594 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java

    public Object visit(ASTBreakStatement node, Object data) {
        if (!(data instanceof Structure)) {
            return data;
        }
        Structure dataFlow = (Structure) data;
        dataFlow.createNewNode(node);
        dataFlow.pushOnStack(NodeType.BREAK_STATEMENT, dataFlow.getLast());
=====================================================================
Found a 7 line (38 tokens) duplication in the following files: 
Starting at line 24 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\JavaRuleChainVisitor.java
Starting at line 24 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\rule\JspRuleChainVisitor.java
Starting at line 28 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\PLSQLRuleChainVisitor.java

			public Object visit(JavaNode node, Object data) {
				indexNode(node);
				return super.visit(node, data);
			}
		};

		for (int i = 0; i < nodes.size(); i++) {
=====================================================================
Found a 11 line (38 tokens) duplication in the following files: 
Starting at line 123 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\AbstractNcssCountRule.java
Starting at line 147 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\AbstractNcssCountRule.java

    public Object visit(ASTCatchStatement node, Object data) {
        return countNodeChildren(node, data);
    }

    @Override
    public Object visit(ASTContinueStatement node, Object data) {
        return NumericConstants.ONE;
    }

    @Override
    public Object visit(ASTFinallyStatement node, Object data) {
=====================================================================
Found a 8 line (38 tokens) duplication in the following files: 
Starting at line 28 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\comments\CommentRequiredRule.java
Starting at line 35 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\comments\HeaderCommentsRule.java

		CommentRequirement(String theLabel) {
			label = theLabel;
		}

		public static String[] labels() {
			String[] labels = new String[values().length];
			int i = 0;
			for (CommentRequirement requirement : values()) {
=====================================================================
Found a 9 line (38 tokens) duplication in the following files: 
Starting at line 67 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\ClassScope.java
Starting at line 87 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\ClassScope.java

            } else {
                nameOccurrences.add(javaOccurrence);
                Node n = javaOccurrence.getLocation();
                if (n instanceof ASTName) {
                    ((ASTName) n).setNameDeclaration(decl);
                } // TODO what to do with PrimarySuffix case?
            }

        } else if (decl != null && !javaOccurrence.isThisOrSuper()) {
=====================================================================
Found a 6 line (38 tokens) duplication in the following files: 
Starting at line 48 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\TypeHelper.java
Starting at line 71 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\xpath\TypeOfFunction.java

		if (implementors.contains(clazz)) {
			return true;
		}
		Class<?> superC = type.getSuperclass();
		while (superC != null && !superC.equals(Object.class)) {
			if (superC.equals(clazz)) {
=====================================================================
Found a 11 line (38 tokens) duplication in the following files: 
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTArguments.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTMethodDeclarator.java

  public ASTArguments(PLSQLParser p, int id) {
    super(p, id);
  }


  /** Accept the visitor. **/
  public Object jjtAccept(PLSQLParserVisitor visitor, Object data) {
    return visitor.visit(this, data);
  }

  public int getArgumentCount() {
=====================================================================
Found a 11 line (38 tokens) duplication in the following files: 
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTDatatype.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTTriggerTimingPointSection.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTTriggerUnit.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTTypeMethod.java

  public ASTDatatype(PLSQLParser p, int id) {
    super(p, id);
  }


  /** Accept the visitor. **/
  public Object jjtAccept(PLSQLParserVisitor visitor, Object data) {
    return visitor.visit(this, data);
  }

  public String getTypeImage() {
=====================================================================
Found a 11 line (38 tokens) duplication in the following files: 
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTPrimaryPrefix.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTPrimarySuffix.java

  public ASTPrimaryPrefix(PLSQLParser p, int id) {
    super(p, id);
  }


  /** Accept the visitor. **/
  public Object jjtAccept(PLSQLParserVisitor visitor, Object data) {
    return visitor.visit(this, data);
  }

  private boolean usesSelfModifier;
=====================================================================
Found a 5 line (38 tokens) duplication in the following files: 
Starting at line 39 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\DataFlowFacade.java
Starting at line 55 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\DataFlowFacade.java
Starting at line 63 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\DataFlowFacade.java
Starting at line 73 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\DataFlowFacade.java
Starting at line 88 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\DataFlowFacade.java
Starting at line 102 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\DataFlowFacade.java
Starting at line 116 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\DataFlowFacade.java
Starting at line 69 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java

                      + node.getClass().getCanonicalName() + " @ line " 
                      + node.getBeginLine() 
                      +", column " + node.getBeginColumn()
                      + " --- " + new Throwable().getStackTrace()
                );
=====================================================================
Found a 5 line (38 tokens) duplication in the following files: 
Starting at line 17 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\LocalScope.java
Starting at line 32 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\MethodScope.java

    @Override
    public NameDeclaration addNameOccurrence(NameOccurrence occ) {
        PLSQLNameOccurrence occurrence = (PLSQLNameOccurrence)occ;
        NameDeclaration decl = findVariableHere(occurrence);
        if (decl != null && !occurrence.isThisOrSuper()) {
=====================================================================
Found a 10 line (38 tokens) duplication in the following files: 
Starting at line 25 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\EmacsRenderer.java
Starting at line 33 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\TextRenderer.java

    public String defaultFileExtension() { return "emacs"; }
    
    /**
     * {@inheritDoc}
     */
    @Override
    public void renderFileViolations(Iterator<RuleViolation> violations) throws IOException {
		Writer writer = getWriter();
		StringBuilder buf = new StringBuilder();
		while (violations.hasNext()) {
=====================================================================
Found a 4 line (37 tokens) duplication in the following files: 
Starting at line 204 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\RuleSetFactory.java
Starting at line 403 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\RuleSetFactory.java

			NodeList nodeList = ruleSetElement.getChildNodes();
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node node = nodeList.item(i);
				if (node.getNodeType() == Node.ELEMENT_NODE) {
=====================================================================
Found a 5 line (37 tokens) duplication in the following files: 
Starting at line 85 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ast\xpath\saxon\DocumentNode.java
Starting at line 118 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ast\xpath\saxon\ElementNode.java

	case Axis.DESCENDANT:
	    return new Navigator.DescendantEnumeration(this, false, true);
	case Axis.DESCENDANT_OR_SELF:
	    return new Navigator.DescendantEnumeration(this, true, true);
	case Axis.CHILD:
=====================================================================
Found a 11 line (37 tokens) duplication in the following files: 
Starting at line 19 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\JavaTokenManager.java
Starting at line 19 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\JspTokenManager.java

	tokenManager = new JavaParserTokenManager(new JavaCharStream(source));
    }

    public Object getNextToken() {
	return tokenManager.getNextToken();
    }

    public void setFileName(String fileName) {
	tokenManager.setFileName(fileName);
    }
}
=====================================================================
Found a 13 line (37 tokens) duplication in the following files: 
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTAdditiveExpression.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTAllocationExpression.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTAndExpression.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTAnnotationMethodDeclaration.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTAnnotationTypeBody.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTAnnotationTypeDeclaration.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTAnnotationTypeMemberDeclaration.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTArgumentList.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTArrayDimsAndInits.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTArrayInitializer.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTAssertStatement.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTBreakStatement.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTCatchStatement.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTClassOrInterfaceBody.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTClassOrInterfaceType.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTConditionalAndExpression.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTConditionalOrExpression.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTContinueStatement.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTDefaultValue.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTDoStatement.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTEmptyStatement.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTEnumBody.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTEnumConstant.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTEnumDeclaration.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTEqualityExpression.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTExclusiveOrExpression.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTExpression.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTExtendsList.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTFinallyStatement.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTForInit.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTForStatement.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTForUpdate.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTImplementsList.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTInclusiveOrExpression.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTInstanceOfExpression.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTLabeledStatement.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTLambdaExpression.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTMarkerAnnotation.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTMemberSelector.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTMemberValue.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTMemberValueArrayInitializer.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTMemberValuePair.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTMemberValuePairs.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTMethodReference.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTMultiplicativeExpression.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTNameList.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTNormalAnnotation.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTNullLiteral.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTPostfixExpression.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTPreDecrementExpression.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTPreIncrementExpression.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTPrimaryExpression.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTRSIGNEDSHIFT.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTRUNSIGNEDSHIFT.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTRelationalExpression.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTResource.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTResourceSpecification.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTResources.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTReturnStatement.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTShiftExpression.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTSingleMemberAnnotation.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTStatement.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTStatementExpression.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTStatementExpressionList.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTSwitchStatement.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTSynchronizedStatement.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTTypeArgument.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTTypeArguments.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTTypeBound.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTTypeParameter.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTTypeParameters.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTUnaryExpression.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTUnaryExpressionNotPlusMinus.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTVariableDeclarator.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTVariableInitializer.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTWhileStatement.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTWildcardBounds.java

    public ASTAdditiveExpression(JavaParser p, int id) {
        super(p, id);
    }


    /**
     * Accept the visitor. *
     */
    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }

}
=====================================================================
Found a 13 line (37 tokens) duplication in the following files: 
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTBlock.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTInitializer.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTReferenceType.java

    public ASTBlock(JavaParser p, int id) {
        super(p, id);
    }


    /**
     * Accept the visitor. *
     */
    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }

    private boolean containsComment;
=====================================================================
Found a 19 line (37 tokens) duplication in the following files: 
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTBlockStatement.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTExplicitConstructorInvocation.java
Starting at line 27 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTFormalParameter.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTTryStatement.java

    public ASTBlockStatement(JavaParser p, int id) {
        super(p, id);
    }


    /**
     * Accept the visitor. *
     */
    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }

    /**
     * Tells if this BlockStatement is an allocation statement.
     * This is done by
     *
     * @return the result of containsDescendantOfType(ASTAllocationExpression.class)
     */
    public final boolean isAllocation() {
=====================================================================
Found a 7 line (37 tokens) duplication in the following files: 
Starting at line 81 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\CommentUtil.java
Starting at line 96 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\comments\AbstractCommentRule.java

		String[] lines = comment.split(CR);
		List<String> filteredLines = new ArrayList<String>(lines.length);

		for (String rawLine : lines) {
			String line = rawLine.trim();

			if (line.startsWith("//")) {
=====================================================================
Found a 4 line (37 tokens) duplication in the following files: 
Starting at line 197 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 341 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java

        } else if (node.jjtGetParent() instanceof ASTWhileStatement) {
            dataFlow.pushOnStack(NodeType.WHILE_LAST_STATEMENT, dataFlow.getLast());
            LOGGER.finest("pushOnStack WHILE_LAST_STATEMENT: line " + node.getBeginLine() +", column " + node.getBeginColumn());
        } else if (node.jjtGetParent() instanceof ASTForStatement) {
=====================================================================
Found a 4 line (37 tokens) duplication in the following files: 
Starting at line 203 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 358 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java

        } else if (node.jjtGetParent() instanceof ASTLabeledStatement) {
            dataFlow.pushOnStack(NodeType.LABEL_LAST_STATEMENT, dataFlow.getLast());
            LOGGER.finest("pushOnStack LABEL_LAST_STATEMENT: line " + node.getBeginLine() +", column " + node.getBeginColumn());
        }
=====================================================================
Found a 8 line (37 tokens) duplication in the following files: 
Starting at line 59 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\AbstractNcssCountRule.java
Starting at line 64 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NcssObjectCountRule.java

        if (this.nodeClass.isInstance(node)) {
            // Add 1 to account for base node
            numNodes++;
            DataPoint point = new DataPoint();
            point.setNode(node);
            point.setScore(1.0 * numNodes);
            point.setMessage(getMessage());
            addDataPoint(point);
=====================================================================
Found a 3 line (37 tokens) duplication in the following files: 
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\optimizations\LocalVariableCouldBeFinalRule.java
Starting at line 30 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\optimizations\MethodArgumentCouldBeFinalRule.java

        Map<VariableNameDeclaration, List<NameOccurrence>> decls = s.getDeclarations(VariableNameDeclaration.class);
        for (Map.Entry<VariableNameDeclaration, List<NameOccurrence>> entry: decls.entrySet()) {
            VariableNameDeclaration var = entry.getKey();
=====================================================================
Found a 14 line (37 tokens) duplication in the following files: 
Starting at line 250 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\ScopeAndDeclarationFinder.java
Starting at line 349 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\ScopeAndDeclarationFinder.java

	cont(node);
	return data;
    }

    // TODO - what about while loops and do loops?
    @Override
    public Object visit(ASTForStatement node, Object data) {
	createLocalScope(node);
	cont(node);
	return data;
    }

    @Override
    public Object visit(ASTIfStatement node, Object data) {
=====================================================================
Found a 12 line (37 tokens) duplication in the following files: 
Starting at line 62 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTAttribute.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTAttributeValue.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTCData.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTCommentTag.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTCompilationUnit.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTContent.java
Starting at line 33 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTDeclaration.java
Starting at line 36 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTDoctypeDeclaration.java
Starting at line 61 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTDoctypeExternalId.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTElExpression.java
Starting at line 99 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTElement.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTJspComment.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTJspDeclaration.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTJspDeclarations.java
Starting at line 36 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTJspDirective.java
Starting at line 47 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTJspDirectiveAttribute.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTJspDocument.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTJspExpression.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTJspExpressionInAttribute.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTJspScriptlet.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTText.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTUnparsedText.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTValueBinding.java

    public ASTAttribute(JspParser p, int id) {
        super(p, id);
    }


    /**
     * Accept the visitor. *
     */
    public Object jjtAccept(JspParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }
}
=====================================================================
Found a 11 line (37 tokens) duplication in the following files: 
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTArguments.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTDatatype.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTFormalParameter.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTMethodDeclarator.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTTriggerTimingPointSection.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTTriggerUnit.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTTypeMethod.java

  public ASTArguments(PLSQLParser p, int id) {
    super(p, id);
  }


  /** Accept the visitor. **/
  public Object jjtAccept(PLSQLParserVisitor visitor, Object data) {
    return visitor.visit(this, data);
  }

  public int getArgumentCount() {
=====================================================================
Found a 11 line (37 tokens) duplication in the following files: 
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTName.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTPrimaryPrefix.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTPrimarySuffix.java
Starting at line 20 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTVariableOrConstantDeclaratorId.java

  public ASTName(PLSQLParser p, int id) {
    super(p, id);
  }


  /** Accept the visitor. **/
  public Object jjtAccept(PLSQLParserVisitor visitor, Object data) {
    return visitor.visit(this, data);
  }

  private NameDeclaration nd;
=====================================================================
Found a 4 line (37 tokens) duplication in the following files: 
Starting at line 356 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\AbstractRule.java
Starting at line 365 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\AbstractRule.java
Starting at line 374 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\AbstractRule.java

	 public void addViolation(Object data, Node node) {
		 RuleContext ruleContext = (RuleContext) data;
		 ruleContext.getLanguageVersion().getLanguageVersionHandler().getRuleViolationFactory().addViolation(
				 ruleContext, this, node, this.getMessage(), null);
=====================================================================
Found a 8 line (37 tokens) duplication in the following files: 
Starting at line 158 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\HTMLRenderer.java
Starting at line 189 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\HTMLRenderer.java

			buf.append("<td>" + pe.getMsg() + "</td>" + PMD.EOL);
			buf.append("</tr>" + PMD.EOL);
			writer.write(buf.toString());	
		    }
	    writer.write("</table>");
    }

    private void glomSuppressions(Writer writer, List<Report.SuppressedViolation> suppressed) throws IOException {
=====================================================================
Found a 6 line (37 tokens) duplication in the following files: 
Starting at line 62 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\IDEAJRenderer.java
Starting at line 40 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\TextRenderer.java

		SourcePath sourcePath = new SourcePath(getProperty(SOURCE_PATH));
		StringBuilder buf = new StringBuilder();
		while (violations.hasNext()) {
			buf.setLength(0);
			RuleViolation rv = violations.next();
			buf.append(rv.getDescription() + PMD.EOL);
=====================================================================
Found a 4 line (37 tokens) duplication in the following files: 
Starting at line 122 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\TextColorRenderer.java
Starting at line 151 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\TextColorRenderer.java

		buf.append(this.yellowBold + "*" + this.colorReset + " file: " + this.whiteBold
			+ this.getRelativePath(lastFile) + this.colorReset + PMD.EOL);
	    }
	    buf.append(this.green + "    src:  " + this.cyan
=====================================================================
Found a 7 line (37 tokens) duplication in the following files: 
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\SymbolTableViewer.java
Starting at line 22 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\SymbolTableViewer.java

    public Object visit(ASTCompilationUnit node, Object data) {
        depth++;
        System.out.println(spaces() + node.getScope());
        super.visit(node, data);
        depth--;
        return data;
    }
=====================================================================
Found a 8 line (36 tokens) duplication in the following files: 
Starting at line 323 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\RuleSetFactory.java
Starting at line 441 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\RuleSetFactory.java

	throws ClassNotFoundException, InstantiationException, IllegalAccessException {
		Element ruleElement = (Element) ruleNode;

		// Stop if we're looking for a particular Rule, and this element is not it.
		if (StringUtil.isNotEmpty(ruleSetReferenceId.getRuleName())
				&& !isRuleName(ruleElement, ruleSetReferenceId.getRuleName())) {
			return;
		}
=====================================================================
Found a 3 line (36 tokens) duplication in the following files: 
Starting at line 113 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\DesignPatternDetection.java
Starting at line 154 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\DesignPatternDetection.java
Starting at line 192 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\DesignPatternDetection.java
Starting at line 250 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\DesignPatternDetection.java
Starting at line 374 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\DesignPatternDetection.java
Starting at line 427 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\DesignPatternDetection.java
Starting at line 603 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\DesignPatternDetection.java
Starting at line 665 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\DesignPatternDetection.java

				.getParentsOfType(ASTCompilationUnit.class).get(0)
				.findChildrenOfType(ASTPackageDeclaration.class).get(0)
				.getFirstChildOfType(ASTName.class).getImage());
=====================================================================
Found a 5 line (36 tokens) duplication in the following files: 
Starting at line 115 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\DumpFacade.java
Starting at line 146 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\DumpFacade.java

		} else if (node instanceof ASTIfStatement) {
			if (((ASTIfStatement) node).hasElse()) {
				extras.add("has else");
			}
		} else if (node instanceof ASTKeywordLiteral) {
=====================================================================
Found a 10 line (36 tokens) duplication in the following files: 
Starting at line 65 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\AbstractJavaHandler.java
Starting at line 59 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\PLSQLHandler.java

		new DataFlowFacade().initializeWith(getDataFlowHandler(), (ASTCompilationUnit) rootNode);
	    }
	};
    }

    @Override
    public VisitorStarter getSymbolFacade() {
	return new VisitorStarter() {
	    public void start(Node rootNode) {
		new SymbolFacade().initializeWith((ASTCompilationUnit) rootNode);
=====================================================================
Found a 11 line (36 tokens) duplication in the following files: 
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTAdditiveExpression.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTAllocationExpression.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTAndExpression.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTAnnotationMethodDeclaration.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTAnnotationTypeBody.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTAnnotationTypeDeclaration.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTAnnotationTypeMemberDeclaration.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTArgumentList.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTArrayDimsAndInits.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTArrayInitializer.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTAssertStatement.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTBlock.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTBlockStatement.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTBreakStatement.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTCatchStatement.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTClassOrInterfaceBody.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTClassOrInterfaceType.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTConditionalAndExpression.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTConditionalOrExpression.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTContinueStatement.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTDefaultValue.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTDoStatement.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTEmptyStatement.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTEnumBody.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTEnumConstant.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTEnumDeclaration.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTEqualityExpression.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTExclusiveOrExpression.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTExplicitConstructorInvocation.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTExpression.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTExtendsList.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTFinallyStatement.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTForInit.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTForStatement.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTForUpdate.java
Starting at line 27 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTFormalParameter.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTImplementsList.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTInclusiveOrExpression.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTInitializer.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTInstanceOfExpression.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTLabeledStatement.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTLambdaExpression.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTMarkerAnnotation.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTMemberSelector.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTMemberValue.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTMemberValueArrayInitializer.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTMemberValuePair.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTMemberValuePairs.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTMethodReference.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTMultiplicativeExpression.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTNameList.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTNormalAnnotation.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTNullLiteral.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTPostfixExpression.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTPreDecrementExpression.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTPreIncrementExpression.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTPrimaryExpression.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTRSIGNEDSHIFT.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTRUNSIGNEDSHIFT.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTReferenceType.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTRelationalExpression.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTResource.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTResourceSpecification.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTResources.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTReturnStatement.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTShiftExpression.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTSingleMemberAnnotation.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTStatement.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTStatementExpression.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTStatementExpressionList.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTSwitchStatement.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTSynchronizedStatement.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTTryStatement.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTTypeArgument.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTTypeArguments.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTTypeBound.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTTypeParameter.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTTypeParameters.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTUnaryExpression.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTUnaryExpressionNotPlusMinus.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTVariableDeclarator.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTVariableInitializer.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTWhileStatement.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTWildcardBounds.java

    public ASTAdditiveExpression(JavaParser p, int id) {
        super(p, id);
    }


    /**
     * Accept the visitor. *
     */
    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }
=====================================================================
Found a 5 line (36 tokens) duplication in the following files: 
Starting at line 25 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\AbstractJavaNode.java
Starting at line 22 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\AbstractJspNode.java
Starting at line 26 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\AbstractPLSQLNode.java
Starting at line 78 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\AbstractVmNode.java

	if (beginLine == -1 && parser.token.next != null) {
	    beginLine = parser.token.next.beginLine;
	    beginColumn = parser.token.next.beginColumn;
	}
    }
=====================================================================
Found a 7 line (36 tokens) duplication in the following files: 
Starting at line 22 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\DataFlowFacade.java
Starting at line 30 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\DataFlowFacade.java

    public void initializeWith(DataFlowHandler dataFlowHandler, ASTCompilationUnit node) {
        sbf = new StatementAndBraceFinder(dataFlowHandler);
        vav = new VariableAccessVisitor();
        node.jjtAccept(this, null);
    }

    public Object visit(ASTMethodDeclaration node, Object data) {
=====================================================================
Found a 4 line (36 tokens) duplication in the following files: 
Starting at line 227 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 505 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java

        if (node.jjtGetNumChildren() == 0) {
            dataFlow.pushOnStack(NodeType.SWITCH_LAST_DEFAULT_STATEMENT, dataFlow.getLast());
            LOGGER.finest("pushOnStack SWITCH_LAST_DEFAULT_STATEMENT: line " + node.getBeginLine() +", column " + node.getBeginColumn());
        } else {
=====================================================================
Found a 7 line (36 tokens) duplication in the following files: 
Starting at line 24 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\JavaRuleChainVisitor.java
Starting at line 24 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\rule\JspRuleChainVisitor.java
Starting at line 28 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\PLSQLRuleChainVisitor.java
Starting at line 27 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\rule\VmRuleChainVisitor.java

			public Object visit(JavaNode node, Object data) {
				indexNode(node);
				return super.visit(node, data);
			}
		};

		for (int i = 0; i < nodes.size(); i++) {
=====================================================================
Found a 8 line (36 tokens) duplication in the following files: 
Starting at line 96 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\AbstractNcssCountRule.java
Starting at line 108 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\AbstractNcssCountRule.java

    public Object visit(ASTDoStatement node, Object data) {
        return countNodeChildren(node, data);
    }

    @Override
    public Object visit(ASTIfStatement node, Object data) {

        Integer lineCount = countNodeChildren(node, data);
=====================================================================
Found a 6 line (36 tokens) duplication in the following files: 
Starting at line 98 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\CyclomaticComplexityRule.java
Starting at line 104 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\CyclomaticComplexityRule.java

    int boolCompIf = NPathComplexityRule.sumExpressionComplexity( node.getFirstChildOfType( ASTExpression.class ) );
    // If statement always has a complexity of at least 1
    boolCompIf++;

    entryStack.peek().bumpDecisionPoints( boolCompIf );
    super.visit( node, data );
=====================================================================
Found a 6 line (36 tokens) duplication in the following files: 
Starting at line 116 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\CyclomaticComplexityRule.java
Starting at line 139 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\CyclomaticComplexityRule.java

    int boolCompFor = NPathComplexityRule.sumExpressionComplexity( node.getFirstDescendantOfType( ASTExpression.class ) );
    // For statement always has a complexity of at least 1
    boolCompFor++;

    entryStack.peek().bumpDecisionPoints( boolCompFor );
    super.visit( node, data );
=====================================================================
Found a 6 line (36 tokens) duplication in the following files: 
Starting at line 127 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\CyclomaticComplexityRule.java
Starting at line 152 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\CyclomaticComplexityRule.java

    int boolCompDo = NPathComplexityRule.sumExpressionComplexity( node.getFirstChildOfType( ASTExpression.class ) );
    // Do statement always has a complexity of at least 1
    boolCompDo++;

    entryStack.peek().bumpDecisionPoints( boolCompDo );
    super.visit( node, data );
=====================================================================
Found a 6 line (36 tokens) duplication in the following files: 
Starting at line 164 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\CyclomaticComplexityRule.java
Starting at line 189 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\CyclomaticComplexityRule.java

    int boolCompWhile = NPathComplexityRule.sumExpressionComplexity( node.getFirstChildOfType( ASTExpression.class ) );
    // While statement always has a complexity of at least 1
    boolCompWhile++;

    entryStack.peek().bumpDecisionPoints( boolCompWhile );
    super.visit( node, data );
=====================================================================
Found a 3 line (36 tokens) duplication in the following files: 
Starting at line 95 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\NPathComplexityRule.java
Starting at line 176 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NPathComplexityRule.java

        List<JavaNode> statementChildren = new ArrayList<JavaNode>();
        for (int i = 0; i < node.jjtGetNumChildren(); i++) {
            if (node.jjtGetChild(i).getClass() == ASTStatement.class) {
=====================================================================
Found a 7 line (36 tokens) duplication in the following files: 
Starting at line 25 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\NcssMethodCountRule.java
Starting at line 25 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NcssMethodCountRule.java

    public Object visit(ASTMethodDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object[] getViolationParameters(DataPoint point) {
        return new String[] { ((ASTMethodDeclaration) point.getNode()).getMethodName(),
=====================================================================
Found a 7 line (36 tokens) duplication in the following files: 
Starting at line 28 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\AvoidDeeplyNestedIfStmtsRule.java
Starting at line 30 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\rule\basic\AvoidDeeplyNestedIfStmtsRule.java

    public Object visit(ASTCompilationUnit node, Object data) {
        depth = 0;
        depthLimit = getProperty(PROBLEM_DEPTH_DESCRIPTOR);
        return super.visit(node, data);
    }

    public Object visit(ASTIfStatement node, Object data) {
=====================================================================
Found a 3 line (36 tokens) duplication in the following files: 
Starting at line 39 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\ImmutableFieldRule.java
Starting at line 29 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\unusedcode\UnusedPrivateFieldRule.java

    @Override
    public Object visit(ASTClassOrInterfaceDeclaration node, Object data) {
        Map<VariableNameDeclaration, List<NameOccurrence>> vars = node.getScope().getDeclarations(VariableNameDeclaration.class);
=====================================================================
Found a 8 line (36 tokens) duplication in the following files: 
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\naming\AvoidFieldNameMatchingTypeNameRule.java
Starting at line 19 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\optimizations\AbstractOptimizationRule.java

public class AvoidFieldNameMatchingTypeNameRule extends AbstractJavaRule {

    public Object visit(ASTClassOrInterfaceDeclaration node, Object data) {
        if (node.isInterface()) {
            return data;
        }
        return super.visit(node, data);
    }
=====================================================================
Found a 6 line (36 tokens) duplication in the following files: 
Starting at line 47 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\Search.java
Starting at line 49 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\Search.java

                System.out.println(" moving up from " + scope + " to " + scope.getParent());
            }
            return searchUpward(nameOccurrence, scope.getParent());
        }
        if (scope.contains(nameOccurrence)) {
            if (TRACE) {
=====================================================================
Found a 5 line (36 tokens) duplication in the following files: 
Starting at line 234 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\ClassTypeResolver.java
Starting at line 269 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\ClassTypeResolver.java

				if (name.indexOf('.') != -1) {
					name = name.substring(0, name.indexOf('.'));
				}
				populateType(node, name);
			}
=====================================================================
Found a 9 line (36 tokens) duplication in the following files: 
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTArguments.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTDatatype.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTFormalParameter.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTInput.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTMethodDeclaration.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTMethodDeclarator.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTName.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTPackageBody.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTPackageSpecification.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTPrimaryPrefix.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTPrimarySuffix.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTProgramUnit.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTTriggerTimingPointSection.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTTriggerUnit.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTTypeMethod.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTTypeSpecification.java
Starting at line 20 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTVariableOrConstantDeclaratorId.java

  public ASTArguments(PLSQLParser p, int id) {
    super(p, id);
  }


  /** Accept the visitor. **/
  public Object jjtAccept(PLSQLParserVisitor visitor, Object data) {
    return visitor.visit(this, data);
  }
=====================================================================
Found a 7 line (36 tokens) duplication in the following files: 
Starting at line 131 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 141 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 151 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 161 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 173 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java

     public Object visit(ASTCloseStatement node, Object data) {
        if (!(data instanceof Structure)) {
            return data;
        }
        Structure dataFlow = (Structure) data;
        dataFlow.createNewNode(node);
        LOGGER.finest("createNewNode ASTCloseStatement: line " + node.getBeginLine() +", column " + node.getBeginColumn());
=====================================================================
Found a 8 line (36 tokens) duplication in the following files: 
Starting at line 50 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NPathComplexityRule.java
Starting at line 65 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NPathComplexityRule.java

        LOGGER.entering(CLASS_NAME,"complexityMultipleOf(SimpleNode)");

	int npath = npathStart;
	PLSQLNode n;

	for (int i = 0; i < node.jjtGetNumChildren(); i++) {
	    n = (PLSQLNode) node.jjtGetChild(i);
	    npath *= (Integer) n.jjtAccept(this, data);
=====================================================================
Found a 8 line (36 tokens) duplication in the following files: 
Starting at line 23 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\LocalScope.java
Starting at line 37 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\MethodScope.java

            nameOccurrences.add(occurrence);
            Node n = occurrence.getLocation();
            if (n instanceof ASTName) {
                ((ASTName) n).setNameDeclaration(decl);
            } // TODO what to do with PrimarySuffix case?
        }
        return decl;
    }
=====================================================================
Found a 4 line (36 tokens) duplication in the following files: 
Starting at line 374 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\AbstractRule.java
Starting at line 402 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\AbstractRule.java

	 public void addViolation(Object data, Node node, Object[] args) {
		 RuleContext ruleContext = (RuleContext) data;
		 ruleContext.getLanguageVersion().getLanguageVersionHandler().getRuleViolationFactory().addViolation(
				 ruleContext, this, node, this.getMessage(), args);
=====================================================================
Found a 5 line (36 tokens) duplication in the following files: 
Starting at line 77 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\IDEAJRenderer.java
Starting at line 41 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\TextRenderer.java

		StringBuilder buf = new StringBuilder();
		while (violations.hasNext()) {
			buf.setLength(0);
			RuleViolation rv = violations.next();
			buf.append(rv.getDescription()).append(PMD.EOL);
=====================================================================
Found a 4 line (35 tokens) duplication in the following files: 
Starting at line 630 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\GUI.java
Starting at line 633 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\GUI.java

        } catch (IOException t) {
            t.printStackTrace();
            JOptionPane.showMessageDialog(frame, "Halted due to " + t.getClass().getName() + "; " + t.getMessage());
        } catch (RuntimeException t) {
=====================================================================
Found a 7 line (35 tokens) duplication in the following files: 
Starting at line 27 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\Match.java
Starting at line 45 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\Match.java

    public static final Comparator<Match> LINES_COMPARATOR = new Comparator<Match>() {
    	public int compare(Match ma, Match mb) {
    		return mb.getLineCount() - ma.getLineCount();
    	}
    };
    
    public static final Comparator<Match> LABEL_COMPARATOR = new Comparator<Match>() {
=====================================================================
Found a 9 line (35 tokens) duplication in the following files: 
Starting at line 45 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\dcd\asm\TypeSignatureVisitor.java
Starting at line 74 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\dcd\graph\UsageGraphBuilder.java

    private final PrintVisitor p;
    protected void println(String s) {
        p.println(s);
    }
    protected void printlnIndent(String s) {
        p.printlnIndent(s);
    }

    public TypeSignatureVisitor() {
=====================================================================
Found a 8 line (35 tokens) duplication in the following files: 
Starting at line 73 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\dcd\graph\UsageGraphBuilder.java
Starting at line 195 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\dcd\graph\UsageGraphBuilder.java

	class MyClassVisitor extends ClassVisitor {
	    private final PrintVisitor p;
	    protected void println(String s) {
	        p.println(s);
	    }
	    protected void printlnIndent(String s) {
	        p.printlnIndent(s);
	    }
=====================================================================
Found a 9 line (35 tokens) duplication in the following files: 
Starting at line 546 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\CandidateDAO.java
Starting at line 837 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\CandidateDAO.java

				stmt.close();
			} catch (SQLException e) {

				log.error( "failed!", e );;
			}
		}

		if (toCreate == true && result == -1) {
			this.addPackage(candidate);
=====================================================================
Found a 7 line (35 tokens) duplication in the following files: 
Starting at line 59 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\AbstractJavaHandler.java
Starting at line 53 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\PLSQLHandler.java

    }

    @Override
    public VisitorStarter getDataFlowFacade() {
	return new VisitorStarter() {
	    public void start(Node rootNode) {
		new DataFlowFacade().initializeWith(getDataFlowHandler(), (ASTCompilationUnit) rootNode);
=====================================================================
Found a 8 line (35 tokens) duplication in the following files: 
Starting at line 19 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\Java13Parser.java
Starting at line 19 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\Java14Parser.java
Starting at line 19 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\Java15Parser.java
Starting at line 17 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\Java16Parser.java
Starting at line 17 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\Java17Parser.java
Starting at line 17 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\Java18Parser.java

    public Java13Parser(ParserOptions parserOptions) {
	super(parserOptions);
    }

    @Override
    protected JavaParser createJavaParser(Reader source) throws ParseException {
	JavaParser javaParser = super.createJavaParser(source);
	javaParser.setJdkVersion(3);
=====================================================================
Found a 6 line (35 tokens) duplication in the following files: 
Starting at line 86 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 96 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java

        LOGGER.finest("createNewNode ASTStatementExpression: line " + node.getBeginLine() +", column " + node.getBeginColumn());
        dataFlow.createNewNode(node);
        return super.visit(node, data);
    }

    public Object visit(ASTVariableDeclarator node, Object data) {
=====================================================================
Found a 6 line (35 tokens) duplication in the following files: 
Starting at line 290 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 611 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java

        boolean hasForUpdateNode = false;

        for (int i = 0; i < parent.jjtGetNumChildren(); i++) {
            if (parent.jjtGetChild(i) instanceof ASTExpression) {
                hasExpressionChild = true;
            } else if (parent.jjtGetChild(i) instanceof ASTForUpdate) {
=====================================================================
Found a 7 line (35 tokens) duplication in the following files: 
Starting at line 31 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\JavaRuleChainVisitor.java
Starting at line 31 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\rule\JspRuleChainVisitor.java

			javaParserVistor.visit((ASTCompilationUnit)nodes.get(i), ctx);
		}
	}

	protected void visit(Rule rule, Node node, RuleContext ctx) {
		// Rule better either be a JavaParserVisitor, or a XPathRule
		if (rule instanceof XPathRule) {
=====================================================================
Found a 5 line (35 tokens) duplication in the following files: 
Starting at line 77 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\basic\BooleanInstantiationRule.java
Starting at line 41 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\optimizations\UnnecessaryWrapperObjectCreationRule.java
Starting at line 22 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\strings\UselessStringValueOfRule.java

    	if ( ! customBoolean )
    	{
	        if (node.jjtGetNumChildren() == 0 || !(node.jjtGetChild(0) instanceof ASTName)) {
	            return super.visit(node, data);
	        }
=====================================================================
Found a 6 line (35 tokens) duplication in the following files: 
Starting at line 61 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\AbstractNcssCountRule.java
Starting at line 70 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\AbstractNcssCountRule.java

            numNodes++;
            DataPoint point = new DataPoint();
            point.setNode(node);
            point.setScore(1.0 * numNodes);
            point.setMessage(getMessage());
            addDataPoint(point);
=====================================================================
Found a 7 line (35 tokens) duplication in the following files: 
Starting at line 80 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\NcssTypeCountRule.java
Starting at line 53 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\design\ExcessiveLengthRule.java

    }

    @Override
    public Object[] getViolationParameters(DataPoint point) {
        return new String[] { String.valueOf((int) point.getScore()) };
    }
}
=====================================================================
Found a 6 line (35 tokens) duplication in the following files: 
Starting at line 94 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\comments\AbstractCommentRule.java
Starting at line 124 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\comments\AbstractCommentRule.java

	private static String multiLinesIn(String comment) {

		String[] lines = comment.split("\n");
		List<String> filteredLines = new ArrayList<String>(lines.length);

		for (String rawLine : lines) {
=====================================================================
Found a 5 line (35 tokens) duplication in the following files: 
Starting at line 33 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\ExcessiveNodeCountRule.java
Starting at line 33 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\design\ExcessiveNodeCountRule.java

    public Object visit(JavaNode node, Object data) {
	int numNodes = 0;

	for (int i = 0; i < node.jjtGetNumChildren(); i++) {
	    Integer treeSize = (Integer) ((JavaNode) node.jjtGetChild(i)).jjtAccept(this, data);
=====================================================================
Found a 3 line (35 tokens) duplication in the following files: 
Starting at line 78 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\PreserveStackTraceRule.java
Starting at line 85 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\unusedcode\UnusedFormalParameterRule.java

                        Map<VariableNameDeclaration, List<NameOccurrence>> vars = ((ASTName) child).getScope().getDeclarations(VariableNameDeclaration.class);
                        for (Map.Entry<VariableNameDeclaration, List<NameOccurrence>> entry : vars.entrySet()) {
                            VariableNameDeclaration decl = entry.getKey();
=====================================================================
Found a 6 line (35 tokens) duplication in the following files: 
Starting at line 47 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\NameFinder.java
Starting at line 51 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\NameFinder.java

                add(new JavaNameOccurrence(grandchild, st.nextToken()));
            }
        }
        if (node instanceof ASTPrimarySuffix) {
            ASTPrimarySuffix suffix = (ASTPrimarySuffix) node;
            if (suffix.isArguments()) {
=====================================================================
Found a 7 line (35 tokens) duplication in the following files: 
Starting at line 9 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\SymbolFacade.java
Starting at line 9 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\SymbolFacade.java

    public void initializeWith(ASTCompilationUnit node) {
        ScopeAndDeclarationFinder sc = new ScopeAndDeclarationFinder();
        node.jjtAccept(sc, null);
        OccurrenceFinder of = new OccurrenceFinder();
        node.jjtAccept(of, null);
    }
}
=====================================================================
Found a 6 line (35 tokens) duplication in the following files: 
Starting at line 111 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 122 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java

            LOGGER.finest("immediate return ASTSqlStatement: line " + node.getBeginLine() +", column " + node.getBeginColumn());
            return data;
        }
        Structure dataFlow = (Structure) data;
        dataFlow.createNewNode(node);
        LOGGER.finest("createNewNode ASTSqlStatement: line " + node.getBeginLine() +", column " + node.getBeginColumn());
=====================================================================
Found a 7 line (35 tokens) duplication in the following files: 
Starting at line 48 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\AbstractNcssCountRule.java
Starting at line 30 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\design\ExcessiveNodeCountRule.java

    }

    @Override
    public Object visit(PLSQLNode node, Object data) {
	int numNodes = 0;

	for (int i = 0; i < node.jjtGetNumChildren(); i++) {
=====================================================================
Found a 7 line (35 tokens) duplication in the following files: 
Starting at line 54 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\processor\MonoThreadProcessor.java
Starting at line 70 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\processor\PmdRunnable.java

			for (Renderer r : renderers) {
				r.startFileAnalysis(dataSource);
			}

			try {
				InputStream stream = new BufferedInputStream(dataSource.getInputStream());
				ctx.setLanguageVersion(null);
=====================================================================
Found a 4 line (35 tokens) duplication in the following files: 
Starting at line 36 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\EmacsRenderer.java
Starting at line 45 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\TextRenderer.java

		    buf.setLength(0);
		    buf.append(rv.getFilename());
		    buf.append(':').append(Integer.toString(rv.getBeginLine()));
		    buf.append(": ").append(rv.getDescription()).append(EOL);
=====================================================================
Found a 4 line (35 tokens) duplication in the following files: 
Starting at line 52 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\VBHTMLRenderer.java
Starting at line 68 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\XMLRenderer.java

		    sb.setLength(0);
		    RuleViolation rv = violations.next();
			if (!rv.getFilename().equals(filename)) { // New File
				if (filename != null) {
=====================================================================
Found a 6 line (35 tokens) duplication in the following files: 
Starting at line 135 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\database\DBMSMetadata.java
Starting at line 173 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\database\DBMSMetadata.java

    Class.forName(driverClass);

    Properties mergedProperties = dbURI.getDbType().getProperties() ;
    Map<String,String> dbURIParameters = dbURI.getParameters();
    mergedProperties.putAll(dbURIParameters) ;
    mergedProperties.put("user", user) ;
=====================================================================
Found a 8 line (34 tokens) duplication in the following files: 
Starting at line 167 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cli\PMDCommandLineInterface.java
Starting at line 25 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\CPDCommandLineInterface.java

	public static void setStatusCodeOrExit(int status) {
		if ( isExitAfterRunSet() )
			System.exit(status);
		else
			setStatusCode(status);
	}

    private static boolean isExitAfterRunSet() {
=====================================================================
Found a 7 line (34 tokens) duplication in the following files: 
Starting at line 45 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\dcd\asm\TypeSignatureVisitor.java
Starting at line 196 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\dcd\graph\UsageGraphBuilder.java

    private final PrintVisitor p;
    protected void println(String s) {
        p.println(s);
    }
    protected void printlnIndent(String s) {
        p.printlnIndent(s);
    }
=====================================================================
Found a 4 line (34 tokens) duplication in the following files: 
Starting at line 258 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ast\AbstractNode.java
Starting at line 315 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ast\AbstractNode.java

	int n = jjtGetNumChildren();
	for (int i = 0; i < n; i++) {
	    Node child = jjtGetChild(i);
	    if (child.getClass() == targetType) {
=====================================================================
Found a 13 line (34 tokens) duplication in the following files: 
Starting at line 898 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\CandidateDAO.java
Starting at line 921 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\CandidateDAO.java

					result = candidate.getAttributeNumber();
				}
				rs.close();
				stmt.close();
			} catch (SQLException e) {

				log.error( "failed!", e );;
			}
		}
		return result;
	}

	private int searchParameter(Candidate candidate) {
=====================================================================
Found a 13 line (34 tokens) duplication in the following files: 
Starting at line 67 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\initialization\FirstTimeDBInit.java
Starting at line 259 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\initialization\FirstTimeDBInit.java

					+ " VALUES ('unknown',-1,-1,-1,-1,-1);";

			stmt.executeUpdate(sql);
			stmt.close();
			connection.commit();

		} catch (SQLException e) {

			e.printStackTrace();
		}
	}

	private void createPackageTable() {
=====================================================================
Found a 5 line (34 tokens) duplication in the following files: 
Starting at line 165 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\DumpFacade.java
Starting at line 180 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\DumpFacade.java

			if (((ASTSwitchCase) node).isDefault()) {
				extras.add("default");
			}
		} else if (node instanceof ASTTryStatement) {
			if (((ASTTryStatement) node).hasCatch()) {
=====================================================================
Found a 7 line (34 tokens) duplication in the following files: 
Starting at line 69 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\rule\AbstractEcmascriptRule.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\rule\EcmascriptXPathRule.java

public abstract class AbstractEcmascriptRule extends AbstractRule implements EcmascriptParserVisitor, ImmutableLanguage {

    private static final BooleanProperty RECORDING_COMMENTS_DESCRIPTOR = EcmascriptParserOptions.RECORDING_COMMENTS_DESCRIPTOR;
    private static final BooleanProperty RECORDING_LOCAL_JSDOC_COMMENTS_DESCRIPTOR = EcmascriptParserOptions.RECORDING_LOCAL_JSDOC_COMMENTS_DESCRIPTOR;
    private static final EnumeratedProperty<EcmascriptParserOptions.Version> RHINO_LANGUAGE_VERSION = EcmascriptParserOptions.RHINO_LANGUAGE_VERSION;

    public AbstractEcmascriptRule() {
=====================================================================
Found a 11 line (34 tokens) duplication in the following files: 
Starting at line 19 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\JavaTokenManager.java
Starting at line 19 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\JspTokenManager.java
Starting at line 19 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\PLSQLTokenManager.java

	tokenManager = new JavaParserTokenManager(new JavaCharStream(source));
    }

    public Object getNextToken() {
	return tokenManager.getNextToken();
    }

    public void setFileName(String fileName) {
	tokenManager.setFileName(fileName);
    }
}
=====================================================================
Found a 10 line (34 tokens) duplication in the following files: 
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTArguments.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTArguments.java

        super(p, id);
    }


    public int getArgumentCount() {
        if (this.jjtGetNumChildren() == 0) {
            return 0;
        }
        return this.jjtGetChild(0).jjtGetNumChildren();
    }
=====================================================================
Found a 10 line (34 tokens) duplication in the following files: 
Starting at line 22 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTArguments.java
Starting at line 19 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTMethodDeclarator.java

        return this.jjtGetChild(0).jjtGetNumChildren();
    }

    /**
     * Accept the visitor. *
     */
    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }
}
=====================================================================
Found a 8 line (34 tokens) duplication in the following files: 
Starting at line 101 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 167 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 493 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java

    public Object visit(ASTExpression node, Object data) {
        if (!(data instanceof Structure)) {
            return data;
        }
        Structure dataFlow = (Structure) data;

        // TODO what about throw stmts?
        if (node.jjtGetParent() instanceof ASTIfStatement) {
=====================================================================
Found a 6 line (34 tokens) duplication in the following files: 
Starting at line 133 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 210 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 369 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java

    public Object visit(ASTForInit node, Object data) {
        if (!(data instanceof Structure)) {
            return data;
        }
        Structure dataFlow = (Structure) data;
        super.visit(node, data);
=====================================================================
Found a 2 line (34 tokens) duplication in the following files: 
Starting at line 231 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 420 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java

            dataFlow.pushOnStack(NodeType.CASE_LAST_STATEMENT, dataFlow.getLast());
            LOGGER.finest("pushOnStack CASE_LAST_STATEMENT: line " + node.getBeginLine() +", column " + node.getBeginColumn());
=====================================================================
Found a 8 line (34 tokens) duplication in the following files: 
Starting at line 26 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\NcssConstructorCountRule.java
Starting at line 78 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\NcssTypeCountRule.java

    public Object visit(ASTExplicitConstructorInvocation node, Object data) {
        return NumericConstants.ONE;
    }

    @Override
    public Object[] getViolationParameters(DataPoint point) {
        // TODO need to put class name or constructor ID in string
        return new String[] { String.valueOf(((ASTConstructorDeclaration) point.getNode()).getParameterCount()),
=====================================================================
Found a 2 line (34 tokens) duplication in the following files: 
Starting at line 25 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\AssignmentToNonFinalStaticRule.java
Starting at line 40 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\ImmutableFieldRule.java

    public Object visit(ASTClassOrInterfaceDeclaration node, Object data) {
        Map<VariableNameDeclaration, List<NameOccurrence>> vars = node.getScope().getDeclarations(VariableNameDeclaration.class);
=====================================================================
Found a 3 line (34 tokens) duplication in the following files: 
Starting at line 26 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\AssignmentToNonFinalStaticRule.java
Starting at line 78 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\PreserveStackTraceRule.java
Starting at line 43 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\UnnecessaryLocalBeforeReturnRule.java
Starting at line 85 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\unusedcode\UnusedFormalParameterRule.java
Starting at line 31 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\unusedcode\UnusedPrivateFieldRule.java

        Map<VariableNameDeclaration, List<NameOccurrence>> vars = node.getScope().getDeclarations(VariableNameDeclaration.class);
        for (Map.Entry<VariableNameDeclaration, List<NameOccurrence>> entry: vars.entrySet()) {
            VariableNameDeclaration decl = entry.getKey();
=====================================================================
Found a 4 line (34 tokens) duplication in the following files: 
Starting at line 25 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\AbstractJavaScope.java
Starting at line 48 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\ClassScope.java
Starting at line 37 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\LocalScope.java
Starting at line 47 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\MethodScope.java

    protected void checkForDuplicatedNameDeclaration(NameDeclaration declaration) {
        if (declaration instanceof VariableNameDeclaration && getDeclarations().keySet().contains(declaration)) {
            throw new RuntimeException(declaration + " is already in the symbol table");
        }
=====================================================================
Found a 6 line (34 tokens) duplication in the following files: 
Starting at line 68 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\ClassScope.java
Starting at line 88 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\ClassScope.java
Starting at line 29 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\LocalScope.java

                nameOccurrences.add(javaOccurrence);
                Node n = javaOccurrence.getLocation();
                if (n instanceof ASTName) {
                    ((ASTName) n).setNameDeclaration(decl);
                } // TODO what to do with PrimarySuffix case?
            }
=====================================================================
Found a 14 line (34 tokens) duplication in the following files: 
Starting at line 103 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\ScopeAndDeclarationFinder.java
Starting at line 99 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\ScopeAndDeclarationFinder.java

	if (node instanceof ASTClassOrInterfaceBodyDeclaration) {
	    addScope(new ClassScope(), node);
	} else {
	    addScope(new ClassScope(node.getImage()), node);
	}
    }

    /**
     * Creates a new global scope for an AST node.
     * The new scope is stored on the scope stack.
     *
     * @param node the AST node for which the scope has to be created.
     */
    private void createSourceFileScope(ASTCompilationUnit node) {
=====================================================================
Found a 8 line (34 tokens) duplication in the following files: 
Starting at line 139 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\ScopeAndDeclarationFinder.java
Starting at line 136 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\ScopeAndDeclarationFinder.java
Starting at line 145 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\ScopeAndDeclarationFinder.java
Starting at line 155 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\ScopeAndDeclarationFinder.java
Starting at line 164 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\ScopeAndDeclarationFinder.java

	Scope s = ((JavaNode)node.jjtGetParent()).getScope();
	s.addDeclaration(new ClassNameDeclaration(node));
	cont(node);
	return data;
    }

    @Override
    public Object visit(ASTEnumDeclaration node, Object data) {
=====================================================================
Found a 6 line (34 tokens) duplication in the following files: 
Starting at line 65 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\ClassScope.java
Starting at line 78 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\ClassScope.java
Starting at line 23 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\LocalScope.java

                nameOccurrences.add(occurrence);
                Node n = occurrence.getLocation();
                if (n instanceof ASTName) {
                    ((ASTName) n).setNameDeclaration(decl);
                } // TODO what to do with PrimarySuffix case?
            }
=====================================================================
Found a 5 line (34 tokens) duplication in the following files: 
Starting at line 33 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\EmacsRenderer.java
Starting at line 44 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\TextPadRenderer.java

		StringBuilder buf = new StringBuilder();
		while (violations.hasNext()) {
		    RuleViolation rv = violations.next();
		    buf.setLength(0);
		    buf.append(rv.getFilename());
=====================================================================
Found a 5 line (33 tokens) duplication in the following files: 
Starting at line 360 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\RuleSetFactory.java
Starting at line 372 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\RuleSetFactory.java

						+ "' for Language '" + language.getTerseName() + "' for Rule " + rule.getName()
						+ "; supported Language Versions are: "
						+ LanguageVersion.commaSeparatedTerseNames(language.getVersions()));
			}
			rule.setMinimumLanguageVersion(minimumLanguageVersion);
=====================================================================
Found a 6 line (33 tokens) duplication in the following files: 
Starting at line 62 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\CsTokenizer.java
Starting at line 85 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\CsTokenizer.java

							tokenEntries.add(new TokenEntry(String.valueOf(c)+String.valueOf(c)+"=", sourceCode.getFileName(), line));
							ic = reader.read();
						}
						else
						{
							tokenEntries.add(new TokenEntry(String.valueOf(c)+String.valueOf(c), sourceCode.getFileName(), line));
=====================================================================
Found a 20 line (33 tokens) duplication in the following files: 
Starting at line 236 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ast\xpath\DocumentNavigator.java
Starting at line 278 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ast\xpath\DocumentNavigator.java

			n = getNextSibling(node);
		    }
		    if (n == null) {
			return getFirstNode(node.jjtGetParent());
		    } else {
			return n;
		    }
		}
	    }
	};
    }

    /**
     * Get an iterator over all preceding nodes, depth-first.
     *
     * @param contextNode The context node for the preceding axis.
     * @return A possibly-empty iterator (not null).
     */
    @Override
    public Iterator<Node> getPrecedingAxisIterator(Object contextNode) {
=====================================================================
Found a 7 line (33 tokens) duplication in the following files: 
Starting at line 47 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\Ecmascript3Handler.java
Starting at line 44 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\JspHandler.java
Starting at line 42 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\VmHandler.java
Starting at line 53 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\xml\XmlHandler.java

	return new Ecmascript3Parser(parserOptions);
    }

    @Override
    public VisitorStarter getDumpFacade(final Writer writer, final String prefix, final boolean recurse) {
	return new VisitorStarter() {
	    public void start(Node rootNode) {
=====================================================================
Found a 7 line (33 tokens) duplication in the following files: 
Starting at line 24 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\rule\EcmascriptRuleViolationFactory.java
Starting at line 24 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\rule\JspRuleViolationFactory.java
Starting at line 24 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\xml\rule\XmlRuleViolationFactory.java

	return new ParametricRuleViolation<EcmascriptNode>(rule, ruleContext, (EcmascriptNode) node, message);
    }
    
    protected RuleViolation createRuleViolation(Rule rule, RuleContext ruleContext, Node node, String message, int beginLine, int endLine) {
		return null;	// FIXME
	}
}
=====================================================================
Found a 6 line (33 tokens) duplication in the following files: 
Starting at line 53 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\basic\DoubleCheckedLockingRule.java
Starting at line 19 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\controversial\OnlyOneReturnRule.java
Starting at line 62 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\coupling\CouplingBetweenObjectsRule.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\junit\JUnitTestsShouldIncludeAssertRule.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\naming\AvoidFieldNameMatchingMethodNameRule.java
Starting at line 12 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\naming\AvoidFieldNameMatchingTypeNameRule.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\optimizations\AbstractOptimizationRule.java
Starting at line 36 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\sunsecure\ArrayIsStoredDirectlyRule.java
Starting at line 26 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\sunsecure\MethodReturnsInternalArrayRule.java

    public Object visit(ASTClassOrInterfaceDeclaration node, Object data) {
        if (node.isInterface()) {
            return data;
        }
        return super.visit(node, data);
    }
=====================================================================
Found a 7 line (33 tokens) duplication in the following files: 
Starting at line 215 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\CyclomaticComplexityRule.java
Starting at line 298 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\CyclomaticComplexityRule.java
Starting at line 347 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\CyclomaticComplexityRule.java
Starting at line 388 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\CyclomaticComplexityRule.java

	    Entry classEntry = entryStack.peek();
	    classEntry.methodCount++;
	    classEntry.bumpDecisionPoints( methodDecisionPoints );

	    if ( methodDecisionPoints > classEntry.highestDecisionPoints ) {
	      classEntry.highestDecisionPoints = methodDecisionPoints;
	    }
=====================================================================
Found a 5 line (33 tokens) duplication in the following files: 
Starting at line 42 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\ExcessiveNodeCountRule.java
Starting at line 71 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\AbstractNcssCountRule.java
Starting at line 68 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NcssObjectCountRule.java
Starting at line 42 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\design\ExcessiveNodeCountRule.java

	    DataPoint point = new DataPoint();
	    point.setNode(node);
	    point.setScore(1.0 * numNodes);
	    point.setMessage(getMessage());
	    addDataPoint(point);
=====================================================================
Found a 6 line (33 tokens) duplication in the following files: 
Starting at line 68 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\ClassScope.java
Starting at line 88 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\ClassScope.java
Starting at line 34 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\MethodScope.java

                nameOccurrences.add(javaOccurrence);
                Node n = javaOccurrence.getLocation();
                if (n instanceof ASTName) {
                    ((ASTName) n).setNameDeclaration(decl);
                } // TODO what to do with PrimarySuffix case?
            }
=====================================================================
Found a 7 line (33 tokens) duplication in the following files: 
Starting at line 69 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\ClassScope.java
Starting at line 66 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\ClassScope.java

                Node n = javaOccurrence.getLocation();
                if (n instanceof ASTName) {
                    ((ASTName) n).setNameDeclaration(decl);
                } // TODO what to do with PrimarySuffix case?
            }

        } else if (decl != null && !javaOccurrence.isThisOrSuper()) {
=====================================================================
Found a 12 line (33 tokens) duplication in the following files: 
Starting at line 167 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\ScopeAndDeclarationFinder.java
Starting at line 207 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\ScopeAndDeclarationFinder.java

	return data;
    }

    @Override
    public Object visit(ASTBlock node, Object data) {
	createLocalScope(node);
	cont(node);
	return data;
    }

    @Override
    public Object visit(ASTCatchStatement node, Object data) {
=====================================================================
Found a 7 line (33 tokens) duplication in the following files: 
Starting at line 186 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 291 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java

            LOGGER.finest("immediate return ASTExpression: line " + node.getBeginLine() +", column " + node.getBeginColumn());
            return data;
        }
        Structure dataFlow = (Structure) data;

        //The equivalent of an ASTExpression is an Expression whose parent is an UnLabelledStatement
        if (node.jjtGetParent() instanceof ASTUnlabelledStatement) {
=====================================================================
Found a 6 line (33 tokens) duplication in the following files: 
Starting at line 65 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\ClassScope.java
Starting at line 78 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\ClassScope.java
Starting at line 37 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\MethodScope.java

                nameOccurrences.add(occurrence);
                Node n = occurrence.getLocation();
                if (n instanceof ASTName) {
                    ((ASTName) n).setNameDeclaration(decl);
                } // TODO what to do with PrimarySuffix case?
            }
=====================================================================
Found a 4 line (33 tokens) duplication in the following files: 
Starting at line 383 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\AbstractRule.java
Starting at line 392 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\AbstractRule.java
Starting at line 402 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\AbstractRule.java

	 public void addViolationWithMessage(Object data, Node node, String message) {
		 RuleContext ruleContext = (RuleContext) data;
		 ruleContext.getLanguageVersion().getLanguageVersionHandler().getRuleViolationFactory().addViolation(
				 ruleContext, this, node, message, null);
=====================================================================
Found a 5 line (33 tokens) duplication in the following files: 
Starting at line 30 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\AbstractRuleViolationFactory.java
Starting at line 37 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\AbstractRuleViolationFactory.java

	public void addViolation(RuleContext ruleContext, Rule rule, Node node,	String message, Object[] args) {
		
		String formattedMessage = cleanup(message, args);
		
		ruleContext.getReport().addRuleViolation(createRuleViolation(rule, ruleContext, node, formattedMessage));
=====================================================================
Found a 4 line (32 tokens) duplication in the following files: 
Starting at line 204 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\RuleSetFactory.java
Starting at line 403 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\RuleSetFactory.java
Starting at line 544 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\RuleSetFactory.java

			NodeList nodeList = ruleSetElement.getChildNodes();
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node node = nodeList.item(i);
				if (node.getNodeType() == Node.ELEMENT_NODE) {
=====================================================================
Found a 5 line (32 tokens) duplication in the following files: 
Starting at line 74 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\RuleSetWriter.java
Starting at line 1008 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\designer\Designer.java

		    Transformer transformer = transformerFactory.newTransformer();
		    transformer.setOutputProperty(OutputKeys.METHOD, "xml");
		    // This is as close to pretty printing as we'll get using standard Java APIs.
		    transformer.setOutputProperty(OutputKeys.INDENT, "yes");
		    transformer.setOutputProperty(OutputKeys.ENCODING, "UTF-8");
=====================================================================
Found a 13 line (32 tokens) duplication in the following files: 
Starting at line 106 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\dcd\graph\UsageGraphBuilder.java
Starting at line 223 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\dcd\graph\UsageGraphBuilder.java

				printlnIndent("visible: " + visible);
			}
			return null;
		}

		public void visitAttribute(Attribute attr) {
			if (TRACE) {
				println("visitAttribute:");
				printlnIndent("attr: " + attr);
			}
		}

		public void visitEnd() {
=====================================================================
Found a 11 line (32 tokens) duplication in the following files: 
Starting at line 19 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\cpp\CppTokenManager.java
Starting at line 19 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\JavaTokenManager.java
Starting at line 19 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\JspTokenManager.java
Starting at line 19 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\PLSQLTokenManager.java

	tokenManager = new CppParserTokenManager(new SimpleCharStream(new ContinuationReader(source)));
    }

    public Object getNextToken() {
	return tokenManager.getNextToken();
    }

    public void setFileName(String fileName) {
	tokenManager.setFileName(fileName);
    }
}
=====================================================================
Found a 5 line (32 tokens) duplication in the following files: 
Starting at line 72 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dfa\Structure.java
Starting at line 78 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dfa\Structure.java

            LOGGER.finest("continueBreakReturnStack: line " + node.getNode().getBeginLine() 
                          + ", column " + node.getNode().getBeginColumn() 
                          +" - " + node.toString()
                         );
	} else {
=====================================================================
Found a 4 line (32 tokens) duplication in the following files: 
Starting at line 152 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dfa\pathfinder\DAAPathFinder.java
Starting at line 187 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dfa\pathfinder\DAAPathFinder.java

            while (true) {
                if (level.getChildCount() != 0) {
                    PathElement ref = this.isNodeInLevel(level);
                    if (ref != null) {
=====================================================================
Found a 7 line (32 tokens) duplication in the following files: 
Starting at line 539 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\DesignPatternDetection.java
Starting at line 168 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\coupling\LawOfDemeterRule.java
Starting at line 186 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\coupling\LawOfDemeterRule.java

		if (hasRealPrefix(expr)) {
			List<ASTPrimarySuffix> suffixes = expr
					.findDescendantsOfType(ASTPrimarySuffix.class);
			// pr�fe jeden Knoten vom Type Suffix auf Argument. Sobald einer
			// gefunden liefere True zur�ck
			for (ASTPrimarySuffix suffix : suffixes) {
				if (suffix.isArguments()) {
=====================================================================
Found a 8 line (32 tokens) duplication in the following files: 
Starting at line 790 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\CandidateDAO.java
Starting at line 824 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\CandidateDAO.java

							&& candidate.getMethodNumber() >= 0) {
						sql = "UPDATE attributes set method_id ="
								+ candidate.getMethodNumber()
								+ " where name = '"
								+ candidate.getAttributeName()
								+ "' AND class_id = "
								+ candidate.getClassNumber()
								+ " AND classtype_id = "
=====================================================================
Found a 11 line (32 tokens) duplication in the following files: 
Starting at line 69 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\initialization\FirstTimeDBInit.java
Starting at line 99 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\initialization\FirstTimeDBInit.java
Starting at line 200 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\initialization\FirstTimeDBInit.java
Starting at line 230 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\initialization\FirstTimeDBInit.java
Starting at line 261 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\initialization\FirstTimeDBInit.java

			stmt.executeUpdate(sql);
			stmt.close();
			connection.commit();

		} catch (SQLException e) {

			e.printStackTrace();
		}
	}

	private void createPackageTable() {
=====================================================================
Found a 10 line (32 tokens) duplication in the following files: 
Starting at line 126 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\initialization\FirstTimeDBInit.java
Starting at line 173 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\initialization\FirstTimeDBInit.java

			stmt.executeUpdate(sql2);
			stmt.close();
			connection.commit();
		} catch (SQLException e) {

			e.printStackTrace();
		}
	}

	private void createClassExtensionTable() {
=====================================================================
Found a 10 line (32 tokens) duplication in the following files: 
Starting at line 47 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\AbstractJavaParser.java
Starting at line 43 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\PLSQLParser.java

	return parser;
    }

    public boolean canParse() {
	return true;
    }

    public Node parse(String fileName, Reader source) throws ParseException {
	AbstractTokenManager.setFileName(fileName);
	return createJavaParser(source).CompilationUnit();
=====================================================================
Found a 7 line (32 tokens) duplication in the following files: 
Starting at line 33 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTMethodDeclaration.java
Starting at line 32 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTProgramUnit.java

    public String getMethodName() {
        ASTMethodDeclarator md = getFirstChildOfType(ASTMethodDeclarator.class);
        if (md != null) {
	    return md.getImage();
	}
        return null;
    }
=====================================================================
Found a 6 line (32 tokens) duplication in the following files: 
Starting at line 237 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 249 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 260 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 271 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 131 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 141 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 151 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 161 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 173 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 536 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 554 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 572 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 583 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 594 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java

    public Object visit(ASTBreakStatement node, Object data) {
        if (!(data instanceof Structure)) {
            return data;
        }
        Structure dataFlow = (Structure) data;
        dataFlow.createNewNode(node);
=====================================================================
Found a 4 line (32 tokens) duplication in the following files: 
Starting at line 28 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\basic\CheckSkipResultRule.java
Starting at line 20 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\strings\StringToStringRule.java

        for (NameOccurrence occ : node.getUsages()) {
            JavaNameOccurrence jocc = (JavaNameOccurrence) occ;
            NameOccurrence qualifier = jocc.getNameForWhichThisIsAQualifier();
            if (qualifier != null && "skip".equals(qualifier.getImage())) {
=====================================================================
Found a 8 line (32 tokens) duplication in the following files: 
Starting at line 34 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\AssignmentToNonFinalStaticRule.java
Starting at line 91 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\javabeans\BeanMembersShouldSerializeRule.java

            if (initializedInConstructor(entry.getValue())) {
                addViolation(data, decl.getNode(), decl.getImage());
            }
        }
        return super.visit(node, data);
    }

    private boolean initializedInConstructor(List<NameOccurrence> usages) {
=====================================================================
Found a 6 line (32 tokens) duplication in the following files: 
Starting at line 57 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\LocalScope.java
Starting at line 163 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\ClassScope.java
Starting at line 48 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\LocalScope.java

        ImageFinderFunction finder = new ImageFinderFunction(occurrence.getImage());
        Applier.apply(finder, getVariableDeclarations().keySet().iterator());
        return finder.getDecl();
    }

    public String toString() {
=====================================================================
Found a 7 line (32 tokens) duplication in the following files: 
Starting at line 203 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\ClassTypeResolver.java
Starting at line 209 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\ClassTypeResolver.java
Starting at line 215 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\ClassTypeResolver.java
Starting at line 292 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\ClassTypeResolver.java

	public Object visit(ASTClassOrInterfaceDeclaration node, Object data) {
		populateType(node, node.getImage());
		return super.visit(node, data);
	}

	@Override
	public Object visit(ASTEnumDeclaration node, Object data) {
=====================================================================
Found a 10 line (32 tokens) duplication in the following files: 
Starting at line 411 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 516 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java

      public Object visit(ASTCaseWhenClause node, Object data) {
        if (!(data instanceof Structure)) {
            return data;
        }
        Structure dataFlow = (Structure) data;


         //Java ASTSwitchLabel 
        //SRT dataFlow.createNewNode(node);
        dataFlow.pushOnStack(NodeType.CASE_LAST_STATEMENT, dataFlow.getLast());
=====================================================================
Found a 5 line (32 tokens) duplication in the following files: 
Starting at line 52 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\AbstractNcssCountRule.java
Starting at line 351 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NPathComplexityRule.java
Starting at line 373 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NPathComplexityRule.java
Starting at line 52 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NcssObjectCountRule.java

	int numNodes = 0;

	for (int i = 0; i < node.jjtGetNumChildren(); i++) {
		PLSQLNode n = (PLSQLNode) node.jjtGetChild(i);
	    Integer treeSize = (Integer) n.jjtAccept(this, data);
=====================================================================
Found a 4 line (31 tokens) duplication in the following files: 
Starting at line 173 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\RuleSet.java
Starting at line 432 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\RuleSet.java

	public boolean usesDFA(Language language) {
		for (Rule r : rules) {
			if (r.getLanguage().equals(language)) {
				if (r.usesDFA()) {
=====================================================================
Found a 4 line (31 tokens) duplication in the following files: 
Starting at line 47 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\benchmark\Benchmarker.java
Starting at line 63 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\benchmark\Benchmarker.java

    private static boolean findBooleanSwitch(String[] args, String name) {
        for (int i = 0; i < args.length; i++) {
            if (args[i].equals(name)) {
                return true;
=====================================================================
Found a 8 line (31 tokens) duplication in the following files: 
Starting at line 118 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\GUI.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\PLSQLLanguage.java

									public String[] extensions() { return new String[] {".sql"
																,".trg"
																,".prc",".fnc"
																,".pld"
																,".pls",".plh",".plb"
																,".pck",".pks",".pkh",".pkb"
																,".typ",".tyb"
																,".tps",".tpb"
=====================================================================
Found a 11 line (31 tokens) duplication in the following files: 
Starting at line 72 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\JavaTokenizer.java
Starting at line 38 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\PLSQLTokenizer.java

    }

    public void setIgnoreLiterals(boolean ignore) {
        this.ignoreLiterals = ignore;
    }

    public void setIgnoreIdentifiers(boolean ignore) {
        this.ignoreIdentifiers = ignore;
    }

    public void setIgnoreAnnotations(boolean ignoreAnnotations) {
=====================================================================
Found a 4 line (31 tokens) duplication in the following files: 
Starting at line 228 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\Language.java
Starting at line 244 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\Language.java

    public static List<Language> findWithRuleSupport() {
	List<Language> languages = new ArrayList<Language>();
	for (Language language : Language.values()) {
	    if (language.getRuleChainVisitorClass() != null) {
=====================================================================
Found a 8 line (31 tokens) duplication in the following files: 
Starting at line 547 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\CandidateDAO.java
Starting at line 598 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\CandidateDAO.java
Starting at line 838 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\CandidateDAO.java

			} catch (SQLException e) {

				log.error( "failed!", e );;
			}
		}

		if (toCreate == true && result == -1) {
			this.addPackage(candidate);
=====================================================================
Found a 4 line (31 tokens) duplication in the following files: 
Starting at line 26 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTTryStatement.java
Starting at line 35 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTTryStatement.java

    public boolean hasFinally() {
        for (int i = 0; i < this.jjtGetNumChildren(); i++) {
            if (jjtGetChild(i) instanceof ASTFinallyStatement) {
                return true;
=====================================================================
Found a 4 line (31 tokens) duplication in the following files: 
Starting at line 51 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\AbstractNcssCountRule.java
Starting at line 183 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\NPathComplexityRule.java

        int numNodes = 0;

        for (int i = 0; i < node.jjtGetNumChildren(); i++) {
            JavaNode n = (JavaNode) node.jjtGetChild(i);
=====================================================================
Found a 6 line (31 tokens) duplication in the following files: 
Starting at line 54 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\AbstractNcssCountRule.java
Starting at line 55 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NcssObjectCountRule.java

            JavaNode n = (JavaNode) node.jjtGetChild(i);
            Integer treeSize = (Integer) n.jjtAccept(this, data);
            numNodes += treeSize.intValue();
        }

        if (this.nodeClass.isInstance(node)) {
=====================================================================
Found a 5 line (31 tokens) duplication in the following files: 
Starting at line 28 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\coupling\LooseCouplingRule.java
Starting at line 24 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\rules\LooseCoupling.java

    public Object visit(ASTClassOrInterfaceType node, Object data) {
        if (methodHasOverride(node)) {
            return data;
        }
        Node parent = node.getNthParent(3);
=====================================================================
Found a 2 line (31 tokens) duplication in the following files: 
Starting at line 656 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\ConstructorCallsOverridableMethodRule.java
Starting at line 693 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\ConstructorCallsOverridableMethodRule.java

            List<MethodInvocation> calledMeths = entry.getValue();
            for (Iterator<MethodInvocation> calledMethsIter = calledMeths.iterator(); calledMethsIter.hasNext() && !h.isDangerous();) {
=====================================================================
Found a 4 line (31 tokens) duplication in the following files: 
Starting at line 246 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\strings\InsufficientStringBufferDeclarationRule.java
Starting at line 289 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\strings\InsufficientStringBufferDeclarationRule.java

        } else if (literals.size() == 1) {
        	ASTLiteral literal = literals.get(0);
            String str = literal.getImage();
            if (str == null) {
=====================================================================
Found a 4 line (31 tokens) duplication in the following files: 
Starting at line 98 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\unusedcode\UnusedFormalParameterRule.java
Starting at line 33 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\unusedcode\UnusedLocalVariableRule.java

    private boolean actuallyUsed(VariableNameDeclaration nameDecl, List<NameOccurrence> usages) {
        for (NameOccurrence occ : usages) {
            JavaNameOccurrence jocc = (JavaNameOccurrence) occ;
            if (jocc.isOnLeftHandSide()) {
=====================================================================
Found a 8 line (31 tokens) duplication in the following files: 
Starting at line 82 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\VariableNameDeclaration.java
Starting at line 36 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\VariableNameDeclaration.java

    }

    @Override
    public boolean equals(Object o) {
        if (!(o instanceof VariableNameDeclaration)) {
            return false;
        }
	VariableNameDeclaration n = (VariableNameDeclaration) o;
=====================================================================
Found a 6 line (31 tokens) duplication in the following files: 
Starting at line 43 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\TypeHelper.java
Starting at line 67 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\xpath\TypeOfFunction.java

		if (type.equals(clazz)) {
			return true;
		}

		List<Class<?>> implementors = Arrays.asList(type.getInterfaces());
		if (implementors.contains(clazz)) {
=====================================================================
Found a 6 line (31 tokens) duplication in the following files: 
Starting at line 222 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\CyclomaticComplexityRule.java
Starting at line 247 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\CyclomaticComplexityRule.java

    LOGGER.entering(CLASS_NAME,"visit(ASTPackageBody)");

    entryStack.push( new Entry( node ) );
    super.visit( node, data );
    Entry classEntry = entryStack.pop();
    LOGGER.finest("ASTPackageBody: ComplexityAverage==" + classEntry.getComplexityAverage() 
=====================================================================
Found a 4 line (31 tokens) duplication in the following files: 
Starting at line 356 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\AbstractRule.java
Starting at line 365 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\AbstractRule.java
Starting at line 374 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\AbstractRule.java
Starting at line 383 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\AbstractRule.java
Starting at line 392 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\AbstractRule.java
Starting at line 402 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\AbstractRule.java

	 public void addViolation(Object data, Node node) {
		 RuleContext ruleContext = (RuleContext) data;
		 ruleContext.getLanguageVersion().getLanguageVersionHandler().getRuleViolationFactory().addViolation(
				 ruleContext, this, node, this.getMessage(), null);
=====================================================================
Found a 1 line (30 tokens) duplication in the following files: 
Starting at line 101 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\RuleSet.java
Starting at line 123 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\RuleSet.java

            if (r.getName().equals(rule.getName()) && r.getLanguage() == rule.getLanguage()) {
=====================================================================
Found a 3 line (30 tokens) duplication in the following files: 
Starting at line 60 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\AbstractTokenizer.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\PHPTokenizer.java

        for (int j = loc; j < currentLine.length(); j++) {
            char tok = currentLine.charAt(j);
            if (!Character.isWhitespace(tok) && !ignoreCharacter(tok)) {
=====================================================================
Found a 9 line (30 tokens) duplication in the following files: 
Starting at line 543 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\CandidateDAO.java
Starting at line 872 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\CandidateDAO.java
Starting at line 898 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\CandidateDAO.java

					result = candidate.getPackageNumber();
				}
				rs.close();
				stmt.close();
			} catch (SQLException e) {

				log.error( "failed!", e );;
			}
		}
=====================================================================
Found a 9 line (30 tokens) duplication in the following files: 
Starting at line 69 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\initialization\FirstTimeDBInit.java
Starting at line 99 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\initialization\FirstTimeDBInit.java
Starting at line 200 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\initialization\FirstTimeDBInit.java
Starting at line 230 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\initialization\FirstTimeDBInit.java
Starting at line 261 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\initialization\FirstTimeDBInit.java
Starting at line 328 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\initialization\FirstTimeDBInit.java

			stmt.executeUpdate(sql);
			stmt.close();
			connection.commit();

		} catch (SQLException e) {

			e.printStackTrace();
		}
	}
=====================================================================
Found a 6 line (30 tokens) duplication in the following files: 
Starting at line 18 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTExpressionStatement.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTReturnStatement.java

    public Object jjtAccept(EcmascriptParserVisitor visitor, Object data) {
	return visitor.visit(this, data);
    }

    public boolean hasResult() {
	return node.getType() == Token.EXPR_RESULT;
=====================================================================
Found a 4 line (30 tokens) duplication in the following files: 
Starting at line 19 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\DumpFacade.java
Starting at line 17 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\DumpFacade.java
Starting at line 19 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\DumpFacade.java
Starting at line 17 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\DumpFacade.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\xml\ast\DumpFacade.java

	public void initializeWith(Writer writer, String prefix, boolean recurse, EcmascriptNode<?> node) {
		this.writer = (writer instanceof PrintWriter) ? (PrintWriter) writer : new PrintWriter(writer);
		this.recurse = recurse;
		this.dump(node, prefix);
=====================================================================
Found a 20 line (30 tokens) duplication in the following files: 
Starting at line 42 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\DumpFacade.java
Starting at line 38 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\DumpFacade.java
Starting at line 40 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\DumpFacade.java
Starting at line 38 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\DumpFacade.java
Starting at line 44 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\xml\ast\DumpFacade.java

	private void dump(EcmascriptNode<?> node, String prefix) {
		//
		// Dump format is generally composed of the following items...
		//

		// 1) Dump prefix
		writer.print(prefix);

		// 2) JJT Name of the Node
		writer.print(node.toString());

		//
		// If there are any additional details, then:
		// 1) A colon
		// 2) The Node.getImage() if it is non-empty
		// 3) Extras in parentheses
		//

		// Standard image handling
		String image = node.getImage();
=====================================================================
Found a 6 line (30 tokens) duplication in the following files: 
Starting at line 86 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\AbstractJavaHandler.java
Starting at line 71 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\PLSQLHandler.java
Starting at line 43 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\VmHandler.java

    }

    @Override
    public VisitorStarter getDumpFacade(final Writer writer, final String prefix, final boolean recurse) {
	return new VisitorStarter() {
	    public void start(Node rootNode) {
=====================================================================
Found a 9 line (30 tokens) duplication in the following files: 
Starting at line 48 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\AbstractJavaParser.java
Starting at line 30 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\JspParser.java
Starting at line 44 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\PLSQLParser.java

    }

    public boolean canParse() {
	return true;
    }

    public Node parse(String fileName, Reader source) throws ParseException {
	AbstractTokenManager.setFileName(fileName);
	return createJavaParser(source).CompilationUnit();
=====================================================================
Found a 6 line (30 tokens) duplication in the following files: 
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTExplicitConstructorInvocation.java
Starting at line 20 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTArguments.java

    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }

    public int getArgumentCount() {
    	if (this.jjtGetNumChildren() == 1) {
=====================================================================
Found a 12 line (30 tokens) duplication in the following files: 
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTName.java
Starting at line 23 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTName.java

        super(p, id);
    }

    private NameDeclaration nd;

    public void setNameDeclaration(NameDeclaration nd) {
        this.nd = nd;
    }

    public NameDeclaration getNameDeclaration() {
        return this.nd;
    }
=====================================================================
Found a 6 line (30 tokens) duplication in the following files: 
Starting at line 62 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTVariableDeclaratorId.java
Starting at line 55 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTVariableOrConstantDeclaratorId.java

    }

    public Node getTypeNameNode() {
        if (jjtGetParent() instanceof ASTFormalParameter) {
            return findTypeNameNode(jjtGetParent());
        } else if (jjtGetParent() instanceof ASTLambdaExpression) {
=====================================================================
Found a 4 line (30 tokens) duplication in the following files: 
Starting at line 52 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\AbstractJavaNode.java
Starting at line 49 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\AbstractJspNode.java
Starting at line 52 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\AbstractPLSQLNode.java

    public Object childrenAccept(JavaParserVisitor visitor, Object data) {
        if (children != null) {
            for (int i = 0; i < children.length; ++i) {
                ((JavaNode) children[i]).jjtAccept(visitor, data);
=====================================================================
Found a 6 line (30 tokens) duplication in the following files: 
Starting at line 81 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 91 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 431 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java

    public Object visit(ASTStatementExpression node, Object data) {
        if (!(data instanceof Structure)) {
            return data;
        }
        Structure dataFlow = (Structure) data;
        LOGGER.finest("createNewNode ASTStatementExpression: line " + node.getBeginLine() +", column " + node.getBeginColumn());
=====================================================================
Found a 8 line (30 tokens) duplication in the following files: 
Starting at line 101 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 167 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 221 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 493 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java

    public Object visit(ASTExpression node, Object data) {
        if (!(data instanceof Structure)) {
            return data;
        }
        Structure dataFlow = (Structure) data;

        // TODO what about throw stmts?
        if (node.jjtGetParent() instanceof ASTIfStatement) {
=====================================================================
Found a 3 line (30 tokens) duplication in the following files: 
Starting at line 119 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 199 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java

            LOGGER.finest("pushOnStack parent SWITCH_START: line " + node.getBeginLine() +", column " + node.getBeginColumn());
        } else if (node.jjtGetParent() instanceof ASTForStatement) {
            dataFlow.createNewNode(node); // FOR EXPR
=====================================================================
Found a 3 line (30 tokens) duplication in the following files: 
Starting at line 123 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 176 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java

            LOGGER.finest("pushOnStack parent FOR_EXPR: line " + node.getBeginLine() +", column " + node.getBeginColumn());
        } else if (node.jjtGetParent() instanceof ASTDoStatement) {
            dataFlow.createNewNode(node); // DO EXPR
=====================================================================
Found a 10 line (30 tokens) duplication in the following files: 
Starting at line 109 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\AbstractNcssCountRule.java
Starting at line 133 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\AbstractNcssCountRule.java

        return lineCount;
    }

    @Override
    public Object visit(ASTWhileStatement node, Object data) {
        return countNodeChildren(node, data);
    }

    @Override
    public Object visit(ASTBreakStatement node, Object data) {
=====================================================================
Found a 4 line (30 tokens) duplication in the following files: 
Starting at line 138 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\CyclomaticComplexityRule.java
Starting at line 165 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\CyclomaticComplexityRule.java

    Entry entry = entryStack.peek();

    int boolCompSwitch = NPathComplexityRule.sumExpressionComplexity( node.getFirstChildOfType( ASTExpression.class ) );
    entry.bumpDecisionPoints( boolCompSwitch );
=====================================================================
Found a 10 line (30 tokens) duplication in the following files: 
Starting at line 286 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\ConstructorCallsOverridableMethodRule.java
Starting at line 313 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\ConstructorCallsOverridableMethodRule.java
Starting at line 348 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\ConstructorCallsOverridableMethodRule.java

                                        String name = ((ASTPrimarySuffix) child).getImage();
                                        if (x == i - 2) {//last node
                                            methodName = name;
                                        } else {//not the last named node so its only var name
                                            varNames.add(name);
                                        }
                                    }
                                }
                            }
                        } else {//not super call
=====================================================================
Found a 3 line (30 tokens) duplication in the following files: 
Starting at line 609 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\ConstructorCallsOverridableMethodRule.java
Starting at line 703 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\ConstructorCallsOverridableMethodRule.java

                        int count = h.getASTMethodDeclarator().getParameterCount();
                        List<String> parameterTypes = getMethodDeclaratorParameterTypes(h.getASTMethodDeclarator());
                        if (methName.equals(meth.getName()) && meth.getArgumentCount() == count
=====================================================================
Found a 3 line (30 tokens) duplication in the following files: 
Starting at line 69 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\ImmutableFieldRule.java
Starting at line 29 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\optimizations\AbstractOptimizationRule.java

        for (NameOccurrence occ: usages) {
            JavaNameOccurrence jocc = (JavaNameOccurrence)occ;
            if (jocc.isOnLeftHandSide() || jocc.isSelfAssignment()) {
=====================================================================
Found a 3 line (30 tokens) duplication in the following files: 
Starting at line 45 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\PositionalIteratorRule.java
Starting at line 251 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\unnecessary\UselessOverridingMethodRule.java

        for (int i = 0; i < node.jjtGetNumChildren(); i++) {
            Node child = node.jjtGetChild(i);
            if (child.jjtGetNumChildren() > 0) {
=====================================================================
Found a 3 line (30 tokens) duplication in the following files: 
Starting at line 77 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\imports\DuplicateImportsRule.java
Starting at line 83 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\imports\DuplicateImportsRule.java

            if (importOnDemandImports.contains(wrapper)) {
                addViolation(data, node.getImportedNameNode(), node.getImportedNameNode().getImage());
            } else {
=====================================================================
Found a 4 line (30 tokens) duplication in the following files: 
Starting at line 28 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\optimizations\AbstractOptimizationRule.java
Starting at line 33 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\unusedcode\UnusedLocalVariableRule.java

    protected boolean assigned(List<NameOccurrence> usages) {
        for (NameOccurrence occ: usages) {
            JavaNameOccurrence jocc = (JavaNameOccurrence)occ;
            if (jocc.isOnLeftHandSide() || jocc.isSelfAssignment()) {
=====================================================================
Found a 21 line (30 tokens) duplication in the following files: 
Starting at line 36 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\OccurrenceFinder.java
Starting at line 48 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\OccurrenceFinder.java

                search.execute(decl.getScope());
                decl = search.getResult();

                if (decl == null) {
                    // nothing found
                    // This seems to be a lack of type resolution here.
                    // Theoretically we have the previous declaration node and know from there the Type of
                    // the variable. The current occurrence (occ) should then be found in the declaration of
                    // this type. The type however may or may not be known to PMD (see aux classpath).

                    // we can't find it, so just give up
                    // when we decide to do full symbol resolution
                    // force this to either find a symbol or throw a SymbolNotFoundException
                    break;
                }
            }
        }
        return super.visit(node, data);
    }

}
=====================================================================
Found a 15 line (30 tokens) duplication in the following files: 
Starting at line 64 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\ScopeAndDeclarationFinder.java
Starting at line 60 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\ScopeAndDeclarationFinder.java

    private void addScope(Scope newScope, JavaNode node) {
	newScope.setParent(scopes.peek());
	scopes.push(newScope);
	node.setScope(newScope);
    }

    /**
     * Creates a new local scope for an AST node.
     * The scope on top of the stack is set as the parent of the new scope,
     * which is then also stored on the scope stack.
     *
     * @param node the AST node for which the scope has to be created.
     * @throws java.util.EmptyStackException if the scope stack is empty.
     */
    private void createLocalScope(JavaNode node) {
=====================================================================
Found a 8 line (30 tokens) duplication in the following files: 
Starting at line 179 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\visitors\PMDASMVisitor.java
Starting at line 392 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\visitors\PMDASMVisitor.java

		}

		public AnnotationVisitor visitAnnotation(String desc, boolean visible) {
			parent.addType(Type.getType(desc));
			return parent.annotationVisitor;
		}

		public void visitAttribute(Attribute attr) {
=====================================================================
Found a 23 line (30 tokens) duplication in the following files: 
Starting at line 8 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTAttribute.java
Starting at line 8 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTDeclaration.java
Starting at line 8 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTDoctypeDeclaration.java
Starting at line 8 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTJspDirective.java

public class ASTAttribute extends AbstractJspNode {
    /* BEGIN CUSTOM CODE */
    private String name;

    /**
     * @return Returns the name.
     */
    public String getName() {
        return name;
    }

    /**
     * @param name The name to set.
     */
    public void setName(String name) {
        this.name = name;
    }


    /**
     * @return boolean - true if the element has a namespace-prefix, false otherwise
     */
    public boolean isHasNamespacePrefix() {
=====================================================================
Found a 6 line (30 tokens) duplication in the following files: 
Starting at line 604 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 690 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java

	public Object visit(ASTPragmaClause node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTTriggerUnit node, Object data) {
=====================================================================
Found a 6 line (30 tokens) duplication in the following files: 
Starting at line 181 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NPathComplexityRule.java
Starting at line 230 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NPathComplexityRule.java
Starting at line 264 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NPathComplexityRule.java

                ||node.jjtGetChild(i).getClass() == ASTElseClause.class
               ) {
		statementChildren.add((PLSQLNode) node.jjtGetChild(i));
	    }
	}
        LOGGER.finest(statementChildren.size() + " statementChildren found for IF statement " + node.getBeginLine() +", column " + node.getBeginColumn());
=====================================================================
Found a 3 line (30 tokens) duplication in the following files: 
Starting at line 286 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NPathComplexityRule.java
Starting at line 299 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NPathComplexityRule.java
Starting at line 312 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NPathComplexityRule.java

	Integer nPathWhile = (Integer) ((PLSQLNode) node.getFirstChildOfType(ASTStatement.class)).jjtAccept(this, data);

        LOGGER.exiting(CLASS_NAME,"visit(ASTWhileStatement)", (boolCompWhile + nPathWhile + 1));
=====================================================================
Found a 19 line (30 tokens) duplication in the following files: 
Starting at line 23 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\properties\AbstractMultiNumericProperty.java
Starting at line 24 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\properties\AbstractMultiPackagedProperty.java

        super(theName, theDescription, lower, upper, theDefault, theUIOrder);
    }

    /**
     * @return boolean
     * @see net.sourceforge.pmd.PropertyDescriptor#isMultiValue()
     */
    @Override
    public boolean isMultiValue() {
        return true;
    }
    
    /**
     * @return String
     */
    protected String defaultAsString() {
        return asDelimitedString(defaultValue());
    }
}
=====================================================================
Found a 16 line (30 tokens) duplication in the following files: 
Starting at line 87 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\properties\TypeMultiProperty.java
Starting at line 77 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\properties\TypeProperty.java

    }
    
    /**
     * @param item Object
     * @return String
     */
    @Override
    protected String packageNameOf(Object item) {
        return ((Class<?>) item).getName();
    }
    
    /**
     * @return Class
     * @see net.sourceforge.pmd.PropertyDescriptor#type()
     */
    public Class<Class[]> type() {
=====================================================================
Found a 6 line (30 tokens) duplication in the following files: 
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\rule\basic\CollapsibleIfStatementsRule.java
Starting at line 19 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\rule\basic\EmptyIfStmtRule.java

        handleIfElseIf(node, data);
        return super.visit(node, data);
    }

    @Override
    public Object visit(final ASTElseIfStatement node, final Object data) {
=====================================================================
Found a 7 line (30 tokens) duplication in the following files: 
Starting at line 18 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\rule\basic\EmptyIfStmtRule.java
Starting at line 24 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\rule\basic\EmptyIfStmtRule.java

    public Object visit(final ASTIfStatement node, final Object data) {
        handleIf(node, data);
        return super.visit(node, data);
    }

    @Override
    public Object visit(final ASTElseIfStatement node, final Object data) {
=====================================================================
Found a 1 line (30 tokens) duplication in the following files: 
Starting at line 43 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\CSVRenderer.java
Starting at line 44 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\CSVRenderer.java

    	new ColumnDescriptor<RuleViolation>("priority",	"Priority", 	new Accessor<RuleViolation>() { public String get(int idx, RuleViolation rv, String cr) { return Integer.toString(rv.getRule().getPriority().getPriority()); }} ),
=====================================================================
Found a 1 line (30 tokens) duplication in the following files: 
Starting at line 46 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\CSVRenderer.java
Starting at line 47 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\CSVRenderer.java

    	new ColumnDescriptor<RuleViolation>("ruleSet",	"Rule set", 	new Accessor<RuleViolation>() { public String get(int idx, RuleViolation rv, String cr) { return rv.getRule().getRuleSetName(); }} ),
=====================================================================
Found a 4 line (30 tokens) duplication in the following files: 
Starting at line 151 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\filter\Filters.java
Starting at line 185 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\filter\Filters.java

	public static Filter<String> buildRegexFilterExcludeOverInclude(List<String> includeRegexes,
			List<String> excludeRegexes) {
		OrFilter<String> includeFilter = new OrFilter<String>();
		if (includeRegexes == null || includeRegexes.isEmpty()) {
=====================================================================
Found a 11 line (29 tokens) duplication in the following files: 
Starting at line 358 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\RuleSet.java
Starting at line 210 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\AbstractRule.java

	}

	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	public List<String> getExcludePatterns() {
=====================================================================
Found a 9 line (29 tokens) duplication in the following files: 
Starting at line 69 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\CsTokenizer.java
Starting at line 87 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\CsTokenizer.java
Starting at line 105 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\CsTokenizer.java

					}
					else
					{
						tokenEntries.add(new TokenEntry(String.valueOf(c), sourceCode.getFileName(), line));
					}
					break;
	
					// = == & &= && | |= || + += ++ - -= --
				case '=':
=====================================================================
Found a 4 line (29 tokens) duplication in the following files: 
Starting at line 68 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\JavaTokenizer.java
Starting at line 100 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\PLSQLTokenizer.java

        if (ignoreIdentifiers && currentToken.kind == JavaParserConstants.IDENTIFIER) {
            image = String.valueOf(currentToken.kind);
        }
        tokenEntries.add(new TokenEntry(image, fileName, currentToken.beginLine));
=====================================================================
Found a 3 line (29 tokens) duplication in the following files: 
Starting at line 18 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\VSRenderer.java
Starting at line 86 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\XMLRenderer.java

            TokenEntry mark;
            for (Iterator<TokenEntry> iterator = match.iterator(); iterator.hasNext();) {
                mark = iterator.next();
=====================================================================
Found a 18 line (29 tokens) duplication in the following files: 
Starting at line 135 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ast\xpath\DocumentNavigator.java
Starting at line 175 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ast\xpath\DocumentNavigator.java

		return getFirstChild(node);
	    }

	    @Override
	    protected Node getNextNode(Node node) {
		return getNextSibling(node);
	    }
	};
    }

    /**
     * Get a (single-member) iterator over this node's parent.
     *
     * @param contextNode the context node for the parent axis.
     * @return A possibly-empty iterator (not null).
     */
    @Override
    public Iterator<Node> getParentAxisIterator(Object contextNode) {
=====================================================================
Found a 1 line (29 tokens) duplication in the following files: 
Starting at line 134 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dfa\AbstractDataFlowNode.java
Starting at line 625 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\designer\Designer.java

	res += ", " + this.node.getClass().getName().substring(node.getClass().getName().lastIndexOf('.') + 1);
=====================================================================
Found a 5 line (29 tokens) duplication in the following files: 
Starting at line 563 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\DesignPatternDetection.java
Starting at line 179 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\coupling\LawOfDemeterRule.java

	private boolean hasRealPrefix(AbstractJavaNode expr) {
		ASTPrimaryPrefix prefix = expr
				.getFirstDescendantOfType(ASTPrimaryPrefix.class);
		return !prefix.usesThisModifier() && !prefix.usesSuperModifier();
	}
=====================================================================
Found a 9 line (29 tokens) duplication in the following files: 
Starting at line 543 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\CandidateDAO.java
Starting at line 872 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\CandidateDAO.java
Starting at line 921 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\CandidateDAO.java

					result = candidate.getPackageNumber();
				}
				rs.close();
				stmt.close();
			} catch (SQLException e) {

				log.error( "failed!", e );;
			}
		}
=====================================================================
Found a 7 line (29 tokens) duplication in the following files: 
Starting at line 100 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\EcmascriptParserOptions.java
Starting at line 157 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\xml\XmlParserOptions.java

    }

    @Override
    public int hashCode() {
	final int prime = 31;
	int result = super.hashCode();
	result = prime * result + (recordingComments ? 1231 : 1237);
=====================================================================
Found a 11 line (29 tokens) duplication in the following files: 
Starting at line 12 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTNumberLiteral.java
Starting at line 11 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTRegExpLiteral.java

	super.setImage(numberLiteral.getValue());
    }

    /**
     * Accept the visitor.
     */
    public Object jjtAccept(EcmascriptParserVisitor visitor, Object data) {
	return visitor.visit(this, data);
    }

    public String getNormalizedImage() {
=====================================================================
Found a 7 line (29 tokens) duplication in the following files: 
Starting at line 22 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\DumpFacade.java
Starting at line 20 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\DumpFacade.java
Starting at line 22 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\DumpFacade.java
Starting at line 20 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\DumpFacade.java
Starting at line 24 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\xml\ast\DumpFacade.java

		this.dump(node, prefix);
		try {
			writer.flush();
		} catch (IOException e) {
			throw new RuntimeException("Problem flushing PrintWriter.", e);
		}
	}
=====================================================================
Found a 11 line (29 tokens) duplication in the following files: 
Starting at line 31 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTPrimitiveType.java
Starting at line 27 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTReferenceType.java
Starting at line 48 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTVariableDeclaratorId.java
Starting at line 45 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTVariableOrConstantDeclaratorId.java

    public void bumpArrayDepth() {
        arrayDepth++;
    }

    public int getArrayDepth() {
        return arrayDepth;
    }

    public boolean isArray() {
        return arrayDepth > 0;
    }
=====================================================================
Found a 6 line (29 tokens) duplication in the following files: 
Starting at line 94 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\CommentUtil.java
Starting at line 104 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\comments\AbstractCommentRule.java

				int start = line.startsWith("/**") ? 3 : line.startsWith("/*") ? 2 : 0;
				filteredLines.add(line.substring(start, end));
				continue;
			}

			if (line.charAt(0) == '*') {
=====================================================================
Found a 6 line (29 tokens) duplication in the following files: 
Starting at line 99 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\CommentUtil.java
Starting at line 109 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\comments\AbstractCommentRule.java

			if (line.charAt(0) == '*') {
				filteredLines.add(line.substring(1));
				continue;
			}

			if (line.startsWith("/**")) {
=====================================================================
Found a 5 line (29 tokens) duplication in the following files: 
Starting at line 148 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 244 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 256 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 267 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 116 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 127 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 137 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 147 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 157 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 167 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 179 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 238 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 543 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 561 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 579 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 590 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java

        LOGGER.finest("pushOnStack LABEL_STATEMENT: line " + node.getBeginLine() +", column " + node.getBeginColumn());
        return super.visit(node, data);
    }

    public Object visit(ASTForUpdate node, Object data) {
=====================================================================
Found a 4 line (29 tokens) duplication in the following files: 
Starting at line 54 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\AbstractNcssCountRule.java
Starting at line 55 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\AbstractNcssCountRule.java

            JavaNode n = (JavaNode) node.jjtGetChild(i);
            Integer treeSize = (Integer) n.jjtAccept(this, data);
            numNodes += treeSize.intValue();
        }
=====================================================================
Found a 3 line (29 tokens) duplication in the following files: 
Starting at line 125 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\NPathComplexityRule.java
Starting at line 136 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\NPathComplexityRule.java
Starting at line 147 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\NPathComplexityRule.java

        Integer nPathWhile = (Integer) ((JavaNode) node.getFirstChildOfType(ASTStatement.class)).jjtAccept(this, data);

        return Integer.valueOf(boolCompWhile + nPathWhile + 1);
=====================================================================
Found a 4 line (29 tokens) duplication in the following files: 
Starting at line 29 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\ExcessiveLengthRule.java
Starting at line 41 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\ExcessiveNodeCountRule.java
Starting at line 41 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\design\ExcessiveNodeCountRule.java

	if (nodeClass.isInstance(node)) {
	    DataPoint point = new DataPoint();
	    point.setNode(node);
	    point.setScore(1.0 * (node.getEndLine() - node.getBeginLine()));
=====================================================================
Found a 9 line (29 tokens) duplication in the following files: 
Starting at line 25 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\ExcessiveNodeCountRule.java
Starting at line 25 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\design\ExcessiveNodeCountRule.java

public class ExcessiveNodeCountRule extends AbstractStatisticalJavaRule {
    private Class<?> nodeClass;

    public ExcessiveNodeCountRule(Class<?> nodeClass) {
	this.nodeClass = nodeClass;
    }

    @Override
    public Object visit(JavaNode node, Object data) {
=====================================================================
Found a 3 line (29 tokens) duplication in the following files: 
Starting at line 45 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\PositionalIteratorRule.java
Starting at line 48 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\migrating\JUnitUseExpectedRule.java
Starting at line 251 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\unnecessary\UselessOverridingMethodRule.java

        for (int i = 0; i < node.jjtGetNumChildren(); i++) {
            Node child = node.jjtGetChild(i);
            if (child.jjtGetNumChildren() > 0) {
=====================================================================
Found a 4 line (29 tokens) duplication in the following files: 
Starting at line 57 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\PositionalIteratorRule.java
Starting at line 68 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\PositionalIteratorRule.java

    private boolean hasNameAsChild(Node node) {
        if (node.jjtGetNumChildren() > 0) {
            if (node.jjtGetChild(0) instanceof ASTName) {
                return true;
=====================================================================
Found a 4 line (29 tokens) duplication in the following files: 
Starting at line 28 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\optimizations\AbstractOptimizationRule.java
Starting at line 98 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\unusedcode\UnusedFormalParameterRule.java

    protected boolean assigned(List<NameOccurrence> usages) {
        for (NameOccurrence occ: usages) {
            JavaNameOccurrence jocc = (JavaNameOccurrence)occ;
            if (jocc.isOnLeftHandSide() || jocc.isSelfAssignment()) {
=====================================================================
Found a 3 line (29 tokens) duplication in the following files: 
Starting at line 75 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\strings\InsufficientStringBufferDeclarationRule.java
Starting at line 105 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\strings\InsufficientStringBufferDeclarationRule.java

                    String[] param = { String.valueOf(constructorLength), String.valueOf(anticipatedLength) };
                    addViolation(data, rootNode, param);
                }
=====================================================================
Found a 8 line (29 tokens) duplication in the following files: 
Starting at line 49 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\ClassScope.java
Starting at line 89 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\ClassScope.java

        return getDeclarations(ClassNameDeclaration.class);
    }

    public Map<MethodNameDeclaration, List<NameOccurrence>> getMethodDeclarations() {
        return getDeclarations(MethodNameDeclaration.class);
    }

    public Map<VariableNameDeclaration, List<NameOccurrence>> getVariableDeclarations() {
=====================================================================
Found a 10 line (29 tokens) duplication in the following files: 
Starting at line 89 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\ClassScope.java
Starting at line 79 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\ClassScope.java

                Node n = javaOccurrence.getLocation();
                if (n instanceof ASTName) {
                    ((ASTName) n).setNameDeclaration(decl);
                } // TODO what to do with PrimarySuffix case?
            }
        }
        return decl;
    }

    public String getClassName() {
=====================================================================
Found a 3 line (29 tokens) duplication in the following files: 
Starting at line 24 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\MethodNameDeclaration.java
Starting at line 40 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\MethodNameDeclaration.java
Starting at line 78 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\MethodNameDeclaration.java
Starting at line 42 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\MethodNameDeclaration.java
Starting at line 58 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\MethodNameDeclaration.java

        ASTFormalParameters params = (ASTFormalParameters) node.jjtGetChild(0);
        for (int i = 0; i < ((ASTMethodDeclarator) node).getParameterCount(); i++) {
            ASTFormalParameter p = (ASTFormalParameter) params.jjtGetChild(i);
=====================================================================
Found a 4 line (29 tokens) duplication in the following files: 
Starting at line 43 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\Search.java
Starting at line 45 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\Search.java

            System.out.println(" checking scope " + scope + " for name occurrence " + nameOccurrence);
        }
        if (!scope.contains(nameOccurrence) && scope.getParent() != null) {
            if (TRACE) {
=====================================================================
Found a 3 line (29 tokens) duplication in the following files: 
Starting at line 184 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 249 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 272 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java

        LOGGER.finest("Entry ASTExpression: line " + node.getBeginLine() +", column " + node.getBeginColumn());
        if (!(data instanceof Structure)) {
            LOGGER.finest("immediate return ASTExpression: line " + node.getBeginLine() +", column " + node.getBeginColumn());
=====================================================================
Found a 3 line (29 tokens) duplication in the following files: 
Starting at line 358 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 375 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java

        } else if (node.jjtGetParent() instanceof ASTLabelledStatement) {
            dataFlow.pushOnStack(NodeType.LABEL_LAST_STATEMENT, dataFlow.getLast());
            LOGGER.finest("pushOnStack LABEL_LAST_STATEMENT: line " + node.getBeginLine() +", column " + node.getBeginColumn());
=====================================================================
Found a 4 line (29 tokens) duplication in the following files: 
Starting at line 201 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\AbstractNcssCountRule.java
Starting at line 88 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NcssObjectCountRule.java

        LOGGER.fine("Point score is " + point.getScore());
	return new String[] { String.valueOf((int) point.getScore()) };
    }
}
=====================================================================
Found a 6 line (29 tokens) duplication in the following files: 
Starting at line 103 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\CyclomaticComplexityRule.java
Starting at line 116 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\CyclomaticComplexityRule.java

    LOGGER.entering(CLASS_NAME,"visit(ASTElsifClause)");
    int boolCompIf = NPathComplexityRule.sumExpressionComplexity( node.getFirstChildOfType( ASTExpression.class ) );
    // If statement always has a complexity of at least 1
    boolCompIf++;

    entryStack.peek().bumpDecisionPoints( boolCompIf );
=====================================================================
Found a 5 line (29 tokens) duplication in the following files: 
Starting at line 272 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\CyclomaticComplexityRule.java
Starting at line 328 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\CyclomaticComplexityRule.java
Starting at line 378 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\CyclomaticComplexityRule.java

    LOGGER.entering(CLASS_NAME,"visit(ASTProgramUnit)");
    entryStack.push( new Entry( node ) );
    super.visit( node, data );
    Entry methodEntry = entryStack.pop();
    LOGGER.finest("ASTProgramUnit: ComplexityAverage==" + methodEntry.getComplexityAverage() 
=====================================================================
Found a 6 line (29 tokens) duplication in the following files: 
Starting at line 327 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\util\VelocityCharStream.java
Starting at line 356 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\util\VelocityCharStream.java

    public VelocityCharStream(java.io.Reader dstream, int startline,
            int startcolumn, int buffersize)
    {
        inputStream = dstream;
        line = startline;
        column = startcolumn - 1;
=====================================================================
Found a 5 line (29 tokens) duplication in the following files: 
Starting at line 334 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\util\VelocityCharStream.java
Starting at line 365 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\util\VelocityCharStream.java

        available = bufsize = nextBufExpand = buffersize;
        buffer = new char[buffersize];
        bufline = new int[buffersize];
        bufcolumn = new int[buffersize];
    }
=====================================================================
Found a 6 line (29 tokens) duplication in the following files: 
Starting at line 55 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\HTMLRenderer.java
Starting at line 76 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\HTMLRenderer.java

		linePrefix = getProperty(LINE_PREFIX);

		writer.write("<center><h3>PMD report</h3></center>");
		writer.write("<center><h3>Problems found</h3></center>");
		writer.write("<table align=\"center\" cellspacing=\"0\" cellpadding=\"3\"><tr>" + PMD.EOL
			+ "<th>#</th><th>File</th><th>Line</th><th>Problem</th></tr>" + PMD.EOL);
=====================================================================
Found a 8 line (29 tokens) duplication in the following files: 
Starting at line 66 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\VBHTMLRenderer.java
Starting at line 102 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\VBHTMLRenderer.java

		    if (colorize) {
				sb.append("<tr id=RowColor1>");
			    } else {
				sb.append("<tr id=RowColor2>");
			    }
	
		    colorize = !colorize;
		    sb.append("<td width=\"50\" align=\"right\"><font class=body>" + rv.getBeginLine()
=====================================================================
Found a 4 line (29 tokens) duplication in the following files: 
Starting at line 251 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\CollectionUtil.java
Starting at line 113 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\StringUtil.java

    public static <T> boolean areSemanticEquals(T[] a, T[] b) {

        if (a == null) { return isEmpty(b); }
        if (b == null) { return isEmpty(a); }
=====================================================================
Found a 3 line (29 tokens) duplication in the following files: 
Starting at line 281 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\CollectionUtil.java
Starting at line 305 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\CollectionUtil.java

        }

        T[] largerOne = (T[])Array.newInstance(values.getClass().getComponentType(), values.length + 1);
=====================================================================
Found a 7 line (29 tokens) duplication in the following files: 
Starting at line 30 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\viewer\gui\menu\AttributesSubMenu.java
Starting at line 33 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\viewer\gui\menu\SimpleNodeSubMenu.java

        super(MessageFormat.format(NLS.nls("AST.MENU.ATTRIBUTES"), node.toString()));
        this.model = model;
        this.node = node;
        init();
    }

    private void init() {
=====================================================================
Found a 12 line (28 tokens) duplication in the following files: 
Starting at line 312 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\Report.java
Starting at line 202 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dfa\report\ReportTree.java

    }

	public void forEach(Consumer<? super RuleViolation> arg0) {
		// TODO Auto-generated method stub
		
	}

	public Spliterator<RuleViolation> spliterator() {
		// TODO Auto-generated method stub
		return null;
	}
}
=====================================================================
Found a 4 line (28 tokens) duplication in the following files: 
Starting at line 51 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\CsTokenizer.java
Starting at line 59 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\CsTokenizer.java
Starting at line 100 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\CsTokenizer.java

					ic = reader.read();
					if(ic == '=')
					{
						tokenEntries.add(new TokenEntry(String.valueOf(c)+"=", sourceCode.getFileName(), line));
=====================================================================
Found a 3 line (28 tokens) duplication in the following files: 
Starting at line 101 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\dcd\graph\UsageGraph.java
Starting at line 109 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\dcd\graph\UsageGraph.java

	public void usageField(String className, String name, String desc, MemberNode usingMemberNode) {
		checkClassName(className);
		if (classFilter.filter(className)) {
=====================================================================
Found a 9 line (28 tokens) duplication in the following files: 
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\XPathHandler.java
Starting at line 88 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\PLSQLHandler.java
Starting at line 30 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\xml\XmlHandler.java

    XPathHandler DUMMY = new XPathHandler() {
        public void initialize() {
        }

        public void initialize(IndependentContext context) {
        }

        public Navigator getNavigator() {
            return null;
=====================================================================
Found a 4 line (28 tokens) duplication in the following files: 
Starting at line 242 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ast\AbstractNode.java
Starting at line 32 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\naming\AvoidFieldNameMatchingMethodNameRule.java

	int n = node.jjtGetNumChildren();
	for (int i = 0; i < n; i++) {
	    Node child = node.jjtGetChild(i);
	    if (child.getClass() == targetType) {
=====================================================================
Found a 4 line (28 tokens) duplication in the following files: 
Starting at line 131 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\DesignPatternDetection.java
Starting at line 165 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\DesignPatternDetection.java

	public Object visit(ASTConstructorDeclaration method, Object data) {
		method.childrenAccept(this, data);
		Candidate candidate = new Candidate();
		RuleContext result = (RuleContext) data;
=====================================================================
Found a 8 line (28 tokens) duplication in the following files: 
Starting at line 318 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\CandidateDAO.java
Starting at line 345 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\CandidateDAO.java
Starting at line 418 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\CandidateDAO.java

						+ newCount + " where id = '" + attributeID + "';");
				stmt.close();
				connection.commit();
				// System.out.println("Attributes Records created successfully");
			} catch (SQLException e) {
				log.error( "failed!", e );;
			}
		}
=====================================================================
Found a 6 line (28 tokens) duplication in the following files: 
Starting at line 90 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\initialization\FirstTimeDBInit.java
Starting at line 96 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\initialization\FirstTimeDBInit.java

			Statement stmt = connection.createStatement();
			sql = "INSERT into packages (name) " + " VALUES ('TEST');";

			stmt.executeUpdate(sql);
			stmt.close();
			connection.commit();
=====================================================================
Found a 6 line (28 tokens) duplication in the following files: 
Starting at line 25 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\rules\mediator\MediatorRule.java
Starting at line 24 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\rules\state\StateRule.java

	public MediatorRule(RuleManager rManager, Connection connection) {
		this.connection = connection;
		rManager.addListner(this);
	}

	public void propertyChange(PropertyChangeEvent evt) {
=====================================================================
Found a 3 line (28 tokens) duplication in the following files: 
Starting at line 122 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\rules\state\StateRule.java
Starting at line 250 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\rules\state\StateRule.java
Starting at line 299 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\rules\state\StateRule.java

			ArrayList<Integer> switchID = new ArrayList<Integer>();
			while (rsSwitchIDs.next()) {
				methodID.add(rsSwitchIDs.getInt("method_id"));
=====================================================================
Found a 9 line (28 tokens) duplication in the following files: 
Starting at line 24 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\Ecmascript3Handler.java
Starting at line 26 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\JspHandler.java
Starting at line 24 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\VmHandler.java

public class Ecmascript3Handler extends AbstractLanguageVersionHandler {

    @Override
    public XPathHandler getXPathHandler() {
	return new AbstractASTXPathHandler() {
	    public void initialize() {
	    }

	    public void initialize(IndependentContext context) {
=====================================================================
Found a 10 line (28 tokens) duplication in the following files: 
Starting at line 49 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTFunctionNode.java
Starting at line 17 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTObjectProperty.java

	return node.isExpressionClosure();
    }

    public boolean isGetter() {
	return node.isGetter();
    }

    public boolean isSetter() {
	return node.isSetter();
    }
=====================================================================
Found a 12 line (28 tokens) duplication in the following files: 
Starting at line 12 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTKeywordLiteral.java
Starting at line 11 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTName.java

	super.setImage(Token.typeToName(keywordLiteral.getType()).toLowerCase());
    }

    /**
     * Accept the visitor.
     */
    @Override
    public Object jjtAccept(EcmascriptParserVisitor visitor, Object data) {
	return visitor.visit(this, data);
    }

    public boolean isBoolean() {
=====================================================================
Found a 11 line (28 tokens) duplication in the following files: 
Starting at line 12 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTNumberLiteral.java
Starting at line 11 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTRegExpLiteral.java
Starting at line 11 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTStringLiteral.java

	super.setImage(numberLiteral.getValue());
    }

    /**
     * Accept the visitor.
     */
    public Object jjtAccept(EcmascriptParserVisitor visitor, Object data) {
	return visitor.visit(this, data);
    }

    public String getNormalizedImage() {
=====================================================================
Found a 3 line (28 tokens) duplication in the following files: 
Starting at line 43 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\AbstractEcmascriptNode.java
Starting at line 52 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\AbstractJavaNode.java
Starting at line 49 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\AbstractJspNode.java
Starting at line 52 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\AbstractPLSQLNode.java

    public Object childrenAccept(EcmascriptParserVisitor visitor, Object data) {
	if (children != null) {
	    for (int i = 0; i < children.length; ++i) {
=====================================================================
Found a 4 line (28 tokens) duplication in the following files: 
Starting at line 24 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\rule\EcmascriptRuleViolationFactory.java
Starting at line 24 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\rule\JspRuleViolationFactory.java
Starting at line 23 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\PLSQLRuleViolationFactory.java
Starting at line 24 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\xml\rule\XmlRuleViolationFactory.java

	return new ParametricRuleViolation<EcmascriptNode>(rule, ruleContext, (EcmascriptNode) node, message);
    }
    
    protected RuleViolation createRuleViolation(Rule rule, RuleContext ruleContext, Node node, String message, int beginLine, int endLine) {
=====================================================================
Found a 10 line (28 tokens) duplication in the following files: 
Starting at line 27 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTFieldDeclaration.java
Starting at line 50 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTMethodDeclaration.java

        return super.isPublic();
    }

    @Override
    public boolean isPublic() {
        if (isInterfaceMember()) {
            return true;
        }
        return super.isPublic();
    }
=====================================================================
Found a 4 line (28 tokens) duplication in the following files: 
Starting at line 80 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTVariableDeclaratorId.java
Starting at line 71 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTVariableOrConstantDeclaratorId.java

    public ASTType getTypeNode() {
        if (jjtGetParent() instanceof ASTFormalParameter) {
            return ((ASTFormalParameter) jjtGetParent()).getTypeNode();
        } else if (jjtGetParent() instanceof ASTLambdaExpression) {
=====================================================================
Found a 4 line (28 tokens) duplication in the following files: 
Starting at line 52 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\AbstractJavaNode.java
Starting at line 49 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\AbstractJspNode.java
Starting at line 52 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\AbstractPLSQLNode.java
Starting at line 133 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\AbstractVmNode.java

    public Object childrenAccept(JavaParserVisitor visitor, Object data) {
        if (children != null) {
            for (int i = 0; i < children.length; ++i) {
                ((JavaNode) children[i]).jjtAccept(visitor, data);
=====================================================================
Found a 8 line (28 tokens) duplication in the following files: 
Starting at line 101 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 167 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 221 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 382 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 493 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java

    public Object visit(ASTExpression node, Object data) {
        if (!(data instanceof Structure)) {
            return data;
        }
        Structure dataFlow = (Structure) data;

        // TODO what about throw stmts?
        if (node.jjtGetParent() instanceof ASTIfStatement) {
=====================================================================
Found a 2 line (28 tokens) duplication in the following files: 
Starting at line 199 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 213 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java

            LOGGER.finest("pushOnStack WHILE_LAST_STATEMENT: line " + node.getBeginLine() +", column " + node.getBeginColumn());
        } else if (node.jjtGetParent() instanceof ASTForStatement) {
=====================================================================
Found a 6 line (28 tokens) duplication in the following files: 
Starting at line 237 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 249 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 260 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 271 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 131 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 141 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 151 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 161 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 173 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 411 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 516 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 536 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 554 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 572 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 583 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 594 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java

    public Object visit(ASTBreakStatement node, Object data) {
        if (!(data instanceof Structure)) {
            return data;
        }
        Structure dataFlow = (Structure) data;
        dataFlow.createNewNode(node);
=====================================================================
Found a 9 line (28 tokens) duplication in the following files: 
Starting at line 53 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\basic\OverrideBothEqualsAndHashcodeRule.java
Starting at line 86 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\rules\CloneMethodMustImplementCloneable.java

                }
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTMethodDeclarator node, Object data) {
        if (implementsComparable) {
=====================================================================
Found a 9 line (28 tokens) duplication in the following files: 
Starting at line 135 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\AbstractNcssCountRule.java
Starting at line 159 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\AbstractNcssCountRule.java

    }

    @Override
    public Object visit(ASTReturnStatement node, Object data) {
        return countNodeChildren(node, data);
    }

    @Override
    public Object visit(ASTSwitchStatement node, Object data) {
=====================================================================
Found a 5 line (28 tokens) duplication in the following files: 
Starting at line 98 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\CyclomaticComplexityRule.java
Starting at line 117 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\CyclomaticComplexityRule.java

    int boolCompIf = NPathComplexityRule.sumExpressionComplexity( node.getFirstChildOfType( ASTExpression.class ) );
    // If statement always has a complexity of at least 1
    boolCompIf++;

    entryStack.peek().bumpDecisionPoints( boolCompIf );
=====================================================================
Found a 4 line (28 tokens) duplication in the following files: 
Starting at line 262 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\NPathComplexityRule.java
Starting at line 31 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\NcssMethodCountRule.java
Starting at line 432 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NPathComplexityRule.java
Starting at line 31 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NcssMethodCountRule.java

        return new String[] { ((ASTMethodDeclaration) point.getNode()).getMethodName(),
                String.valueOf((int) point.getScore()) };
    }
}
=====================================================================
Found a 4 line (28 tokens) duplication in the following files: 
Starting at line 74 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\coupling\CouplingBetweenObjectsRule.java
Starting at line 82 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\logging\MoreThanOneLoggerRule.java

        	Node reftypeNode = tNode.jjtGetChild(0);
                if (reftypeNode instanceof ASTReferenceType) {
                    Node classOrIntType = reftypeNode.jjtGetChild(0);
                    if (classOrIntType instanceof ASTClassOrInterfaceType) {
=====================================================================
Found a 8 line (28 tokens) duplication in the following files: 
Starting at line 38 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\AvoidDeeplyNestedIfStmtsRule.java
Starting at line 47 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\rule\basic\AvoidDeeplyNestedIfStmtsRule.java

        super.visit(node, data);
        if (depth == depthLimit) {
            addViolation(data, node);
        }
        depth--;
        return data;
    }
}
=====================================================================
Found a 13 line (28 tokens) duplication in the following files: 
Starting at line 817 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\ConstructorCallsOverridableMethodRule.java
Starting at line 87 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\rules\CloneMethodMustImplementCloneable.java

            }
        }
        return super.visit(node, data);
    }

    /**
     * Create a MethodHolder to hold the method.
     * Store the MethodHolder in the Map as the key
     * Store each method called by the current method as a List in the Map as the Object
     */
    @Override
    public Object visit(ASTMethodDeclarator node, Object data) {
        if (!(getCurrentEvalPackage() instanceof NullEvalPackage)) {//only evaluate if we have an eval package for this class
=====================================================================
Found a 8 line (28 tokens) duplication in the following files: 
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\ExcessiveLengthRule.java
Starting at line 24 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\design\ExcessiveLengthRule.java

    private Class<?> nodeClass;

    public ExcessiveLengthRule(Class<?> nodeClass) {
	this.nodeClass = nodeClass;
    }

    @Override
    public Object visit(JavaNode node, Object data) {
=====================================================================
Found a 8 line (28 tokens) duplication in the following files: 
Starting at line 112 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\GenericClassCounterRule.java
Starting at line 50 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\unnecessary\UselessOverridingMethodRule.java

         super.start(ctx);
     }

     @Override
     public Object visit(ASTCompilationUnit node, Object data) {
    	 init();
    	 return super.visit(node,data);
     }
=====================================================================
Found a 5 line (28 tokens) duplication in the following files: 
Starting at line 241 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\GodClassRule.java
Starting at line 252 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\GodClassRule.java
Starting at line 270 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\GodClassRule.java

    private String getNameImage(ASTPrimaryExpression node) {
        ASTPrimaryPrefix prefix = node.getFirstDescendantOfType(ASTPrimaryPrefix.class);
        ASTName name = prefix.getFirstDescendantOfType(ASTName.class);

        String image = null;
=====================================================================
Found a 4 line (28 tokens) duplication in the following files: 
Starting at line 216 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\strings\InsufficientStringBufferDeclarationRule.java
Starting at line 280 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\strings\InsufficientStringBufferDeclarationRule.java

        Node block = node.getFirstParentOfType(ASTBlockStatement.class);

        if (block == null) {
            block = node.getFirstParentOfType(ASTFieldDeclaration.class);
=====================================================================
Found a 2 line (28 tokens) duplication in the following files: 
Starting at line 75 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\ClassScope.java
Starting at line 27 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\LocalScope.java

        } else if (decl != null && !javaOccurrence.isThisOrSuper()) {
            List<NameOccurrence> nameOccurrences = getVariableDeclarations().get(decl);
=====================================================================
Found a 3 line (28 tokens) duplication in the following files: 
Starting at line 147 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\ClassScope.java
Starting at line 160 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\ClassScope.java

            if (occurrence.getImage().startsWith(className)) {
                images.add(clipClassName(occurrence.getImage()));
            }
=====================================================================
Found a 9 line (28 tokens) duplication in the following files: 
Starting at line 30 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\LocalScope.java
Starting at line 35 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\MethodScope.java
Starting at line 24 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\LocalScope.java

            Node n = javaOccurrence.getLocation();
            if (n instanceof ASTName) {
                ((ASTName) n).setNameDeclaration(decl);
            } // TODO what to do with PrimarySuffix case?
        }
        return decl;
    }

    public void addDeclaration(NameDeclaration nameDecl) {
=====================================================================
Found a 6 line (28 tokens) duplication in the following files: 
Starting at line 54 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\MethodScope.java
Starting at line 163 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\ClassScope.java
Starting at line 58 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\MethodScope.java

        ImageFinderFunction finder = new ImageFinderFunction(occurrence.getImage());
        Applier.apply(finder, getVariableDeclarations().keySet().iterator());
        return finder.getDecl();
    }

    public String getName() {
=====================================================================
Found a 7 line (28 tokens) duplication in the following files: 
Starting at line 316 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\ClassTypeResolver.java
Starting at line 322 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\ClassTypeResolver.java
Starting at line 349 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\ClassTypeResolver.java
Starting at line 355 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\ClassTypeResolver.java
Starting at line 361 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\ClassTypeResolver.java
Starting at line 470 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\ClassTypeResolver.java

	public Object visit(ASTConditionalOrExpression node, Object data) {
		populateType(node, "boolean");
		return super.visit(node, data);
	}

	@Override
	public Object visit(ASTConditionalAndExpression node, Object data) {
=====================================================================
Found a 7 line (28 tokens) duplication in the following files: 
Starting at line 33 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\DFAPLSQLGraphRule.java
Starting at line 39 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\DFAPLSQLGraphRule.java
Starting at line 45 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\DFAPLSQLGraphRule.java
Starting at line 52 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\DFAPLSQLGraphRule.java

    public Object visit(ASTTriggerUnit node, Object data) {
	executables.add(node);
	return super.visit(node, data);
    }

    @Override
    public Object visit(ASTProgramUnit node, Object data) {
=====================================================================
Found a 4 line (28 tokens) duplication in the following files: 
Starting at line 66 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\properties\CharacterMultiProperty.java
Starting at line 93 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\properties\CharacterMultiProperty.java

	    String[] values = StringUtil.substringsOf(charString, delimiter);
	    Character[] chars = new Character[values.length];
	    
	    for (int i=0; i<values.length;i++) {
=====================================================================
Found a 12 line (28 tokens) duplication in the following files: 
Starting at line 345 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\util\VelocityCharStream.java
Starting at line 402 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\util\VelocityCharStream.java

    public VelocityCharStream(java.io.Reader dstream, int startline,
            int startcolumn)
    {
        this(dstream, startline, startcolumn, 4096);
    }
    /**
     * @param dstream
     * @param startline
     * @param startcolumn
     * @param buffersize
     */
    public void ReInit(java.io.Reader dstream, int startline,
=====================================================================
Found a 1 line (28 tokens) duplication in the following files: 
Starting at line 40 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\CSVRenderer.java
Starting at line 43 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\CSVRenderer.java
Starting at line 44 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\CSVRenderer.java

    	new ColumnDescriptor<RuleViolation>("problem", 	"Problem", 		new Accessor<RuleViolation>() { public String get(int idx, RuleViolation rv, String cr) { return Integer.toString(idx); }} ),
=====================================================================
Found a 9 line (28 tokens) duplication in the following files: 
Starting at line 25 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\EmacsRenderer.java
Starting at line 33 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\TextRenderer.java
Starting at line 55 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\XMLRenderer.java

    public String defaultFileExtension() { return "emacs"; }
    
    /**
     * {@inheritDoc}
     */
    @Override
    public void renderFileViolations(Iterator<RuleViolation> violations) throws IOException {
		Writer writer = getWriter();
		StringBuilder buf = new StringBuilder();
=====================================================================
Found a 5 line (28 tokens) duplication in the following files: 
Starting at line 33 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\EmacsRenderer.java
Starting at line 108 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\HTMLRenderer.java
Starting at line 44 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\TextPadRenderer.java

		StringBuilder buf = new StringBuilder();
		while (violations.hasNext()) {
		    RuleViolation rv = violations.next();
		    buf.setLength(0);
		    buf.append(rv.getFilename());
=====================================================================
Found a 4 line (28 tokens) duplication in the following files: 
Starting at line 55 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\TextPadRenderer.java
Starting at line 48 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\TextRenderer.java

	    buf.append(rv.getDescription()).append(PMD.EOL);
	    writer.write(buf.toString());
	}
    }
=====================================================================
Found a 7 line (28 tokens) duplication in the following files: 
Starting at line 212 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\database\DBURI.java
Starting at line 550 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\database\DBURI.java

          schemasList = Arrays.asList(parameters.get("schemas").split(","));
        }

        if (null!=sourceCodeTypes)
        {
          sourceCodeTypesList = Arrays.asList(sourceCodeTypes.split(","));
        }
=====================================================================
Found a 4 line (27 tokens) duplication in the following files: 
Starting at line 54 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\CsTokenizer.java
Starting at line 62 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\CsTokenizer.java

						tokenEntries.add(new TokenEntry(String.valueOf(c)+"=", sourceCode.getFileName(), line));
						ic = reader.read();
					}
					else if(ic == c)
=====================================================================
Found a 5 line (27 tokens) duplication in the following files: 
Starting at line 86 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\CsTokenizer.java
Starting at line 104 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\CsTokenizer.java
Starting at line 220 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\CsTokenizer.java

						ic = reader.read();
					}
					else
					{
						tokenEntries.add(new TokenEntry(String.valueOf(c), sourceCode.getFileName(), line));
=====================================================================
Found a 7 line (27 tokens) duplication in the following files: 
Starting at line 398 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\GUI.java
Starting at line 405 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\GUI.java

        helper.add(ignoreLiteralsCheckbox);
        helper.addLabel("");
        helper.addLabel("");
        helper.nextRow();

        helper.nextRow();
        helper.addLabel("Ignore identifiers?");
=====================================================================
Found a 6 line (27 tokens) duplication in the following files: 
Starting at line 109 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\dcd\graph\ClassNode.java
Starting at line 33 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\dcd\graph\FieldNode.java

	public int compareTo(ClassNode that) {
		return this.name.compareTo(that.name);
	}

	public boolean equals(Object obj) {
		if (obj instanceof ClassNode) {
=====================================================================
Found a 6 line (27 tokens) duplication in the following files: 
Starting at line 126 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\dcd\graph\UsageGraphBuilder.java
Starting at line 160 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\dcd\graph\UsageGraphBuilder.java

				println("visitField:");
				printlnIndent("access: " + access);
				printlnIndent("name: " + name);
				printlnIndent("desc: " + desc);
				printlnIndent("signature: " + signature);
				printlnIndent("value: " + value);
=====================================================================
Found a 5 line (27 tokens) duplication in the following files: 
Starting at line 246 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dfa\pathfinder\DAAPathFinder.java
Starting at line 266 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dfa\pathfinder\DAAPathFinder.java

    private boolean equalsPseudoPathElementWithDoBranchNodeInLevel(DefaultMutableTreeNode level) {
	DataFlowNode inode = currentPath.getLast();

        if (!inode.isType(NodeType.DO_EXPR)) {
            return false;
=====================================================================
Found a 8 line (27 tokens) duplication in the following files: 
Starting at line 189 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\CandidateDAO.java
Starting at line 277 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\CandidateDAO.java

				stmt.close();
				connection.commit();
			}
		} catch (SQLException e) {

			log.error( "failed!", e );;
		}
	}
=====================================================================
Found a 7 line (27 tokens) duplication in the following files: 
Starting at line 544 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\CandidateDAO.java
Starting at line 753 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\CandidateDAO.java
Starting at line 873 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\CandidateDAO.java
Starting at line 899 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\CandidateDAO.java
Starting at line 922 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\CandidateDAO.java

				}
				rs.close();
				stmt.close();
			} catch (SQLException e) {

				log.error( "failed!", e );;
			}
=====================================================================
Found a 3 line (27 tokens) duplication in the following files: 
Starting at line 617 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\CandidateDAO.java
Starting at line 35 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\rules\singleton\SingletonRule.java

			ResultSet rs = stmt.executeQuery(sql);
			while (rs.next() == true) {
				Statement stmt2 = this.connection.createStatement();
=====================================================================
Found a 9 line (27 tokens) duplication in the following files: 
Starting at line 38 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\initialization\FirstTimeDBInit.java
Starting at line 147 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\initialization\FirstTimeDBInit.java

			initStatement.executeUpdate(sql);
			initStatement.close();
		} catch (SQLException e) {

			e.printStackTrace();
		}
	}

	private void createSwitchNodeTable() {
=====================================================================
Found a 11 line (27 tokens) duplication in the following files: 
Starting at line 69 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\initialization\FirstTimeDBInit.java
Starting at line 99 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\initialization\FirstTimeDBInit.java
Starting at line 126 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\initialization\FirstTimeDBInit.java
Starting at line 173 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\initialization\FirstTimeDBInit.java
Starting at line 200 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\initialization\FirstTimeDBInit.java
Starting at line 230 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\initialization\FirstTimeDBInit.java
Starting at line 261 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\initialization\FirstTimeDBInit.java

			stmt.executeUpdate(sql);
			stmt.close();
			connection.commit();

		} catch (SQLException e) {

			e.printStackTrace();
		}
	}

	private void createPackageTable() {
=====================================================================
Found a 8 line (27 tokens) duplication in the following files: 
Starting at line 27 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\rules\decorator\DecoratorRule.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\rules\facade\FacadeRule.java
Starting at line 27 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\rules\mediator\MediatorRule.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\rules\singleton\SingletonRule.java

		rManager.addListner(this);
	}

	public void propertyChange(PropertyChangeEvent evt) {
		this.startAnalysis();
	}

	private void startAnalysis() {
=====================================================================
Found a 12 line (27 tokens) duplication in the following files: 
Starting at line 11 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTBreakStatement.java
Starting at line 11 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTContinueStatement.java
Starting at line 11 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTExpressionStatement.java
Starting at line 12 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTKeywordLiteral.java

	super.setImage(breakStatement.getBreakLabel() != null ? breakStatement.getBreakLabel().getIdentifier() : null);
    }

    /**
     * Accept the visitor.
     */
    @Override
    public Object jjtAccept(EcmascriptParserVisitor visitor, Object data) {
	return visitor.visit(this, data);
    }

    public boolean hasLabel() {
=====================================================================
Found a 12 line (27 tokens) duplication in the following files: 
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTComment.java
Starting at line 11 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTName.java

	super(comment);
    }

    /**
     * Accept the visitor.
     */
    @Override
    public Object jjtAccept(EcmascriptParserVisitor visitor, Object data) {
	return visitor.visit(this, data);
    }

    public String getValue() {
=====================================================================
Found a 12 line (27 tokens) duplication in the following files: 
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTConditionalExpression.java
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTDoLoop.java
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTElementGet.java

	super(conditionalExpression);
    }

    /**
     * Accept the visitor.
     */
    @Override
    public Object jjtAccept(EcmascriptParserVisitor visitor, Object data) {
	return visitor.visit(this, data);
    }

    public EcmascriptNode getTestExpression() {
=====================================================================
Found a 7 line (27 tokens) duplication in the following files: 
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTDoLoop.java
Starting at line 20 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTForLoop.java

    public EcmascriptNode getBody() {
	return (EcmascriptNode) jjtGetChild(0);
    }

    public EcmascriptNode getCondition() {
	return (EcmascriptNode) jjtGetChild(1);
    }
=====================================================================
Found a 5 line (27 tokens) duplication in the following files: 
Starting at line 17 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTElementGet.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTFunctionCall.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTNewExpression.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTVariableInitializer.java

    public Object jjtAccept(EcmascriptParserVisitor visitor, Object data) {
	return visitor.visit(this, data);
    }

    public EcmascriptNode getTarget() {
=====================================================================
Found a 9 line (27 tokens) duplication in the following files: 
Starting at line 11 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTFunctionNode.java
Starting at line 11 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTLabel.java

	super.setImage(functionNode.getName());
    }

    /**
     * Accept the visitor.
     */
    public Object jjtAccept(EcmascriptParserVisitor visitor, Object data) {
	return visitor.visit(this, data);
    }
=====================================================================
Found a 3 line (27 tokens) duplication in the following files: 
Starting at line 92 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\CommentUtil.java
Starting at line 102 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\comments\AbstractCommentRule.java

			if (line.endsWith("*/")) {
				int end = line.length()-2;
				int start = line.startsWith("/**") ? 3 : line.startsWith("/*") ? 2 : 0;
=====================================================================
Found a 8 line (27 tokens) duplication in the following files: 
Starting at line 105 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\CommentUtil.java
Starting at line 110 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\comments\AbstractCommentRule.java

				filteredLines.add(line.substring(3));
				continue;
			}

			if (line.startsWith("/*")) {
				filteredLines.add(line.substring(2));
				continue;
			}
=====================================================================
Found a 6 line (27 tokens) duplication in the following files: 
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\JavaDataFlowNode.java
Starting at line 17 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\PLSQLDataFlowNode.java

    public JavaDataFlowNode(List<DataFlowNode> dataFlow, Node node) {
	super(dataFlow, node);
    }

    public String toString() {
	String res = "DataFlowNode: line " + this.getLine() + ", ";
=====================================================================
Found a 7 line (27 tokens) duplication in the following files: 
Starting at line 60 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\basic\AvoidUsingHardCodedIPRule.java
Starting at line 156 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\strings\AvoidDuplicateLiteralsRule.java

    }

    @Override
    public Object visit(ASTLiteral node, Object data) {
		if (!node.isStringLiteral()) {
		    return data;
		}
=====================================================================
Found a 8 line (27 tokens) duplication in the following files: 
Starting at line 54 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\basic\OverrideBothEqualsAndHashcodeRule.java
Starting at line 817 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\ConstructorCallsOverridableMethodRule.java

            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTMethodDeclarator node, Object data) {
        if (implementsComparable) {
=====================================================================
Found a 6 line (27 tokens) duplication in the following files: 
Starting at line 45 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\AbstractNcssCountRule.java
Starting at line 23 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\ExcessiveLengthRule.java
Starting at line 28 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\ExcessiveNodeCountRule.java

    protected AbstractNcssCountRule(Class<?> nodeClass) {
        this.nodeClass = nodeClass;
    }

    @Override
    public Object visit(JavaNode node, Object data) {
=====================================================================
Found a 4 line (27 tokens) duplication in the following files: 
Starting at line 50 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\AbstractNcssCountRule.java
Starting at line 33 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\ExcessiveNodeCountRule.java
Starting at line 51 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\AbstractNcssCountRule.java
Starting at line 51 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NcssObjectCountRule.java
Starting at line 33 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\design\ExcessiveNodeCountRule.java

    public Object visit(JavaNode node, Object data) {
        int numNodes = 0;

        for (int i = 0; i < node.jjtGetNumChildren(); i++) {
=====================================================================
Found a 7 line (27 tokens) duplication in the following files: 
Starting at line 138 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\comments\CommentRequiredRule.java
Starting at line 156 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\comments\CommentRequiredRule.java

								PUB_METHOD_CMT_REQUIREMENT_DESCRIPTOR.name()
										+ " " + CommentRequirement.Unwanted,
								decl.getBeginLine(), decl.getEndLine());
					}
				}
			}
		} else if (decl.isProtected()) {
=====================================================================
Found a 5 line (27 tokens) duplication in the following files: 
Starting at line 24 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\strings\AppendCharacterWithCharRule.java
Starting at line 40 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\strings\InefficientStringBufferingRule.java

    public Object visit(ASTLiteral node, Object data) {
        ASTBlockStatement bs = node.getFirstParentOfType(ASTBlockStatement.class);
        if (bs == null) {
            return data;
        }
=====================================================================
Found a 7 line (27 tokens) duplication in the following files: 
Starting at line 30 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\LocalScope.java
Starting at line 35 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\MethodScope.java
Starting at line 38 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\MethodScope.java

            Node n = javaOccurrence.getLocation();
            if (n instanceof ASTName) {
                ((ASTName) n).setNameDeclaration(decl);
            } // TODO what to do with PrimarySuffix case?
        }
        return decl;
    }
=====================================================================
Found a 7 line (27 tokens) duplication in the following files: 
Starting at line 96 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\VariableNameDeclaration.java
Starting at line 76 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\VariableNameDeclaration.java

    }

    @Override
    public String toString() {
	return "Variable: image = '" + node.getImage() + "', line = " + node.getBeginLine();
    }
}
=====================================================================
Found a 8 line (27 tokens) duplication in the following files: 
Starting at line 181 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\ClassTypeResolver.java
Starting at line 249 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\ClassTypeResolver.java
Starting at line 256 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\ClassTypeResolver.java
Starting at line 278 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\ClassTypeResolver.java
Starting at line 285 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\ClassTypeResolver.java
Starting at line 298 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\ClassTypeResolver.java
Starting at line 396 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\ClassTypeResolver.java
Starting at line 403 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\ClassTypeResolver.java
Starting at line 421 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\ClassTypeResolver.java
Starting at line 428 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\ClassTypeResolver.java
Starting at line 549 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\ClassTypeResolver.java
Starting at line 556 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\ClassTypeResolver.java
Starting at line 563 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\ClassTypeResolver.java

	public Object visit(ASTTypeDeclaration node, Object data) {
		super.visit(node, data);
		rollupTypeUnary(node);
		return data;
	}

	@Override
	public Object visit(ASTClassOrInterfaceType node, Object data) {
=====================================================================
Found a 8 line (27 tokens) duplication in the following files: 
Starting at line 328 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\ClassTypeResolver.java
Starting at line 335 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\ClassTypeResolver.java
Starting at line 342 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\ClassTypeResolver.java
Starting at line 375 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\ClassTypeResolver.java
Starting at line 382 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\ClassTypeResolver.java

	public Object visit(ASTInclusiveOrExpression node, Object data) {
		super.visit(node, data);
		rollupTypeBinaryNumericPromotion(node);
		return data;
	}

	@Override
	public Object visit(ASTExclusiveOrExpression node, Object data) {
=====================================================================
Found a 9 line (27 tokens) duplication in the following files: 
Starting at line 367 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\ClassTypeResolver.java
Starting at line 389 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\ClassTypeResolver.java

	public Object visit(ASTShiftExpression node, Object data) {
		super.visit(node, data);
		// Unary promotion on LHS is type of a shift operation
		rollupTypeUnaryNumericPromotion(node);
		return data;
	}

	@Override
	public Object visit(ASTAdditiveExpression node, Object data) {
=====================================================================
Found a 4 line (27 tokens) duplication in the following files: 
Starting at line 577 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\ClassTypeResolver.java
Starting at line 590 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\ClassTypeResolver.java
Starting at line 611 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\ClassTypeResolver.java

	private void rollupTypeUnary(TypeNode typeNode) {
		if (typeNode instanceof Node) {
			Node node = (Node)typeNode;
			if (node.jjtGetNumChildren() >= 1) {
=====================================================================
Found a 6 line (27 tokens) duplication in the following files: 
Starting at line 19 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\rule\JspRuleViolationFactory.java
Starting at line 18 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\PLSQLRuleViolationFactory.java
Starting at line 19 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\xml\rule\XmlRuleViolationFactory.java

    private JspRuleViolationFactory() {
    }

    @Override
    protected RuleViolation createRuleViolation(Rule rule, RuleContext ruleContext, Node node, String message) {
    	return new ParametricRuleViolation<JspNode>(rule, ruleContext, (JspNode) node, message);
=====================================================================
Found a 6 line (27 tokens) duplication in the following files: 
Starting at line 26 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\design\ExcessiveLengthRule.java
Starting at line 28 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\design\ExcessiveNodeCountRule.java

    public ExcessiveLengthRule(Class<?> nodeClass) {
	this.nodeClass = nodeClass;
    }

    @Override
    public Object visit(PLSQLNode node, Object data) {
=====================================================================
Found a 8 line (27 tokens) duplication in the following files: 
Starting at line 83 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\ClassScope.java
Starting at line 27 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\LocalScope.java

            }
        }
        return decl;
    }

    public Map<VariableNameDeclaration, List<NameOccurrence>> getVariableDeclarations() {
        return getDeclarations(VariableNameDeclaration.class);
    }
=====================================================================
Found a 2 line (27 tokens) duplication in the following files: 
Starting at line 23 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\properties\AbstractMultiPackagedProperty.java
Starting at line 49 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\properties\AbstractPackagedProperty.java

    protected AbstractMultiPackagedProperty(String theName,  String theDescription, T theDefault, String[] theLegalPackageNames, float theUIOrder) {
        super(theName, theDescription, theDefault, theLegalPackageNames, theUIOrder);
=====================================================================
Found a 15 line (27 tokens) duplication in the following files: 
Starting at line 46 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\properties\MethodMultiProperty.java
Starting at line 43 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\properties\TypeMultiProperty.java

    public MethodMultiProperty(String theName, String theDescription, Method[] theDefaults, String[] legalPackageNames, float theUIOrder) {
        super(theName, theDescription, theDefaults, legalPackageNames, theUIOrder);
    }

    /**
     * Constructor for MethodProperty.
     *
     * @param theName        String
     * @param theDescription String
     * @param methodDefaults    String
     * @param legalPackageNames String[]
     * @param theUIOrder     float
     * @throws IllegalArgumentException
     */
    public MethodMultiProperty(String theName, String theDescription, String methodDefaults, String[] legalPackageNames, float theUIOrder) {
=====================================================================
Found a 9 line (27 tokens) duplication in the following files: 
Starting at line 58 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\xpath\JaxenXPathRuleQuery.java
Starting at line 49 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\xpath\SaxonXPathRuleQuery.java

	return XPATH_1_0.equals(version);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings("unchecked")
    public List<Node> evaluate(Node node, RuleContext data) {
=====================================================================
Found a 18 line (27 tokens) duplication in the following files: 
Starting at line 52 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\ASTDirective.java
Starting at line 57 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\ASTMethod.java
Starting at line 63 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\ASTReference.java
Starting at line 103 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\ASTStringLiteral.java

    }

    /**
     * @see org.apache.velocity.runtime.parser.node.SimpleNode#jjtAccept(org.apache.velocity.runtime.parser.node.VmParserVisitor,
     *      java.lang.Object)
     */
    @Override
    public Object jjtAccept(final VmParserVisitor visitor, final Object data) {
        return visitor.visit(this, data);
    }

    /**
     * Sets the directive name. Used by the parser. This keeps us from having to dig it out of the token stream and
     * gives the parse the change to override.
     * 
     * @param str
     */
    public void setDirectiveName(final String str) {
=====================================================================
Found a 3 line (27 tokens) duplication in the following files: 
Starting at line 131 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\HTMLRenderer.java
Starting at line 158 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\HTMLRenderer.java
Starting at line 189 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\HTMLRenderer.java

		    buf.append("<td width=\"*\">" + d + "</td>" + PMD.EOL);
		    buf.append("</tr>" + PMD.EOL);
		    writer.write(buf.toString());
=====================================================================
Found a 11 line (27 tokens) duplication in the following files: 
Starting at line 49 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\TextRenderer.java
Starting at line 106 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\XMLRenderer.java

		    writer.write(buf.toString());
		}
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void end() throws IOException {
		Writer writer = getWriter();
		StringBuilder buf = new StringBuilder(500);
=====================================================================
Found a 4 line (27 tokens) duplication in the following files: 
Starting at line 123 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\XMLRenderer.java
Starting at line 139 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\XMLRenderer.java

		    StringUtil.appendXmlEscaped(buf, pe.getMsg());
		    buf.append("\"/>").append(PMD.EOL);
		    writer.write(buf.toString());
		}
=====================================================================
Found a 4 line (27 tokens) duplication in the following files: 
Starting at line 281 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\database\DBURI.java
Starting at line 324 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\database\DBURI.java

    LOGGER.log(Level.FINEST, "dburi,getQuery()={0}", query);
    if (null != query && !query.equals(""))
    {
      String[] params = query.split("&");  
=====================================================================
Found a 5 line (27 tokens) duplication in the following files: 
Starting at line 979 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\designer\Designer.java
Starting at line 1018 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\designer\Designer.java

		} catch (ParserConfigurationException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} catch (SAXException e) {
=====================================================================
Found a 6 line (26 tokens) duplication in the following files: 
Starting at line 390 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\PMD.java
Starting at line 407 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\PMD.java

						ToLongFunction<? super T> arg0) {
					// TODO Auto-generated method stub
					return null;
				}

				public  <T extends Comparable<? super T>> Comparator<T> naturalOrder() {
=====================================================================
Found a 11 line (26 tokens) duplication in the following files: 
Starting at line 350 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\RuleSet.java
Starting at line 20 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\ant\SourceLanguage.java
Starting at line 140 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\AbstractRule.java
Starting at line 32 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\AbstractRenderer.java
Starting at line 72 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\database\SourceObject.java

	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getDescription() {
=====================================================================
Found a 7 line (26 tokens) duplication in the following files: 
Starting at line 45 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\AnyTokenizer.java
Starting at line 232 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\CsTokenizer.java

            ex.printStackTrace();
        } finally {
            IOUtils.closeQuietly(reader);
            tokenEntries.add(TokenEntry.getEOF());
        }
    }
}
=====================================================================
Found a 4 line (26 tokens) duplication in the following files: 
Starting at line 69 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\CsTokenizer.java
Starting at line 221 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\CsTokenizer.java

					}
					else
					{
						tokenEntries.add(new TokenEntry(String.valueOf(c), sourceCode.getFileName(), line));
=====================================================================
Found a 6 line (26 tokens) duplication in the following files: 
Starting at line 23 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\FortranTokenizer.java
Starting at line 26 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\RubyTokenizer.java

		this.ignorableCharacter.add(")");
		this.ignorableCharacter.add(",");

		// setting markers for 'ignorable string' in Fortran
		this.ignorableStmt = new ArrayList<String>();
		this.ignorableStmt.add("do");
=====================================================================
Found a 8 line (26 tokens) duplication in the following files: 
Starting at line 91 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\SourceCode.java
Starting at line 120 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\SourceCode.java

	public StringCodeLoader(String code, String name) {
	    this.code = code;
	    this.name = name;
	}

	@Override
	public Reader getReader() {
	    return new StringReader(code);
=====================================================================
Found a 8 line (26 tokens) duplication in the following files: 
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ParserOptions.java
Starting at line 110 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\EcmascriptParserOptions.java
Starting at line 313 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\properties\AbstractProperty.java
Starting at line 171 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\xml\XmlParserOptions.java

    }

    @Override
    public boolean equals(Object obj) {
	if (this == obj) {
	    return true;
	}
	if (obj == null || getClass() != obj.getClass()) {
=====================================================================
Found a 5 line (26 tokens) duplication in the following files: 
Starting at line 131 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ast\xpath\DocumentNavigator.java
Starting at line 171 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ast\xpath\DocumentNavigator.java
Starting at line 192 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ast\xpath\DocumentNavigator.java

    public Iterator<Node> getChildAxisIterator(Object contextNode) {
	return new NodeIterator((Node) contextNode) {
	    @Override
	    protected Node getFirstNode(Node node) {
		return getFirstChild(node);
=====================================================================
Found a 6 line (26 tokens) duplication in the following files: 
Starting at line 61 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\initialization\FirstTimeDBInit.java
Starting at line 86 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\initialization\FirstTimeDBInit.java

			initStatement.executeUpdate(sql);
			initStatement.close();
			connection.commit();
			
			Statement stmt = connection.createStatement();
			sql = "INSERT into switchnodes (name, count, method_id, attribut_id, param_ID, methodType_id) "
=====================================================================
Found a 7 line (26 tokens) duplication in the following files: 
Starting at line 125 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\rules\state\StateRule.java
Starting at line 252 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\rules\state\StateRule.java
Starting at line 302 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\rules\state\StateRule.java

				switchID.add(rsSwitchIDs.getInt("id"));
				// Hole die verschiedenen Bedienungen aus den Cases
				// und gleiche sie ab
				int startLine = -2;
				int stopLine = -2;
				numberOfSwitchIDs = extractCaseAttributes(rsSwitchIDs,
						caseNames, numberOfSwitchIDs, startLine, stopLine);
=====================================================================
Found a 11 line (26 tokens) duplication in the following files: 
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTAssignment.java
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTBlock.java
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTEmptyExpression.java

	super(asssignment);
    }

    /**
     * Accept the visitor.
     */
    @Override
    public Object jjtAccept(EcmascriptParserVisitor visitor, Object data) {
	return visitor.visit(this, data);
    }
}
=====================================================================
Found a 12 line (26 tokens) duplication in the following files: 
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTAstRoot.java
Starting at line 11 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTBreakStatement.java
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTCatchClause.java
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTComment.java
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTConditionalExpression.java
Starting at line 11 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTContinueStatement.java
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTDoLoop.java
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTElementGet.java
Starting at line 11 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTExpressionStatement.java
Starting at line 12 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTKeywordLiteral.java
Starting at line 11 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTName.java

	super(astRoot);
    }

    /**
     * Accept the visitor.
     */
    @Override
    public Object jjtAccept(EcmascriptParserVisitor visitor, Object data) {
	return visitor.visit(this, data);
    }

    public int getNumComments() {
=====================================================================
Found a 11 line (26 tokens) duplication in the following files: 
Starting at line 11 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTConditionalExpression.java
Starting at line 11 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTDoLoop.java
Starting at line 11 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTElementGet.java
Starting at line 18 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTUnaryExpression.java

    }

    /**
     * Accept the visitor.
     */
    @Override
    public Object jjtAccept(EcmascriptParserVisitor visitor, Object data) {
	return visitor.visit(this, data);
    }

    public EcmascriptNode getTestExpression() {
=====================================================================
Found a 11 line (26 tokens) duplication in the following files: 
Starting at line 11 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTFunctionNode.java
Starting at line 12 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTNumberLiteral.java
Starting at line 11 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTRegExpLiteral.java
Starting at line 11 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTStringLiteral.java
Starting at line 12 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTVariableDeclaration.java

	super.setImage(functionNode.getName());
    }

    /**
     * Accept the visitor.
     */
    public Object jjtAccept(EcmascriptParserVisitor visitor, Object data) {
	return visitor.visit(this, data);
    }

    public int getNumParams() {
=====================================================================
Found a 10 line (26 tokens) duplication in the following files: 
Starting at line 11 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTLabel.java
Starting at line 11 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTXmlString.java

	super.setImage(label.getName());
    }

    /**
     * Accept the visitor.
     */
    public Object jjtAccept(EcmascriptParserVisitor visitor, Object data) {
	return visitor.visit(this, data);
    }
}
=====================================================================
Found a 3 line (26 tokens) duplication in the following files: 
Starting at line 43 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\AbstractEcmascriptNode.java
Starting at line 133 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\AbstractVmNode.java

    public Object childrenAccept(EcmascriptParserVisitor visitor, Object data) {
	if (children != null) {
	    for (int i = 0; i < children.length; ++i) {
=====================================================================
Found a 9 line (26 tokens) duplication in the following files: 
Starting at line 34 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\DumpFacade.java
Starting at line 36 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\xml\ast\DumpFacade.java

				visit((EcmascriptNode<?>) node.jjtGetChild(i), data + " ");
			}
			return data;
		} else {
			return data;
		}
	}

	private void dump(EcmascriptNode<?> node, String prefix) {
=====================================================================
Found a 10 line (26 tokens) duplication in the following files: 
Starting at line 22 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTArguments.java
Starting at line 18 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTFormalParameters.java
Starting at line 19 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTMethodDeclarator.java

        return this.jjtGetChild(0).jjtGetNumChildren();
    }

    /**
     * Accept the visitor. *
     */
    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }
}
=====================================================================
Found a 11 line (26 tokens) duplication in the following files: 
Starting at line 35 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTCompilationUnit.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTFieldDeclaration.java
Starting at line 18 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTLocalVariableDeclaration.java

    }

    /**
     * Accept the visitor. *
     */
    @Override
    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }

    public boolean declarationsAreInDefaultPackage() {
=====================================================================
Found a 3 line (26 tokens) duplication in the following files: 
Starting at line 58 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTFormalParameter.java
Starting at line 48 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTLocalVariableDeclaration.java
Starting at line 24 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTFormalParameter.java

    public ASTType getTypeNode() {
        for (int i = 0; i < jjtGetNumChildren(); i++) {
            if (jjtGetChild(i) instanceof ASTType) {
=====================================================================
Found a 5 line (26 tokens) duplication in the following files: 
Starting at line 81 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 91 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 101 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 133 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 152 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 167 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 210 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 221 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 237 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 249 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 260 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 271 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 131 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 141 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 151 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 161 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 173 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 369 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 382 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 411 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 431 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 493 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 516 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 536 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 554 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 572 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 583 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 594 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java

    public Object visit(ASTStatementExpression node, Object data) {
        if (!(data instanceof Structure)) {
            return data;
        }
        Structure dataFlow = (Structure) data;
=====================================================================
Found a 4 line (26 tokens) duplication in the following files: 
Starting at line 116 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 210 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 397 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java

        } else if (node.jjtGetParent() instanceof ASTSwitchStatement) {
            dataFlow.createNewNode(node); // START SWITCH
            dataFlow.pushOnStack(NodeType.SWITCH_START, dataFlow.getLast());
            LOGGER.finest("pushOnStack parent SWITCH_START: line " + node.getBeginLine() +", column " + node.getBeginColumn());
=====================================================================
Found a 4 line (26 tokens) duplication in the following files: 
Starting at line 120 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 302 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 307 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 313 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 219 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java

        } else if (node.jjtGetParent() instanceof ASTForStatement) {
            dataFlow.createNewNode(node); // FOR EXPR
            dataFlow.pushOnStack(NodeType.FOR_EXPR, dataFlow.getLast());
            LOGGER.finest("pushOnStack parent FOR_EXPR: line " + node.getBeginLine() +", column " + node.getBeginColumn());
=====================================================================
Found a 3 line (26 tokens) duplication in the following files: 
Starting at line 195 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 302 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 344 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 356 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java

                LOGGER.finest("pushOnStack IF_LAST_STATEMENT: line " + node.getBeginLine() +", column " + node.getBeginColumn());
            }
        } else if (node.jjtGetParent() instanceof ASTWhileStatement) {
=====================================================================
Found a 4 line (26 tokens) duplication in the following files: 
Starting at line 89 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\CyclomaticComplexityRule.java
Starting at line 92 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\CyclomaticComplexityRule.java

    reportLevel = getProperty(REPORT_LEVEL_DESCRIPTOR);
    showClassesComplexity = getProperty(SHOW_CLASSES_COMPLEXITY_DESCRIPTOR);
    showMethodsComplexity = getProperty(SHOW_METHODS_COMPLEXITY_DESCRIPTOR);
    super.visit( node, data );
=====================================================================
Found a 7 line (26 tokens) duplication in the following files: 
Starting at line 184 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\CyclomaticComplexityRule.java
Starting at line 59 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\coupling\CouplingBetweenObjectsRule.java
Starting at line 53 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\javabeans\BeanMembersShouldSerializeRule.java

  }

  @Override
public Object visit(ASTClassOrInterfaceDeclaration node, Object data) {
    if ( node.isInterface() ) {
      return data;
    }
=====================================================================
Found a 3 line (26 tokens) duplication in the following files: 
Starting at line 210 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\CyclomaticComplexityRule.java
Starting at line 273 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\CyclomaticComplexityRule.java
Starting at line 329 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\CyclomaticComplexityRule.java
Starting at line 379 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\CyclomaticComplexityRule.java

    entryStack.push( new Entry( node ) );
    super.visit( node, data );
	    Entry methodEntry = entryStack.pop();
=====================================================================
Found a 3 line (26 tokens) duplication in the following files: 
Starting at line 243 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\CyclomaticComplexityRule.java
Starting at line 224 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\CyclomaticComplexityRule.java
Starting at line 249 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\CyclomaticComplexityRule.java

    entryStack.push( new Entry( node ) );
    super.visit( node, data );
    Entry classEntry = entryStack.pop();
=====================================================================
Found a 2 line (26 tokens) duplication in the following files: 
Starting at line 96 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\NPathComplexityRule.java
Starting at line 177 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NPathComplexityRule.java
Starting at line 228 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NPathComplexityRule.java
Starting at line 262 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NPathComplexityRule.java
Starting at line 58 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\viewer\model\ASTModel.java

        for (int i = 0; i < node.jjtGetNumChildren(); i++) {
            if (node.jjtGetChild(i).getClass() == ASTStatement.class) {
=====================================================================
Found a 7 line (26 tokens) duplication in the following files: 
Starting at line 136 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\NPathComplexityRule.java
Starting at line 301 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NPathComplexityRule.java

        Integer nPathDo = (Integer) ((JavaNode) node.getFirstChildOfType(ASTStatement.class)).jjtAccept(this, data);

        return Integer.valueOf(boolCompDo + nPathDo + 1);
    }

    @Override
    public Object visit(ASTForStatement node, Object data) {
=====================================================================
Found a 7 line (26 tokens) duplication in the following files: 
Starting at line 147 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\NPathComplexityRule.java
Starting at line 314 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NPathComplexityRule.java

        Integer nPathFor = (Integer) ((JavaNode) node.getFirstChildOfType(ASTStatement.class)).jjtAccept(this, data);

        return Integer.valueOf(boolCompFor + nPathFor + 1);
    }

    @Override
    public Object visit(ASTReturnStatement node, Object data) {
=====================================================================
Found a 2 line (26 tokens) duplication in the following files: 
Starting at line 43 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\comments\CommentRequiredRule.java
Starting at line 47 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\comments\CommentRequiredRule.java
Starting at line 51 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\comments\CommentRequiredRule.java
Starting at line 55 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\comments\CommentRequiredRule.java
Starting at line 59 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\comments\CommentRequiredRule.java

			"headerCommentRequirement", "Header comments. Possible values: " + Arrays.toString(CommentRequirement.values()),
			CommentRequirement.labels(), CommentRequirement.values(), 0, 1.0f);
=====================================================================
Found a 6 line (26 tokens) duplication in the following files: 
Starting at line 98 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\comments\CommentRequiredRule.java
Starting at line 138 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\comments\CommentRequiredRule.java
Starting at line 156 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\comments\CommentRequiredRule.java
Starting at line 181 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\comments\CommentRequiredRule.java
Starting at line 208 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\comments\CommentRequiredRule.java

							HEADER_CMT_REQUIREMENT_DESCRIPTOR.name() + " "
									+ CommentRequirement.Unwanted,
							decl.getBeginLine(), decl.getEndLine());
				}
			}
		}
=====================================================================
Found a 7 line (26 tokens) duplication in the following files: 
Starting at line 22 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\controversial\OnlyOneReturnRule.java
Starting at line 54 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\NonThreadSafeSingletonRule.java

        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTMethodDeclaration node, Object data) {
        if (node.isAbstract()) {
=====================================================================
Found a 7 line (26 tokens) duplication in the following files: 
Starting at line 88 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\coupling\CouplingBetweenObjectsRule.java
Starting at line 94 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\coupling\CouplingBetweenObjectsRule.java

    public Object visit(ASTLocalVariableDeclaration node, Object data) {
        handleASTTypeChildren(node);
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTFormalParameter node, Object data) {
=====================================================================
Found a 4 line (26 tokens) duplication in the following files: 
Starting at line 160 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\AccessorClassGenerationRule.java
Starting at line 187 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\AccessorClassGenerationRule.java

                String interfaceName = node.getImage();
                int formerID = getClassID();
                setClassID(classDataList.size());
                ClassData newClassData = new ClassData(interfaceName);
=====================================================================
Found a 4 line (26 tokens) duplication in the following files: 
Starting at line 172 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\AccessorClassGenerationRule.java
Starting at line 208 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\AccessorClassGenerationRule.java

                String interfaceName = node.getImage();
                classDataList.clear();
                setClassID(0);
                classDataList.add(getClassID(), new ClassData(interfaceName));
=====================================================================
Found a 2 line (26 tokens) duplication in the following files: 
Starting at line 47 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\IdempotentOperationsRule.java
Starting at line 54 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\IdempotentOperationsRule.java

            Node n = lhs.jjtGetParent().jjtGetParent().jjtGetChild(1);
            if (n instanceof ASTPrimarySuffix && ((ASTPrimarySuffix) n).isArrayDereference()) {
=====================================================================
Found a 3 line (26 tokens) duplication in the following files: 
Starting at line 30 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\finalizers\AvoidCallingFinalizeRule.java
Starting at line 51 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\finalizers\AvoidCallingFinalizeRule.java

        MethodScope meth = name.getScope().getEnclosingScope(MethodScope.class);
        if (meth.getName().equals("finalize")) {
            return ctx;
=====================================================================
Found a 6 line (26 tokens) duplication in the following files: 
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\naming\AvoidFieldNameMatchingTypeNameRule.java
Starting at line 19 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\optimizations\AbstractOptimizationRule.java
Starting at line 24 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\unusedcode\UnusedPrivateMethodRule.java

public class AvoidFieldNameMatchingTypeNameRule extends AbstractJavaRule {

    public Object visit(ASTClassOrInterfaceDeclaration node, Object data) {
        if (node.isInterface()) {
            return data;
        }
=====================================================================
Found a 2 line (26 tokens) duplication in the following files: 
Starting at line 25 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\optimizations\AvoidInstantiatingObjectsInLoopsRule.java
Starting at line 29 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\optimizations\AvoidInstantiatingObjectsInLoopsRule.java

    private boolean fourthParentNotThrow(ASTAllocationExpression node) {
        return !(node.jjtGetParent().jjtGetParent().jjtGetParent().jjtGetParent() instanceof ASTThrowStatement);
=====================================================================
Found a 2 line (26 tokens) duplication in the following files: 
Starting at line 191 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\strings\ConsecutiveLiteralAppendsRule.java
Starting at line 166 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\strings\InsufficientStringBufferDeclarationRule.java

		for (int ix = 0; ix < additive.jjtGetNumChildren(); ix++) {
			Node childNode = additive.jjtGetChild(ix);
=====================================================================
Found a 3 line (26 tokens) duplication in the following files: 
Starting at line 38 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\unusedcode\UnusedPrivateMethodRule.java
Starting at line 41 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\unusedcode\UnusedPrivateMethodRule.java

            if (occs.isEmpty()) {
                addViolation(data, mnd.getNode(), mnd.getImage() + mnd.getParameterDisplaySignature());
            } else {
=====================================================================
Found a 11 line (26 tokens) duplication in the following files: 
Starting at line 110 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\MethodNameDeclaration.java
Starting at line 130 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\MethodNameDeclaration.java

            if (!myTypeImg.equals(otherTypeImg)) {
                return false;
            }

            // if type is ASTPrimitiveType and is an array, make sure the other one is also
        }
        return true;
    }

    @Override
    public int hashCode() {
=====================================================================
Found a 2 line (26 tokens) duplication in the following files: 
Starting at line 156 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\ClassTypeResolver.java
Starting at line 158 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\ClassTypeResolver.java

			LOG.log(Level.FINE, "Could not find class " + className + ", due to: " + e.getClass().getName() + ": " + e.getMessage());
		} catch (LinkageError e) {
=====================================================================
Found a 5 line (26 tokens) duplication in the following files: 
Starting at line 57 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\PMDASMClassLoader.java
Starting at line 69 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\PMDASMClassLoader.java

    public synchronized Class<?> loadClass(String name) throws ClassNotFoundException {
	if (dontBother.contains(name)) {
	    throw new ClassNotFoundException(name);
	}
	try {
=====================================================================
Found a 7 line (26 tokens) duplication in the following files: 
Starting at line 38 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\JspParser.java
Starting at line 52 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\PLSQLParser.java
Starting at line 38 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\VmParser.java

	return new net.sourceforge.pmd.lang.jsp.ast.JspParser(new SimpleCharStream(source)).CompilationUnit();
    }

    public Map<Integer, String> getSuppressMap() {
	return new HashMap<Integer, String>(); // FIXME
    }
}
=====================================================================
Found a 1 line (26 tokens) duplication in the following files: 
Starting at line 289 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 362 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java

        LOGGER.finest("entry ASTStatement: line " + node.getBeginLine() +", column " + node.getBeginColumn() + " -> " + node.getClass().getCanonicalName());
=====================================================================
Found a 8 line (26 tokens) duplication in the following files: 
Starting at line 39 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\VariableAccessVisitor.java
Starting at line 54 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\VariableAccessVisitor.java

    public void compute(ASTMethodDeclaration node) {
	//This includes Package Bodies and Object Type Bodies
	if (node.jjtGetParent() instanceof ASTPackageBody) {
	    this.computeNow(node);
	}
    }

    public void compute(ASTProgramUnit node) {
=====================================================================
Found a 7 line (26 tokens) duplication in the following files: 
Starting at line 52 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\ClassScope.java
Starting at line 29 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\MethodScope.java

        super.addDeclaration(declaration);
    }

    @Override
    public NameDeclaration addNameOccurrence(NameOccurrence occ) {
        PLSQLNameOccurrence occurrence = (PLSQLNameOccurrence)occ;
        NameDeclaration decl = findVariableHere(occurrence);
=====================================================================
Found a 8 line (26 tokens) duplication in the following files: 
Starting at line 30 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\LocalScope.java
Starting at line 26 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\MethodScope.java

    }

    public Map<VariableNameDeclaration, List<NameOccurrence>> getVariableDeclarations() {
        return getDeclarations(VariableNameDeclaration.class);
    }

    @Override
    public void addDeclaration(NameDeclaration declaration) {
=====================================================================
Found a 1 line (26 tokens) duplication in the following files: 
Starting at line 37 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\AbstractRuleViolationFactory.java
Starting at line 26 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\RuleViolationFactory.java

	public void addViolation(RuleContext ruleContext, Rule rule, Node node,	String message, int beginLine, int endLine, Object[] args) {
=====================================================================
Found a 2 line (26 tokens) duplication in the following files: 
Starting at line 22 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\properties\AbstractMultiNumericProperty.java
Starting at line 41 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\properties\AbstractNumericProperty.java

    protected AbstractMultiNumericProperty(String theName, String theDescription, Number lower, Number upper, T theDefault, float theUIOrder) {
        super(theName, theDescription, lower, upper, theDefault, theUIOrder);
=====================================================================
Found a 9 line (26 tokens) duplication in the following files: 
Starting at line 44 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\properties\DoubleMultiProperty.java
Starting at line 45 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\properties\FloatMultiProperty.java

	public DoubleMultiProperty(String theName, String theDescription, Double min, Double max, Double[] defaultValues, float theUIOrder) {
		super(theName, theDescription, min, max, defaultValues, theUIOrder);
	}
	
	/**
	 * @return Class
	 * @see net.sourceforge.pmd.PropertyDescriptor#type()
	 */
	public Class<Double[]> type() {
=====================================================================
Found a 2 line (26 tokens) duplication in the following files: 
Starting at line 57 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\properties\DoubleProperty.java
Starting at line 60 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\properties\FloatProperty.java
Starting at line 59 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\properties\IntegerProperty.java
Starting at line 58 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\properties\LongProperty.java

    public DoubleProperty(String theName, String theDescription, String minStr, String maxStr, String defaultStr, float theUIOrder) {
        this(theName, theDescription, doubleFrom(minStr), doubleFrom(maxStr), doubleFrom(defaultStr), theUIOrder);       
=====================================================================
Found a 9 line (26 tokens) duplication in the following files: 
Starting at line 44 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\properties\IntegerMultiProperty.java
Starting at line 44 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\properties\LongMultiProperty.java

	public IntegerMultiProperty(String theName, String theDescription, Integer min, Integer max, Integer[] theDefaults, float theUIOrder) {
		super(theName, theDescription, min, max, theDefaults, theUIOrder);
	}
	
	/**
	 * @return Class
	 * @see net.sourceforge.pmd.PropertyDescriptor#type()
	 */
	public Class<Integer[]> type() {
=====================================================================
Found a 20 line (26 tokens) duplication in the following files: 
Starting at line 27 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\properties\MethodMultiProperty.java
Starting at line 25 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\properties\TypeMultiProperty.java
Starting at line 24 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\properties\TypeProperty.java

			return new MethodMultiProperty(
					nameIn(valuesById),
					descriptionIn(valuesById),
					defaultValueIn(valuesById),
					legalPackageNamesIn(valuesById),
					0f);
		}
	};
	
    /**
     * Constructor for MethodProperty.
     *
     * @param theName        String
     * @param theDescription String
     * @param theDefaults    Method[]
     * @param legalPackageNames String[]
     * @param theUIOrder     float
     * @throws IllegalArgumentException
     */
    public MethodMultiProperty(String theName, String theDescription, Method[] theDefaults, String[] legalPackageNames, float theUIOrder) {
=====================================================================
Found a 10 line (26 tokens) duplication in the following files: 
Starting at line 47 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\ASTEscape.java
Starting at line 44 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\ASTMathNode.java
Starting at line 103 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\ASTStringLiteral.java

    }

    /**
     * @see org.apache.velocity.runtime.parser.node.SimpleNode#jjtAccept(org.apache.velocity.runtime.parser.node.VmParserVisitor,
     *      java.lang.Object)
     */
    @Override
    public Object jjtAccept(final VmParserVisitor visitor, final Object data) {
        return visitor.visit(this, data);
    }
=====================================================================
Found a 5 line (26 tokens) duplication in the following files: 
Starting at line 109 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\MacroParseException.java
Starting at line 145 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\TemplateParseException.java

    public String getMessage() {
        final StringBuffer sb = new StringBuffer(super.getMessage());
        appendTemplateInfo(sb);
        return sb.toString();
    }
=====================================================================
Found a 5 line (26 tokens) duplication in the following files: 
Starting at line 47 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\processor\MonoThreadProcessor.java
Starting at line 65 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\processor\PmdRunnable.java

			Report report = PMD.setupReport(rs, ctx, niceFileName);
			
			if (LOG.isLoggable(Level.FINE)) {
				LOG.fine("Processing " + ctx.getSourceCodeFilename());
			}
=====================================================================
Found a 3 line (26 tokens) duplication in the following files: 
Starting at line 61 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\processor\MonoThreadProcessor.java
Starting at line 78 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\processor\PmdRunnable.java

				processor.processSourceCode(stream, rs, ctx);
			} catch (PMDException pmde) {
				LOG.log(Level.FINE, "Error while processing file: "+niceFileName, pmde.getCause());
=====================================================================
Found a 1 line (26 tokens) duplication in the following files: 
Starting at line 41 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\CSVRenderer.java
Starting at line 42 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\CSVRenderer.java
Starting at line 46 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\CSVRenderer.java
Starting at line 47 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\CSVRenderer.java

    	new ColumnDescriptor<RuleViolation>("package",	"Package", 		new Accessor<RuleViolation>() { public String get(int idx, RuleViolation rv, String cr) { return rv.getPackageName(); }} ),
=====================================================================
Found a 10 line (26 tokens) duplication in the following files: 
Starting at line 38 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\IDEAJRenderer.java
Starting at line 33 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\TextPadRenderer.java

		definePropertyDescriptor(CLASS_AND_METHOD_NAME);
	}

	 public String defaultFileExtension() { return "txt"; }
	 
	/**
	 * {@inheritDoc}
	 */
	@Override
	public void renderFileViolations(Iterator<RuleViolation> violations) throws IOException {
=====================================================================
Found a 4 line (26 tokens) duplication in the following files: 
Starting at line 30 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\StringUtil.java
Starting at line 63 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\StringUtil.java

    public static boolean startsWithAny(String text, String... prefixes) {

    	for (String prefix : prefixes) {
    		if (text.startsWith(prefix)) return true;
=====================================================================
Found a 8 line (26 tokens) duplication in the following files: 
Starting at line 237 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\designer\Designer.java
Starting at line 312 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\designer\Designer.java

			Enumeration<ExceptionNode> e = new Enumeration<ExceptionNode>() {
				int i = 0;

				public boolean hasMoreElements() {
					return kids != null && i < kids.length;
				}

				public ExceptionNode nextElement() {
=====================================================================
Found a 3 line (25 tokens) duplication in the following files: 
Starting at line 85 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\PMD.java
Starting at line 114 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\CPD.java

            LOG.log(Level.FINE, "Located {0} database source objects", sourceObjectList.size());
            for (SourceObject sourceObject : sourceObjectList) {
                String falseFilePath = sourceObject.getPseudoFileName();
=====================================================================
Found a 29 line (25 tokens) duplication in the following files: 
Starting at line 409 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\PMDConfiguration.java
Starting at line 80 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\AbstractRenderer.java

    }

    /**
     * Get whether the report should show suppressed violations.
     * 
     * @return <code>true</code> if showing suppressed violations,
     *         <code>false</code> otherwise.
     */
    public boolean isShowSuppressedViolations() {
        return showSuppressedViolations;
    }

    /**
     * Set whether the report should show suppressed violations.
     * 
     * @param showSuppressedViolations
     *            <code>true</code> if showing suppressed violations,
     *            <code>false</code> otherwise.
     */
    public void setShowSuppressedViolations(boolean showSuppressedViolations) {
        this.showSuppressedViolations = showSuppressedViolations;
    }

    /**
     * Get the Report properties. These are used to create the Renderer.
     * 
     * @return The report properties.
     */
    public Properties getReportProperties() {
=====================================================================
Found a 3 line (25 tokens) duplication in the following files: 
Starting at line 144 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\Report.java
Starting at line 162 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\Report.java

    public Map<String, Integer> getCountSummary() {
        Map<String, Integer> summary = new HashMap<String, Integer>();
        for (RuleViolation rv : violationTree) {
=====================================================================
Found a 11 line (25 tokens) duplication in the following files: 
Starting at line 350 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\RuleSet.java
Starting at line 20 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\ant\SourceLanguage.java
Starting at line 54 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTElement.java
Starting at line 140 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\AbstractRule.java
Starting at line 32 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\AbstractRenderer.java
Starting at line 72 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\database\SourceObject.java

	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getDescription() {
=====================================================================
Found a 9 line (25 tokens) duplication in the following files: 
Starting at line 352 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\RuleSet.java
Starting at line 22 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\ant\SourceLanguage.java
Starting at line 8 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\Parameter.java
Starting at line 17 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTJspDirectiveAttribute.java
Starting at line 145 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\AbstractRule.java
Starting at line 37 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\AbstractRenderer.java
Starting at line 77 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\database\SourceObject.java

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getDescription() {
=====================================================================
Found a 6 line (25 tokens) duplication in the following files: 
Starting at line 175 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cli\PMDCommandLineInterface.java
Starting at line 37 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\CPDCommandLineInterface.java

    	return (System.getenv(NO_EXIT_AFTER_RUN) == null ? false : true);
    }

    private static void setStatusCode(int statusCode) {
    	System.setProperty(STATUS_CODE_PROPERTY, Integer.toString(statusCode));
    }
=====================================================================
Found a 5 line (25 tokens) duplication in the following files: 
Starting at line 200 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\CsTokenizer.java
Starting at line 218 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\CsTokenizer.java

						} while(Character.isJavaIdentifierPart(c));
						tokenEntries.add(new TokenEntry(b.toString(), sourceCode.getFileName(), line));
					}
					// numbers
					else if(Character.isDigit(c) || c == '.')
=====================================================================
Found a 4 line (25 tokens) duplication in the following files: 
Starting at line 40 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\dcd\graph\ConstructorNode.java
Starting at line 29 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\dcd\graph\MethodNode.java

			if (constructor == null) {
				SignatureReader signatureReader = new SignatureReader(desc);
				TypeSignatureVisitor visitor = new TypeSignatureVisitor();
				signatureReader.accept(visitor);
=====================================================================
Found a 4 line (25 tokens) duplication in the following files: 
Starting at line 131 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ast\xpath\DocumentNavigator.java
Starting at line 171 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ast\xpath\DocumentNavigator.java
Starting at line 192 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ast\xpath\DocumentNavigator.java
Starting at line 213 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ast\xpath\DocumentNavigator.java
Starting at line 255 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ast\xpath\DocumentNavigator.java

    public Iterator<Node> getChildAxisIterator(Object contextNode) {
	return new NodeIterator((Node) contextNode) {
	    @Override
	    protected Node getFirstNode(Node node) {
=====================================================================
Found a 3 line (25 tokens) duplication in the following files: 
Starting at line 371 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dfa\Linker.java
Starting at line 400 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dfa\Linker.java

        LOGGER.entering(CLASS_NAME,"computeIf(3)",first+","+ second +","+ last);
	DataFlowNode ifStart = this.braceStack.get(first).getDataFlowNode();
	DataFlowNode ifEnd = this.braceStack.get(second).getDataFlowNode();
=====================================================================
Found a 6 line (25 tokens) duplication in the following files: 
Starting at line 208 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dfa\SequenceChecker.java
Starting at line 229 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dfa\SequenceChecker.java

                    LOGGER.finer("aktStatus is NULL (lookAhead): Invalid transition");
                    LOGGER.exiting(this.getClass().getCanonicalName(),"run", false);
		    return false;
		}
                //Cope with incorrect bracesList contents
                else if (l >  maximumIterations )
=====================================================================
Found a 5 line (25 tokens) duplication in the following files: 
Starting at line 514 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\DesignPatternDetection.java
Starting at line 151 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\coupling\LawOfDemeterRule.java

	private boolean isNotLiteral(ASTPrimaryExpression expression) {
		ASTPrimaryPrefix prefix = expression
				.getFirstDescendantOfType(ASTPrimaryPrefix.class);
		// Haengt ein Prefix knoten an dann
		if (prefix != null) {
=====================================================================
Found a 6 line (25 tokens) duplication in the following files: 
Starting at line 534 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\CandidateDAO.java
Starting at line 563 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\CandidateDAO.java
Starting at line 885 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\CandidateDAO.java

		if (candidate.getPackageName() != null) {
			try {
				Statement stmt = this.connection.createStatement();

				ResultSet rs = stmt
						.executeQuery("SELECT ID FROM packages where name = '"
=====================================================================
Found a 10 line (25 tokens) duplication in the following files: 
Starting at line 70 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\initialization\FirstTimeDBInit.java
Starting at line 100 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\initialization\FirstTimeDBInit.java
Starting at line 127 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\initialization\FirstTimeDBInit.java
Starting at line 174 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\initialization\FirstTimeDBInit.java
Starting at line 201 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\initialization\FirstTimeDBInit.java
Starting at line 231 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\initialization\FirstTimeDBInit.java
Starting at line 262 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\initialization\FirstTimeDBInit.java
Starting at line 287 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\initialization\FirstTimeDBInit.java

			stmt.close();
			connection.commit();

		} catch (SQLException e) {

			e.printStackTrace();
		}
	}

	private void createPackageTable() {
=====================================================================
Found a 8 line (25 tokens) duplication in the following files: 
Starting at line 126 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\initialization\FirstTimeDBInit.java
Starting at line 173 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\initialization\FirstTimeDBInit.java
Starting at line 328 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\initialization\FirstTimeDBInit.java

			stmt.executeUpdate(sql2);
			stmt.close();
			connection.commit();
		} catch (SQLException e) {

			e.printStackTrace();
		}
	}
=====================================================================
Found a 6 line (25 tokens) duplication in the following files: 
Starting at line 222 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\initialization\FirstTimeDBInit.java
Starting at line 253 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\initialization\FirstTimeDBInit.java

					+ " FOREIGN KEY(method_id) REFERENCES methodes(id),"
					+ " FOREIGN KEY(class_id) REFERENCES classes(id))";
			initStatement.executeUpdate(sql);
			initStatement.close();
			Statement stmt = connection.createStatement();
			sql = "INSERT into attributes (name, classType_id, method_id, class_id, entry_type, count, startline) "
=====================================================================
Found a 11 line (25 tokens) duplication in the following files: 
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTArrayComprehension.java
Starting at line 11 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTArrayComprehensionLoop.java
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTForInLoop.java
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTForLoop.java
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTFunctionCall.java
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTNewExpression.java
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTSwitchStatement.java
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTTryStatement.java
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTVariableInitializer.java
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTWhileLoop.java
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTWithStatement.java
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTXmlExpression.java

	super(arrayComprehension);
    }

    /**
     * Accept the visitor.
     */
    public Object jjtAccept(EcmascriptParserVisitor visitor, Object data) {
	return visitor.visit(this, data);
    }

    public EcmascriptNode getResult() {
=====================================================================
Found a 11 line (25 tokens) duplication in the following files: 
Starting at line 12 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTArrayLiteral.java
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTIfStatement.java
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTObjectProperty.java
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTReturnStatement.java
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTSwitchCase.java

	super(arrayLiteral);
    }

    /**
     * Accept the visitor.
     */
    public Object jjtAccept(EcmascriptParserVisitor visitor, Object data) {
	return visitor.visit(this, data);
    }

    public boolean isDestructuring() {
=====================================================================
Found a 10 line (25 tokens) duplication in the following files: 
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTAssignment.java
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTAstRoot.java
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTBlock.java
Starting at line 11 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTBreakStatement.java
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTCatchClause.java
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTComment.java
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTConditionalExpression.java
Starting at line 11 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTContinueStatement.java
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTDoLoop.java
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTElementGet.java
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTEmptyExpression.java
Starting at line 11 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTExpressionStatement.java
Starting at line 12 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTKeywordLiteral.java
Starting at line 11 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTName.java

	super(asssignment);
    }

    /**
     * Accept the visitor.
     */
    @Override
    public Object jjtAccept(EcmascriptParserVisitor visitor, Object data) {
	return visitor.visit(this, data);
    }
=====================================================================
Found a 11 line (25 tokens) duplication in the following files: 
Starting at line 11 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTAstRoot.java
Starting at line 12 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTBreakStatement.java
Starting at line 11 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTCatchClause.java
Starting at line 11 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTComment.java
Starting at line 12 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTContinueStatement.java
Starting at line 12 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTExpressionStatement.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTKeywordLiteral.java
Starting at line 12 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTName.java
Starting at line 18 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTUnaryExpression.java

    }

    /**
     * Accept the visitor.
     */
    @Override
    public Object jjtAccept(EcmascriptParserVisitor visitor, Object data) {
	return visitor.visit(this, data);
    }

    public int getNumComments() {
=====================================================================
Found a 9 line (25 tokens) duplication in the following files: 
Starting at line 11 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTFunctionNode.java
Starting at line 11 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTXmlString.java

	super.setImage(functionNode.getName());
    }

    /**
     * Accept the visitor.
     */
    public Object jjtAccept(EcmascriptParserVisitor visitor, Object data) {
	return visitor.visit(this, data);
    }
=====================================================================
Found a 11 line (25 tokens) duplication in the following files: 
Starting at line 11 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTFunctionNode.java
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTLabeledStatement.java

	super.setImage(functionNode.getName());
    }

    /**
     * Accept the visitor.
     */
    public Object jjtAccept(EcmascriptParserVisitor visitor, Object data) {
	return visitor.visit(this, data);
    }

    public int getNumParams() {
=====================================================================
Found a 9 line (25 tokens) duplication in the following files: 
Starting at line 11 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTLabel.java
Starting at line 12 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTNumberLiteral.java
Starting at line 11 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTRegExpLiteral.java
Starting at line 11 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTStringLiteral.java
Starting at line 12 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTVariableDeclaration.java

	super.setImage(label.getName());
    }

    /**
     * Accept the visitor.
     */
    public Object jjtAccept(EcmascriptParserVisitor visitor, Object data) {
	return visitor.visit(this, data);
    }
=====================================================================
Found a 4 line (25 tokens) duplication in the following files: 
Starting at line 38 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\rule\EcmascriptRuleChainVisitor.java
Starting at line 37 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\JavaRuleChainVisitor.java
Starting at line 48 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\PLSQLRuleChainVisitor.java

	if (rule instanceof XPathRule) {
	    ((XPathRule) rule).evaluate(node, ctx);
	} else {
	    ((EcmascriptNode) node).jjtAccept((EcmascriptParserVisitor) rule, ctx);
=====================================================================
Found a 10 line (25 tokens) duplication in the following files: 
Starting at line 61 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTAnnotation.java
Starting at line 48 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTPrimarySuffix.java

    }

    /**
     * Accept the visitor.
     */
    @Override
    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
	return visitor.visit(this, data);
    }
}
=====================================================================
Found a 11 line (25 tokens) duplication in the following files: 
Starting at line 19 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTClassOrInterfaceDeclaration.java
Starting at line 28 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTFormalParameter.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTTryStatement.java

	return isNested();
    }

    /**
     * Accept the visitor. *
     */
    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }

    public boolean isNested() {
=====================================================================
Found a 11 line (25 tokens) duplication in the following files: 
Starting at line 35 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTCompilationUnit.java
Starting at line 23 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTLiteral.java
Starting at line 18 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTMethodDeclaration.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTPackageDeclaration.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTThrowStatement.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTType.java

    }

    /**
     * Accept the visitor. *
     */
    @Override
    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }

    public boolean declarationsAreInDefaultPackage() {
=====================================================================
Found a 12 line (25 tokens) duplication in the following files: 
Starting at line 22 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTConstructorDeclaration.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTInitializer.java

        return getParameters().getParameterCount();
    }


    /**
     * Accept the visitor. *
     */
    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }

    private boolean containsComment;
=====================================================================
Found a 10 line (25 tokens) duplication in the following files: 
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTFieldDeclaration.java
Starting at line 22 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTLiteral.java
Starting at line 17 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTLocalVariableDeclaration.java
Starting at line 17 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTMethodDeclaration.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTPackageDeclaration.java
Starting at line 47 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTPrimarySuffix.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTThrowStatement.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTType.java
Starting at line 22 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTVariableDeclaratorId.java

        super(p, id);
    }

    /**
     * Accept the visitor. *
     */
    @Override
    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }
=====================================================================
Found a 2 line (25 tokens) duplication in the following files: 
Starting at line 111 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 115 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 119 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 123 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 176 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 199 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 202 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 200 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 205 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 209 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 213 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 225 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java

            LOGGER.finest("pushOnStack parent IF_EXPR: line " + node.getBeginLine() +", column " + node.getBeginColumn());
        } else if (node.jjtGetParent() instanceof ASTWhileStatement) {
=====================================================================
Found a 3 line (25 tokens) duplication in the following files: 
Starting at line 148 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 244 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 256 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 267 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 278 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 116 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 127 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 137 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 147 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 157 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 167 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 179 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 238 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 543 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 561 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 579 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 590 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 601 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java

        LOGGER.finest("pushOnStack LABEL_STATEMENT: line " + node.getBeginLine() +", column " + node.getBeginColumn());
        return super.visit(node, data);
    }
=====================================================================
Found a 2 line (25 tokens) duplication in the following files: 
Starting at line 292 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 67 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\strings\ConsecutiveAppendsShouldReuseRule.java
Starting at line 613 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java

        for (int i = 0; i < parent.jjtGetNumChildren(); i++) {
            if (parent.jjtGetChild(i) instanceof ASTExpression) {
=====================================================================
Found a 6 line (25 tokens) duplication in the following files: 
Starting at line 87 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractPoorMethodCall.java
Starting at line 25 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\basic\CheckSkipResultRule.java

        if (!node.getNameDeclaration().getTypeImage().equals(targetTypename())) {
            return data;
        }

        for (NameOccurrence occ : node.getUsages()) {
            JavaNameOccurrence jocc = (JavaNameOccurrence)occ;
=====================================================================
Found a 6 line (25 tokens) duplication in the following files: 
Starting at line 18 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\JavaRuleViolationFactory.java
Starting at line 19 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\rule\JspRuleViolationFactory.java
Starting at line 18 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\PLSQLRuleViolationFactory.java
Starting at line 19 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\xml\rule\XmlRuleViolationFactory.java

	private JavaRuleViolationFactory() {
	}

	@Override
	protected RuleViolation createRuleViolation(Rule rule, RuleContext ruleContext, Node node, String message) {
		return new JavaRuleViolation(rule, ruleContext, (JavaNode) node, message);
=====================================================================
Found a 8 line (25 tokens) duplication in the following files: 
Starting at line 100 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\basic\BooleanInstantiationRule.java
Starting at line 64 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\strings\UselessStringValueOfRule.java

	            if (literal != null && ("\"true\"".equals(literal.getImage()) || "\"false\"".equals(literal.getImage()))) {
	                super.addViolation(data, node);
	                return data;
	            }
	        }
    	}
        return super.visit(node, data);
    }
=====================================================================
Found a 5 line (25 tokens) duplication in the following files: 
Starting at line 52 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\basic\DoubleCheckedLockingRule.java
Starting at line 27 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\basic\OverrideBothEqualsAndHashcodeRule.java
Starting at line 186 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\CyclomaticComplexityRule.java
Starting at line 18 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\controversial\OnlyOneReturnRule.java
Starting at line 61 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\coupling\CouplingBetweenObjectsRule.java
Starting at line 55 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\javabeans\BeanMembersShouldSerializeRule.java
Starting at line 20 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\junit\JUnitTestsShouldIncludeAssertRule.java
Starting at line 20 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\naming\AvoidFieldNameMatchingMethodNameRule.java
Starting at line 35 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\sunsecure\ArrayIsStoredDirectlyRule.java
Starting at line 25 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\sunsecure\MethodReturnsInternalArrayRule.java

    @Override
    public Object visit(ASTClassOrInterfaceDeclaration node, Object data) {
        if (node.isInterface()) {
            return data;
        }
=====================================================================
Found a 7 line (25 tokens) duplication in the following files: 
Starting at line 109 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\CyclomaticComplexityRule.java
Starting at line 131 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\CyclomaticComplexityRule.java

    entryStack.peek().bumpDecisionPoints();
    super.visit( node, data );
    return data;
  }

  @Override
public Object visit(ASTForStatement node, Object data) {
=====================================================================
Found a 4 line (25 tokens) duplication in the following files: 
Starting at line 209 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\CyclomaticComplexityRule.java
Starting at line 242 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\CyclomaticComplexityRule.java
Starting at line 258 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\CyclomaticComplexityRule.java

public Object visit(ASTMethodDeclaration node, Object data) {
    entryStack.push( new Entry( node ) );
    super.visit( node, data );
	    Entry methodEntry = entryStack.pop();
=====================================================================
Found a 2 line (25 tokens) duplication in the following files: 
Starting at line 96 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\NPathComplexityRule.java
Starting at line 83 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\unusedcode\UnusedPrivateFieldRule.java
Starting at line 177 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NPathComplexityRule.java
Starting at line 228 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NPathComplexityRule.java
Starting at line 262 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NPathComplexityRule.java
Starting at line 58 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\viewer\model\ASTModel.java

        for (int i = 0; i < node.jjtGetNumChildren(); i++) {
            if (node.jjtGetChild(i).getClass() == ASTStatement.class) {
=====================================================================
Found a 4 line (25 tokens) duplication in the following files: 
Starting at line 94 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\coupling\LoosePackageCouplingRule.java
Starting at line 98 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\coupling\LoosePackageCouplingRule.java

		    if (node.isImportOnDemand()) {
			addViolation(data, node, new Object[] { node.getImportedName(), pkg });
			break;
		    } else {
=====================================================================
Found a 3 line (25 tokens) duplication in the following files: 
Starting at line 27 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\AvoidReassigningParametersRule.java
Starting at line 45 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\UnnecessaryLocalBeforeReturnRule.java

            VariableNameDeclaration decl = entry.getKey();
            List<NameOccurrence> usages = entry.getValue();
            for (NameOccurrence occ: usages) {
=====================================================================
Found a 5 line (25 tokens) duplication in the following files: 
Starting at line 256 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\GodClassRule.java
Starting at line 274 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\GodClassRule.java

        String variableName = null;
        
        if (name != null) {
            int dotIndex = name.getImage().indexOf(".");
            if (dotIndex == -1) {
=====================================================================
Found a 6 line (25 tokens) duplication in the following files: 
Starting at line 48 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\IdempotentOperationsRule.java
Starting at line 55 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\IdempotentOperationsRule.java

            if (n instanceof ASTPrimarySuffix && ((ASTPrimarySuffix) n).isArrayDereference()) {
                return super.visit(node, data);
            }
        }

        if (rhs.jjtGetParent().jjtGetParent().jjtGetNumChildren() > 1) {
=====================================================================
Found a 17 line (25 tokens) duplication in the following files: 
Starting at line 67 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\SimplifyBooleanReturnsRule.java
Starting at line 117 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\SimplifyBooleanReturnsRule.java

            if(isSimpleReturn(returnStatement1) && isSimpleReturn(returnStatement2)) {
                // first case:
                // If
                //  Expr
                //  Statement
                //   ReturnStatement
                //  Statement
                //   ReturnStatement
                // i.e.,
                // if (foo)
                //  return true;
                // else
                //  return false;
              addViolation(data, node);
            }
            else {
        	Node expression1 = returnStatement1.jjtGetChild(0).jjtGetChild(0);
=====================================================================
Found a 8 line (25 tokens) duplication in the following files: 
Starting at line 45 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\ClassScope.java
Starting at line 42 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\SourceFileScope.java
Starting at line 93 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\ClassScope.java

        anonymousInnerClassCounter.set(v + 1);
    }

    public Map<ClassNameDeclaration, List<NameOccurrence>> getClassDeclarations() {
        return getDeclarations(ClassNameDeclaration.class);
    }

    public Map<MethodNameDeclaration, List<NameOccurrence>> getMethodDeclarations() {
=====================================================================
Found a 7 line (25 tokens) duplication in the following files: 
Starting at line 69 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\ClassScope.java
Starting at line 79 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\ClassScope.java

                Node n = javaOccurrence.getLocation();
                if (n instanceof ASTName) {
                    ((ASTName) n).setNameDeclaration(decl);
                } // TODO what to do with PrimarySuffix case?
            }

        } else if (decl != null && !javaOccurrence.isThisOrSuper()) {
=====================================================================
Found a 6 line (25 tokens) duplication in the following files: 
Starting at line 89 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\ClassScope.java
Starting at line 66 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\ClassScope.java

                Node n = javaOccurrence.getLocation();
                if (n instanceof ASTName) {
                    ((ASTName) n).setNameDeclaration(decl);
                } // TODO what to do with PrimarySuffix case?
            }
        }
=====================================================================
Found a 6 line (25 tokens) duplication in the following files: 
Starting at line 189 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\ClassScope.java
Starting at line 188 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\ClassScope.java

    }

    private String clipClassName(String s) {
        return s.substring(s.indexOf('.') + 1);
    }
}
=====================================================================
Found a 8 line (25 tokens) duplication in the following files: 
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\OccurrenceFinder.java
Starting at line 17 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\OccurrenceFinder.java

    public Object visit(ASTPrimaryExpression node, Object data) {
        NameFinder nameFinder = new NameFinder(node);

        // Maybe do some sort of State pattern thingy for when NameDeclaration
        // is null/not null?
        NameDeclaration decl = null;

        List<JavaNameOccurrence> names = nameFinder.getNames();
=====================================================================
Found a 7 line (25 tokens) duplication in the following files: 
Starting at line 26 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\Search.java
Starting at line 28 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\Search.java

            System.out.println("found " + decl);
        }
    }

    public void execute(Scope startingScope) {
        decl = searchUpward(occ, startingScope);
        if (TRACE) {
=====================================================================
Found a 5 line (25 tokens) duplication in the following files: 
Starting at line 25 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\xpath\GetCommentOnFunction.java
Starting at line 19 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\xpath\TypeOfFunction.java
Starting at line 19 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\xpath\MatchesFunction.java

public class GetCommentOnFunction implements Function {

    public static void registerSelfInSimpleContext() {
        // see http://jaxen.org/extensions.html
        ((SimpleFunctionContext) XPathFunctionContext.getInstance()).registerFunction(null, "getCommentOn", new GetCommentOnFunction());
=====================================================================
Found a 7 line (25 tokens) duplication in the following files: 
Starting at line 38 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\JspParser.java
Starting at line 52 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\PLSQLParser.java
Starting at line 38 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\VmParser.java
Starting at line 35 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\xml\XmlParser.java

	return new net.sourceforge.pmd.lang.jsp.ast.JspParser(new SimpleCharStream(source)).CompilationUnit();
    }

    public Map<Integer, String> getSuppressMap() {
	return new HashMap<Integer, String>(); // FIXME
    }
}
=====================================================================
Found a 16 line (25 tokens) duplication in the following files: 
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTAttribute.java
Starting at line 59 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTElement.java

    public String getName() {
        return name;
    }

    /**
     * @param name The name to set.
     */
    public void setName(String name) {
        this.name = name;
    }


    /**
     * @return boolean - true if the element has a namespace-prefix, false otherwise
     */
    public boolean isHasNamespacePrefix() {
=====================================================================
Found a 8 line (25 tokens) duplication in the following files: 
Starting at line 52 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\AbstractJspNode.java
Starting at line 55 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\AbstractPLSQLNode.java
Starting at line 136 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\AbstractVmNode.java

                ((JspNode) children[i]).jjtAccept(visitor, data);
            }
        }
        return data;
    }

    public String toString() {
        return JspParserTreeConstants.jjtNodeName[id];
=====================================================================
Found a 4 line (25 tokens) duplication in the following files: 
Starting at line 111 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 122 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 186 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 251 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 291 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java

            LOGGER.finest("immediate return ASTSqlStatement: line " + node.getBeginLine() +", column " + node.getBeginColumn());
            return data;
        }
        Structure dataFlow = (Structure) data;
=====================================================================
Found a 5 line (25 tokens) duplication in the following files: 
Starting at line 54 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 58 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 62 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 66 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java

	if (null != (c = node.getFirstParentOfType(ASTPackageSpecification.class))) {
	    return c.getImage();
	}
        else 
	if (null != (c = node.getFirstParentOfType(ASTTypeSpecification.class))) {
=====================================================================
Found a 7 line (25 tokens) duplication in the following files: 
Starting at line 98 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\CyclomaticComplexityRule.java
Starting at line 216 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NPathComplexityRule.java

  }


  @Override
public Object visit(ASTElsifClause node, Object data) {
    LOGGER.entering(CLASS_NAME,"visit(ASTElsifClause)");
    int boolCompIf = NPathComplexityRule.sumExpressionComplexity( node.getFirstChildOfType( ASTExpression.class ) );
=====================================================================
Found a 6 line (25 tokens) duplication in the following files: 
Starting at line 134 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\CyclomaticComplexityRule.java
Starting at line 303 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NPathComplexityRule.java

  }

  @Override
public Object visit(ASTForStatement node, Object data) {
    LOGGER.entering(CLASS_NAME,"visit(ASTForStatement)");
    int boolCompFor = NPathComplexityRule.sumExpressionComplexity( node.getFirstDescendantOfType( ASTExpression.class ) );
=====================================================================
Found a 6 line (25 tokens) duplication in the following files: 
Starting at line 147 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\CyclomaticComplexityRule.java
Starting at line 290 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NPathComplexityRule.java

  }

  @Override
public Object visit(ASTLoopStatement node, Object data) {
    LOGGER.entering(CLASS_NAME,"visit(ASTLoopStatement)");
    int boolCompDo = NPathComplexityRule.sumExpressionComplexity( node.getFirstChildOfType( ASTExpression.class ) );
=====================================================================
Found a 6 line (25 tokens) duplication in the following files: 
Starting at line 184 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\CyclomaticComplexityRule.java
Starting at line 277 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NPathComplexityRule.java

  }

@Override
public Object visit(ASTWhileStatement node, Object data) {
    LOGGER.entering(CLASS_NAME,"visit(ASTWhileStatement)");
    int boolCompWhile = NPathComplexityRule.sumExpressionComplexity( node.getFirstChildOfType( ASTExpression.class ) );
=====================================================================
Found a 20 line (25 tokens) duplication in the following files: 
Starting at line 196 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\AbstractRule.java
Starting at line 47 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\stat\DataPoint.java

	 }

	 /**
	  * @see Rule#getMessage()
	  */
	 public String getMessage() {
		 return message;
	 }

	 /**
	  * @see Rule#setMessage(String)
	  */
	 public void setMessage(String message) {
		 this.message = message;
	 }

	 /**
	  * @see Rule#getDescription()
	  */
	 public String getDescription() {
=====================================================================
Found a 2 line (25 tokens) duplication in the following files: 
Starting at line 60 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\properties\CharacterMultiProperty.java
Starting at line 59 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\properties\StringMultiProperty.java

	public CharacterMultiProperty(String theName, String theDescription, String theDefaults, Map<String, String> otherParams) {
	    this(theName, theDescription, charsIn(theDefaults, delimiterIn(otherParams)), 0.0f, delimiterIn(otherParams));
=====================================================================
Found a 8 line (25 tokens) duplication in the following files: 
Starting at line 27 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\properties\MethodMultiProperty.java
Starting at line 36 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\properties\MethodProperty.java
Starting at line 25 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\properties\TypeMultiProperty.java
Starting at line 24 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\properties\TypeProperty.java

			return new MethodMultiProperty(
					nameIn(valuesById),
					descriptionIn(valuesById),
					defaultValueIn(valuesById),
					legalPackageNamesIn(valuesById),
					0f);
		}
	};
=====================================================================
Found a 15 line (25 tokens) duplication in the following files: 
Starting at line 229 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\properties\MethodProperty.java
Starting at line 42 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\properties\TypeProperty.java

    public MethodProperty(String theName, String theDescription, Method theDefault, String[] legalPackageNames, float theUIOrder) {
        super(theName, theDescription, theDefault, legalPackageNames, theUIOrder);
    }

    /**
     * Constructor for MethodProperty.
     *
     * @param theName        String
     * @param theDescription String
     * @param defaultMethodStr String
     * @param legalPackageNames String[]
     * @param theUIOrder     float
     * @throws IllegalArgumentException
     */
    public MethodProperty(String theName, String theDescription, String defaultMethodStr, String[] legalPackageNames, float theUIOrder) {
=====================================================================
Found a 3 line (25 tokens) duplication in the following files: 
Starting at line 68 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\MacroParseException.java
Starting at line 86 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\MacroParseException.java
Starting at line 111 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\TemplateParseException.java
Starting at line 125 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\TemplateParseException.java

    public int getLineNumber() {
        if ((currentToken != null) && (currentToken.next != null)) {
            return currentToken.next.beginLine;
=====================================================================
Found a 6 line (25 tokens) duplication in the following files: 
Starting at line 12 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\VmParserVisitorAdapter.java
Starting at line 17 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\VmParserVisitorAdapter.java
Starting at line 22 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\VmParserVisitorAdapter.java
Starting at line 27 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\VmParserVisitorAdapter.java
Starting at line 32 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\VmParserVisitorAdapter.java
Starting at line 37 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\VmParserVisitorAdapter.java
Starting at line 42 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\VmParserVisitorAdapter.java
Starting at line 47 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\VmParserVisitorAdapter.java
Starting at line 52 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\VmParserVisitorAdapter.java
Starting at line 58 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\VmParserVisitorAdapter.java
Starting at line 64 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\VmParserVisitorAdapter.java
Starting at line 70 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\VmParserVisitorAdapter.java
Starting at line 76 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\VmParserVisitorAdapter.java
Starting at line 82 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\VmParserVisitorAdapter.java
Starting at line 88 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\VmParserVisitorAdapter.java
Starting at line 94 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\VmParserVisitorAdapter.java
Starting at line 100 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\VmParserVisitorAdapter.java
Starting at line 106 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\VmParserVisitorAdapter.java
Starting at line 112 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\VmParserVisitorAdapter.java
Starting at line 118 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\VmParserVisitorAdapter.java
Starting at line 124 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\VmParserVisitorAdapter.java
Starting at line 130 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\VmParserVisitorAdapter.java
Starting at line 136 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\VmParserVisitorAdapter.java
Starting at line 142 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\VmParserVisitorAdapter.java
Starting at line 148 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\VmParserVisitorAdapter.java
Starting at line 154 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\VmParserVisitorAdapter.java
Starting at line 160 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\VmParserVisitorAdapter.java
Starting at line 166 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\VmParserVisitorAdapter.java
Starting at line 172 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\VmParserVisitorAdapter.java
Starting at line 178 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\VmParserVisitorAdapter.java
Starting at line 184 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\VmParserVisitorAdapter.java
Starting at line 190 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\VmParserVisitorAdapter.java
Starting at line 196 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\VmParserVisitorAdapter.java
Starting at line 202 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\VmParserVisitorAdapter.java
Starting at line 208 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\VmParserVisitorAdapter.java
Starting at line 214 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\VmParserVisitorAdapter.java
Starting at line 220 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\VmParserVisitorAdapter.java
Starting at line 226 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\VmParserVisitorAdapter.java
Starting at line 232 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\VmParserVisitorAdapter.java
Starting at line 238 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\VmParserVisitorAdapter.java
Starting at line 244 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\VmParserVisitorAdapter.java
Starting at line 88 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\rule\AbstractVmRule.java
Starting at line 93 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\rule\AbstractVmRule.java
Starting at line 98 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\rule\AbstractVmRule.java
Starting at line 103 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\rule\AbstractVmRule.java
Starting at line 108 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\rule\AbstractVmRule.java
Starting at line 113 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\rule\AbstractVmRule.java
Starting at line 118 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\rule\AbstractVmRule.java
Starting at line 123 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\rule\AbstractVmRule.java
Starting at line 128 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\rule\AbstractVmRule.java
Starting at line 134 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\rule\AbstractVmRule.java
Starting at line 140 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\rule\AbstractVmRule.java
Starting at line 146 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\rule\AbstractVmRule.java
Starting at line 152 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\rule\AbstractVmRule.java
Starting at line 158 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\rule\AbstractVmRule.java
Starting at line 164 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\rule\AbstractVmRule.java
Starting at line 170 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\rule\AbstractVmRule.java
Starting at line 176 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\rule\AbstractVmRule.java
Starting at line 182 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\rule\AbstractVmRule.java
Starting at line 188 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\rule\AbstractVmRule.java
Starting at line 194 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\rule\AbstractVmRule.java
Starting at line 200 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\rule\AbstractVmRule.java
Starting at line 206 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\rule\AbstractVmRule.java
Starting at line 212 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\rule\AbstractVmRule.java
Starting at line 218 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\rule\AbstractVmRule.java
Starting at line 224 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\rule\AbstractVmRule.java
Starting at line 230 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\rule\AbstractVmRule.java
Starting at line 236 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\rule\AbstractVmRule.java
Starting at line 242 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\rule\AbstractVmRule.java
Starting at line 248 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\rule\AbstractVmRule.java
Starting at line 254 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\rule\AbstractVmRule.java
Starting at line 260 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\rule\AbstractVmRule.java
Starting at line 266 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\rule\AbstractVmRule.java
Starting at line 272 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\rule\AbstractVmRule.java
Starting at line 278 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\rule\AbstractVmRule.java
Starting at line 284 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\rule\AbstractVmRule.java
Starting at line 290 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\rule\AbstractVmRule.java
Starting at line 296 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\rule\AbstractVmRule.java
Starting at line 302 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\rule\AbstractVmRule.java
Starting at line 308 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\rule\AbstractVmRule.java
Starting at line 314 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\rule\AbstractVmRule.java
Starting at line 320 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\rule\AbstractVmRule.java

    public Object visit(final ASTprocess node, final Object data) {
        return visit((VmNode) node, data);
    }

    @Override
    public Object visit(final ASTEscapedDirective node, final Object data) {
=====================================================================
Found a 6 line (25 tokens) duplication in the following files: 
Starting at line 62 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\HTMLRenderer.java
Starting at line 97 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\HTMLRenderer.java

		renderFileReport(report);
		writer.write("</table>");
		glomProcessingErrors(writer, errors);
		if (showSuppressedViolations) {
		    glomSuppressions(writer, suppressed);
		}
=====================================================================
Found a 15 line (25 tokens) duplication in the following files: 
Starting at line 140 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\StringUtil.java
Starting at line 166 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\StringUtil.java

				index = original.indexOf(oldChar, last);
			    }
		    buf.append(original.substring(last));
		    return buf.toString();
		}
    }

    /**
     *
     * @param original String
     * @param oldString String
     * @param newString String
     * @return String
     */
    public static String replaceString(final String original, final String oldString, final String newString) {
=====================================================================
Found a 6 line (25 tokens) duplication in the following files: 
Starting at line 18 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\filter\AndFilter.java
Starting at line 18 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\filter\OrFilter.java

	public AndFilter(Filter<T>... filters) {
		super(filters);
	}

	public boolean filter(T obj) {
		boolean match = true;
=====================================================================
Found a 9 line (24 tokens) duplication in the following files: 
Starting at line 352 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\RuleSet.java
Starting at line 22 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\ant\SourceLanguage.java
Starting at line 8 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\Parameter.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTAttribute.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTDeclaration.java
Starting at line 20 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTDoctypeDeclaration.java
Starting at line 59 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTElement.java
Starting at line 20 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTJspDirective.java
Starting at line 17 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTJspDirectiveAttribute.java
Starting at line 145 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\AbstractRule.java
Starting at line 37 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\AbstractRenderer.java
Starting at line 77 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\database\SourceObject.java

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getDescription() {
=====================================================================
Found a 3 line (24 tokens) duplication in the following files: 
Starting at line 27 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\CPPTokenizer.java
Starting at line 20 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\JSPTokenizer.java

			Token currentToken = (Token) tokenManager.getNextToken();
			while (currentToken.image.length() > 0) {
				tokenEntries.add(new TokenEntry(currentToken.image, sourceCode.getFileName(), currentToken.beginLine));
=====================================================================
Found a 8 line (24 tokens) duplication in the following files: 
Starting at line 156 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dfa\pathfinder\DAAPathFinder.java
Starting at line 191 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dfa\pathfinder\DAAPathFinder.java

                        this.addRefPseudoPathElement(level, ref);
                        break;
                    } else {
                        level = this.getLastChildNode(level);
                        continue;
                    }
                } else {
                    this.addNewPseudoPathElement(level, doBranch);
=====================================================================
Found a 4 line (24 tokens) duplication in the following files: 
Starting at line 140 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\DesignPatternDetection.java
Starting at line 179 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\DesignPatternDetection.java
Starting at line 241 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\DesignPatternDetection.java
Starting at line 383 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\DesignPatternDetection.java
Starting at line 437 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\DesignPatternDetection.java
Starting at line 591 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\DesignPatternDetection.java

					.getParentsOfType(ASTEnumDeclaration.class).get(0)
					.getImage());
		} else {
			candidate.setClassName(method
=====================================================================
Found a 3 line (24 tokens) duplication in the following files: 
Starting at line 341 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\DesignPatternDetection.java
Starting at line 202 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\coupling\LawOfDemeterRule.java

			baseName = "unknown";
			if (!names.isEmpty()) {
				baseName = names.get(0).getImage();
=====================================================================
Found a 3 line (24 tokens) duplication in the following files: 
Starting at line 453 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\DesignPatternDetection.java
Starting at line 458 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\DesignPatternDetection.java

			if (expression.getFirstChildOfType(ASTPrimaryPrefix.class) != null) {
				if (expression.getFirstChildOfType(ASTPrimaryPrefix.class)
						.getFirstChildOfType(ASTAllocationExpression.class) != null) {
=====================================================================
Found a 3 line (24 tokens) duplication in the following files: 
Starting at line 616 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\CandidateDAO.java
Starting at line 640 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\CandidateDAO.java

					+ candidate.getAttributeNumber() + ";";
			ResultSet rs = stmt.executeQuery(sql);
			while (rs.next() == true) {
=====================================================================
Found a 5 line (24 tokens) duplication in the following files: 
Starting at line 779 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\CandidateDAO.java
Starting at line 794 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\CandidateDAO.java

								+ candidate.getAttributeName()
								+ "' AND class_id = "
								+ candidate.getClassNumber()
								+ " AND classtype_id = "
								+ candidate.getAttributeTypeID() + ";");
=====================================================================
Found a 4 line (24 tokens) duplication in the following files: 
Starting at line 783 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\CandidateDAO.java
Starting at line 860 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\CandidateDAO.java

								+ candidate.getAttributeTypeID() + ";");

				while (rs.next()) {
					Statement stmt2 = this.connection.createStatement();
=====================================================================
Found a 5 line (24 tokens) duplication in the following files: 
Starting at line 810 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\CandidateDAO.java
Starting at line 828 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\CandidateDAO.java

						+ candidate.getAttributeName()
						+ "' AND class_id = "
						+ candidate.getClassNumber()
						+ " AND method_id = "
						+ candidate.getMethodNumber() + ";";
=====================================================================
Found a 1 line (24 tokens) duplication in the following files: 
Starting at line 33 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\DBConnector.java
Starting at line 93 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\DBConnector.java

			System.err.println(e.getClass().getName() + ": " + e.getMessage());
=====================================================================
Found a 5 line (24 tokens) duplication in the following files: 
Starting at line 61 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\initialization\FirstTimeDBInit.java
Starting at line 86 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\initialization\FirstTimeDBInit.java
Starting at line 120 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\initialization\FirstTimeDBInit.java

			initStatement.executeUpdate(sql);
			initStatement.close();
			connection.commit();
			
			Statement stmt = connection.createStatement();
=====================================================================
Found a 6 line (24 tokens) duplication in the following files: 
Starting at line 97 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\rules\facade\FacadeRule.java
Starting at line 199 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\rules\state\StateRule.java

			found = true;
		}

		if (found == true) {
			Statement stmt2 = this.connection.createStatement();
			String sqlResult = "INSERT into ruleResults (ruleName,package_id,smellLevel,result)"
=====================================================================
Found a 3 line (24 tokens) duplication in the following files: 
Starting at line 120 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\EcmascriptParserOptions.java
Starting at line 181 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\xml\XmlParserOptions.java

	final EcmascriptParserOptions that = (EcmascriptParserOptions) obj;
	return StringUtil.isSame(this.suppressMarker, that.suppressMarker, false, false, false)
		&& this.recordingComments == that.recordingComments
=====================================================================
Found a 11 line (24 tokens) duplication in the following files: 
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTArrayComprehension.java
Starting at line 11 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTArrayComprehensionLoop.java
Starting at line 12 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTArrayLiteral.java
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTForInLoop.java
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTForLoop.java
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTFunctionCall.java
Starting at line 11 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTFunctionNode.java
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTIfStatement.java
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTLabeledStatement.java
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTLetNode.java
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTNewExpression.java
Starting at line 12 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTNumberLiteral.java
Starting at line 12 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTObjectLiteral.java
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTObjectProperty.java
Starting at line 11 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTRegExpLiteral.java
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTReturnStatement.java
Starting at line 11 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTStringLiteral.java
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTSwitchCase.java
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTSwitchStatement.java
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTTryStatement.java
Starting at line 12 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTVariableDeclaration.java
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTVariableInitializer.java
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTWhileLoop.java
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTWithStatement.java
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTXmlExpression.java

	super(arrayComprehension);
    }

    /**
     * Accept the visitor.
     */
    public Object jjtAccept(EcmascriptParserVisitor visitor, Object data) {
	return visitor.visit(this, data);
    }

    public EcmascriptNode getResult() {
=====================================================================
Found a 9 line (24 tokens) duplication in the following files: 
Starting at line 11 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTAssignment.java
Starting at line 11 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTBlock.java
Starting at line 11 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTEmptyExpression.java
Starting at line 18 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTUnaryExpression.java

    }

    /**
     * Accept the visitor.
     */
    @Override
    public Object jjtAccept(EcmascriptParserVisitor visitor, Object data) {
	return visitor.visit(this, data);
    }
=====================================================================
Found a 10 line (24 tokens) duplication in the following files: 
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTInfixExpression.java
Starting at line 11 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTLabel.java
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTParenthesizedExpression.java
Starting at line 11 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTPropertyGet.java
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTScope.java
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTThrowStatement.java
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTXmlDotQuery.java
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTXmlMemberGet.java
Starting at line 11 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTXmlString.java

	super(infixExpression);
    }

    /**
     * Accept the visitor.
     */
    public Object jjtAccept(EcmascriptParserVisitor visitor, Object data) {
	return visitor.visit(this, data);
    }
}
=====================================================================
Found a 2 line (24 tokens) duplication in the following files: 
Starting at line 27 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\rule\EcmascriptRuleViolationFactory.java
Starting at line 27 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\JavaRuleViolationFactory.java
Starting at line 27 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\rule\JspRuleViolationFactory.java
Starting at line 27 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\xml\rule\XmlRuleViolationFactory.java

    protected RuleViolation createRuleViolation(Rule rule, RuleContext ruleContext, Node node, String message, int beginLine, int endLine) {
		return null;	// FIXME
=====================================================================
Found a 12 line (24 tokens) duplication in the following files: 
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTAdditiveExpression.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTAllocationExpression.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTAndExpression.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTAnnotationMethodDeclaration.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTAnnotationTypeBody.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTAnnotationTypeDeclaration.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTAnnotationTypeMemberDeclaration.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTArgumentList.java
Starting at line 22 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTArguments.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTArrayDimsAndInits.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTArrayInitializer.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTAssertStatement.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTBreakStatement.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTCatchStatement.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTClassOrInterfaceBody.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTClassOrInterfaceType.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTConditionalAndExpression.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTConditionalOrExpression.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTContinueStatement.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTDefaultValue.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTDoStatement.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTEmptyStatement.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTEnumBody.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTEnumConstant.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTEnumDeclaration.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTEqualityExpression.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTExclusiveOrExpression.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTExpression.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTExtendsList.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTFinallyStatement.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTForInit.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTForStatement.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTForUpdate.java
Starting at line 18 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTFormalParameters.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTImplementsList.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTInclusiveOrExpression.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTInstanceOfExpression.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTLabeledStatement.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTLambdaExpression.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTMarkerAnnotation.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTMemberSelector.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTMemberValue.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTMemberValueArrayInitializer.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTMemberValuePair.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTMemberValuePairs.java
Starting at line 19 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTMethodDeclarator.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTMethodReference.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTMultiplicativeExpression.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTNameList.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTNormalAnnotation.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTNullLiteral.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTPostfixExpression.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTPreDecrementExpression.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTPreIncrementExpression.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTPrimaryExpression.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTRSIGNEDSHIFT.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTRUNSIGNEDSHIFT.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTRelationalExpression.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTResource.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTResourceSpecification.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTResources.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTReturnStatement.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTShiftExpression.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTSingleMemberAnnotation.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTStatement.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTStatementExpression.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTStatementExpressionList.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTSwitchStatement.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTSynchronizedStatement.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTTypeArgument.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTTypeArguments.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTTypeBound.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTTypeParameter.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTTypeParameters.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTUnaryExpression.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTUnaryExpressionNotPlusMinus.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTVariableDeclarator.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTVariableInitializer.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTWhileStatement.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTWildcardBounds.java

        super(p, id);
    }


    /**
     * Accept the visitor. *
     */
    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }

}
=====================================================================
Found a 9 line (24 tokens) duplication in the following files: 
Starting at line 61 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTAnnotation.java
Starting at line 35 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTCompilationUnit.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTFieldDeclaration.java
Starting at line 23 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTLiteral.java
Starting at line 18 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTLocalVariableDeclaration.java
Starting at line 18 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTMethodDeclaration.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTPackageDeclaration.java
Starting at line 48 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTPrimarySuffix.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTThrowStatement.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTType.java
Starting at line 23 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTVariableDeclaratorId.java

    }

    /**
     * Accept the visitor.
     */
    @Override
    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
	return visitor.visit(this, data);
    }
=====================================================================
Found a 9 line (24 tokens) duplication in the following files: 
Starting at line 22 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTArguments.java
Starting at line 19 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTClassOrInterfaceDeclaration.java
Starting at line 22 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTConstructorDeclaration.java
Starting at line 18 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTFormalParameters.java
Starting at line 19 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTMethodDeclarator.java

        return this.jjtGetChild(0).jjtGetNumChildren();
    }

    /**
     * Accept the visitor. *
     */
    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }
=====================================================================
Found a 12 line (24 tokens) duplication in the following files: 
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTBlock.java
Starting at line 22 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTConstructorDeclaration.java
Starting at line 55 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTImportDeclaration.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTInitializer.java
Starting at line 19 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTPrimitiveType.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTReferenceType.java

        super(p, id);
    }


    /**
     * Accept the visitor. *
     */
    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }

    private boolean containsComment;
=====================================================================
Found a 18 line (24 tokens) duplication in the following files: 
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTBlockStatement.java
Starting at line 19 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTClassOrInterfaceDeclaration.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTExplicitConstructorInvocation.java

        super(p, id);
    }


    /**
     * Accept the visitor. *
     */
    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }

    /**
     * Tells if this BlockStatement is an allocation statement.
     * This is done by
     *
     * @return the result of containsDescendantOfType(ASTAllocationExpression.class)
     */
    public final boolean isAllocation() {
=====================================================================
Found a 7 line (24 tokens) duplication in the following files: 
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTClassOrInterfaceBodyDeclaration.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTClassOrInterfaceDeclaration.java

    public ASTClassOrInterfaceBodyDeclaration(JavaParser p, int id) {
        super(p, id);
    }

    @Override
    public boolean isFindBoundary() {
	return isAnonymousInnerClass();
=====================================================================
Found a 3 line (24 tokens) duplication in the following files: 
Starting at line 25 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTClassOrInterfaceBodyDeclaration.java
Starting at line 35 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTFormalParameter.java
Starting at line 58 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTFormalParameter.java
Starting at line 28 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTLocalVariableDeclaration.java
Starting at line 48 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTLocalVariableDeclaration.java
Starting at line 20 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTTypeDeclaration.java
Starting at line 24 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTFormalParameter.java

    public boolean hasSuppressWarningsAnnotationFor(Rule rule) {
        for (int i = 0; i < jjtGetNumChildren(); i++) {
            if (jjtGetChild(i) instanceof ASTAnnotation) {
=====================================================================
Found a 10 line (24 tokens) duplication in the following files: 
Starting at line 35 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTClassOrInterfaceBodyDeclaration.java
Starting at line 20 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTClassOrInterfaceDeclaration.java
Starting at line 29 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTFormalParameter.java
Starting at line 17 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTTryStatement.java

    }

    /**
     * Accept the visitor. *
     */
    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }

    public boolean isAnonymousInnerClass() {
=====================================================================
Found a 7 line (24 tokens) duplication in the following files: 
Starting at line 92 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTFieldDeclaration.java
Starting at line 38 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTLocalVariableDeclaration.java

    }

    public boolean isArray() {
        return checkType() + checkDecl() > 0;
    }

    public int getArrayDepth() {
=====================================================================
Found a 5 line (24 tokens) duplication in the following files: 
Starting at line 25 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTPrimitiveType.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTReferenceType.java
Starting at line 29 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTVariableDeclaratorId.java

    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }

    private int arrayDepth;
=====================================================================
Found a 3 line (24 tokens) duplication in the following files: 
Starting at line 70 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTVariableDeclaratorId.java
Starting at line 62 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTVariableOrConstantDeclaratorId.java

        } else if (jjtGetParent().jjtGetParent() instanceof ASTLocalVariableDeclaration || jjtGetParent().jjtGetParent() instanceof ASTFieldDeclaration) {
            return findTypeNameNode(jjtGetParent().jjtGetParent());
        }
=====================================================================
Found a 3 line (24 tokens) duplication in the following files: 
Starting at line 109 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 198 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 203 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java

            dataFlow.createNewNode(node); // START IF
            dataFlow.pushOnStack(NodeType.IF_EXPR, dataFlow.getLast());
            LOGGER.finest("pushOnStack parent IF_EXPR: line " + node.getBeginLine() +", column " + node.getBeginColumn());
=====================================================================
Found a 3 line (24 tokens) duplication in the following files: 
Starting at line 125 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 227 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 259 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java

            dataFlow.createNewNode(node); // DO EXPR
            dataFlow.pushOnStack(NodeType.DO_EXPR, dataFlow.getLast());
            LOGGER.finest("pushOnStack parent DO_EXPR: line " + node.getBeginLine() +", column " + node.getBeginColumn());
=====================================================================
Found a 4 line (24 tokens) duplication in the following files: 
Starting at line 180 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 401 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 508 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java

            LOGGER.finest("pushOnStack DO_BEFORE_FIRST_STATEMENT: line " + node.getBeginLine() +", column " + node.getBeginColumn());
        }

        super.visit(node, data);
=====================================================================
Found a 3 line (24 tokens) duplication in the following files: 
Starting at line 192 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 229 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java

                LOGGER.finest("pushOnStack ELSE_LAST_STATEMENT: line " + node.getBeginLine() +", column " + node.getBeginColumn());
            } else {
                dataFlow.pushOnStack(NodeType.IF_LAST_STATEMENT, dataFlow.getLast());
=====================================================================
Found a 2 line (24 tokens) duplication in the following files: 
Starting at line 82 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\basic\DoubleCheckedLockingRule.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\unnecessary\UnnecessaryReturnRule.java

    public Object visit(ASTMethodDeclaration node, Object data) {
        if (node.getResultType().isVoid()) {
=====================================================================
Found a 6 line (24 tokens) duplication in the following files: 
Starting at line 171 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\CyclomaticComplexityRule.java
Starting at line 213 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\NPathComplexityRule.java

  }

  @Override
public Object visit(ASTConditionalExpression node, Object data) {
    if ( node.isTernary() ) {
      int boolCompTern = NPathComplexityRule.sumExpressionComplexity( node.getFirstChildOfType( ASTExpression.class ) );
=====================================================================
Found a 7 line (24 tokens) duplication in the following files: 
Starting at line 211 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\NPathComplexityRule.java
Starting at line 362 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\GodClassRule.java

        return Integer.valueOf(npath);

    }

    @Override
    public Object visit(ASTConditionalExpression node, Object data) {
        if (node.isTernary()) {
=====================================================================
Found a 6 line (24 tokens) duplication in the following files: 
Starting at line 28 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\NcssConstructorCountRule.java
Starting at line 53 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\design\ExcessiveLengthRule.java

    }

    @Override
    public Object[] getViolationParameters(DataPoint point) {
        // TODO need to put class name or constructor ID in string
        return new String[] { String.valueOf(((ASTConstructorDeclaration) point.getNode()).getParameterCount()),
=====================================================================
Found a 6 line (24 tokens) duplication in the following files: 
Starting at line 22 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\controversial\OnlyOneReturnRule.java
Starting at line 54 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\NonThreadSafeSingletonRule.java
Starting at line 68 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\migrating\JUnitUseExpectedRule.java
Starting at line 63 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\rules\CloneMethodMustImplementCloneable.java

        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTMethodDeclaration node, Object data) {
=====================================================================
Found a 6 line (24 tokens) duplication in the following files: 
Starting at line 95 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\coupling\CouplingBetweenObjectsRule.java
Starting at line 46 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\NonThreadSafeSingletonRule.java

        handleASTTypeChildren(node);
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTFieldDeclaration node, Object data) {
=====================================================================
Found a 3 line (24 tokens) duplication in the following files: 
Starting at line 26 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\AssignmentToNonFinalStaticRule.java
Starting at line 42 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\ImmutableFieldRule.java
Starting at line 78 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\PreserveStackTraceRule.java
Starting at line 43 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\UnnecessaryLocalBeforeReturnRule.java
Starting at line 86 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\unusedcode\UnusedFormalParameterRule.java
Starting at line 32 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\unusedcode\UnusedPrivateFieldRule.java

        Map<VariableNameDeclaration, List<NameOccurrence>> vars = node.getScope().getDeclarations(VariableNameDeclaration.class);
        for (Map.Entry<VariableNameDeclaration, List<NameOccurrence>> entry: vars.entrySet()) {
            VariableNameDeclaration decl = entry.getKey();
=====================================================================
Found a 6 line (24 tokens) duplication in the following files: 
Starting at line 756 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\ConstructorCallsOverridableMethodRule.java
Starting at line 204 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\ClassTypeResolver.java

        clearEvalPackages();
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTEnumDeclaration node, Object data) {
=====================================================================
Found a 4 line (24 tokens) duplication in the following files: 
Starting at line 116 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\GenericClassCounterRule.java
Starting at line 82 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\naming\VariableNamingConventionsRule.java
Starting at line 54 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\unnecessary\UselessOverridingMethodRule.java

     public Object visit(ASTCompilationUnit node, Object data) {
    	 init();
    	 return super.visit(node,data);
     }
=====================================================================
Found a 7 line (24 tokens) duplication in the following files: 
Starting at line 324 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\GodClassRule.java
Starting at line 330 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\GodClassRule.java
Starting at line 336 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\GodClassRule.java
Starting at line 342 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\GodClassRule.java
Starting at line 348 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\GodClassRule.java
Starting at line 354 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\GodClassRule.java
Starting at line 360 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\GodClassRule.java

    public Object visit(ASTConditionalOrExpression node, Object data) {
        wmcCounter++;
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTConditionalAndExpression node, Object data) {
=====================================================================
Found a 4 line (24 tokens) duplication in the following files: 
Starting at line 81 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\imports\UnusedImportsRule.java
Starting at line 40 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\rules\imports\UnusedImports.java

                    ImportWrapper candidate = new ImportWrapper(s, s, new DummyJavaNode(-1));

                    if (imports.contains(candidate)) {
                        imports.remove(candidate);
=====================================================================
Found a 6 line (24 tokens) duplication in the following files: 
Starting at line 113 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\imports\UnusedImportsRule.java
Starting at line 216 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\ClassTypeResolver.java

        check(node);
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTName node, Object data) {
=====================================================================
Found a 4 line (24 tokens) duplication in the following files: 
Starting at line 68 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\strictexception\SignatureDeclareThrowsExceptionRule.java
Starting at line 136 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\rules\SignatureDeclareThrowsException.java

        List<ASTName> exceptionList = constructorDeclaration.findDescendantsOfType(ASTName.class);
        if (!exceptionList.isEmpty()) {
            evaluateExceptions(exceptionList, o);
        }
=====================================================================
Found a 7 line (24 tokens) duplication in the following files: 
Starting at line 54 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\ClassScope.java
Starting at line 24 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\MethodScope.java
Starting at line 86 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\ClassScope.java

    }

    public Map<VariableNameDeclaration, List<NameOccurrence>> getVariableDeclarations() {
        return getDeclarations(VariableNameDeclaration.class);
    }

    public NameDeclaration addNameOccurrence(NameOccurrence occurrence) {
=====================================================================
Found a 5 line (24 tokens) duplication in the following files: 
Starting at line 69 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\ClassScope.java
Starting at line 89 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\ClassScope.java
Starting at line 24 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\LocalScope.java
Starting at line 38 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\MethodScope.java

                Node n = javaOccurrence.getLocation();
                if (n instanceof ASTName) {
                    ((ASTName) n).setNameDeclaration(decl);
                } // TODO what to do with PrimarySuffix case?
            }
=====================================================================
Found a 3 line (24 tokens) duplication in the following files: 
Starting at line 27 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\LocalScope.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\LocalScope.java

        if (decl != null && !javaOccurrence.isThisOrSuper()) {
            List<NameOccurrence> nameOccurrences = getVariableDeclarations().get(decl);
            nameOccurrences.add(javaOccurrence);
=====================================================================
Found a 5 line (24 tokens) duplication in the following files: 
Starting at line 30 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\LocalScope.java
Starting at line 35 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\MethodScope.java
Starting at line 66 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\ClassScope.java
Starting at line 79 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\ClassScope.java

            Node n = javaOccurrence.getLocation();
            if (n instanceof ASTName) {
                ((ASTName) n).setNameDeclaration(decl);
            } // TODO what to do with PrimarySuffix case?
        }
=====================================================================
Found a 3 line (24 tokens) duplication in the following files: 
Starting at line 24 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\MethodNameDeclaration.java
Starting at line 40 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\MethodNameDeclaration.java
Starting at line 42 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\MethodNameDeclaration.java
Starting at line 58 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\MethodNameDeclaration.java
Starting at line 98 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\MethodNameDeclaration.java

        ASTFormalParameters params = (ASTFormalParameters) node.jjtGetChild(0);
        for (int i = 0; i < ((ASTMethodDeclarator) node).getParameterCount(); i++) {
            ASTFormalParameter p = (ASTFormalParameter) params.jjtGetChild(i);
=====================================================================
Found a 6 line (24 tokens) duplication in the following files: 
Starting at line 181 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\visitors\PMDASMVisitor.java
Starting at line 300 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\visitors\PMDASMVisitor.java
Starting at line 394 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\visitors\PMDASMVisitor.java

		public AnnotationVisitor visitAnnotation(String desc, boolean visible) {
			parent.addType(Type.getType(desc));
			return parent.annotationVisitor;
		}

		public void visitAttribute(Attribute attr) {
=====================================================================
Found a 5 line (24 tokens) duplication in the following files: 
Starting at line 199 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\visitors\PMDASMVisitor.java
Starting at line 303 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\visitors\PMDASMVisitor.java

		}

		public AnnotationVisitor visitAnnotation(String name, String desc) {
			parent.addType(Type.getType(desc));
			return this;
=====================================================================
Found a 6 line (24 tokens) duplication in the following files: 
Starting at line 38 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\rule\JspRuleChainVisitor.java
Starting at line 42 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\rule\VmRuleChainVisitor.java

            ((JspNode) node).jjtAccept((JspParserVisitor) rule, ctx);
        } else {
            ((XPathRule) rule).evaluate(node, ctx);
        }
    }
}
=====================================================================
Found a 11 line (24 tokens) duplication in the following files: 
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTMethodDeclaration.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTPackageBody.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTPackageSpecification.java
Starting at line 22 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTProgramUnit.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTTypeSpecification.java
Starting at line 47 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\AbstractPLSQLNode.java

  public Object jjtAccept(PLSQLParserVisitor visitor, Object data) {
    return visitor.visit(this, data);
  }

  /**
   * Gets the name of the method.
   *
   * @return a String representing the name of the method
   */
  @Override
  public String getMethodName() {
=====================================================================
Found a 5 line (24 tokens) duplication in the following files: 
Starting at line 40 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 122 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java

		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTPackageBody node, Object data) {
=====================================================================
Found a 5 line (24 tokens) duplication in the following files: 
Starting at line 580 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 660 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java

		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTTypeSpecification node, Object data) {
=====================================================================
Found a 5 line (24 tokens) duplication in the following files: 
Starting at line 610 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 697 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java

		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTTriggerTimingPointSection node, Object data) {
=====================================================================
Found a 9 line (24 tokens) duplication in the following files: 
Starting at line 113 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\AbstractNcssCountRule.java
Starting at line 121 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\AbstractNcssCountRule.java
Starting at line 129 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\AbstractNcssCountRule.java

    public Object visit(ASTIfStatement node, Object data) {

	Integer lineCount = countNodeChildren(node, data);

	return lineCount;
    }

    @Override
    public Object visit(ASTElsifClause node, Object data) {
=====================================================================
Found a 7 line (24 tokens) duplication in the following files: 
Starting at line 276 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\CyclomaticComplexityRule.java
Starting at line 332 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\CyclomaticComplexityRule.java
Starting at line 382 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\CyclomaticComplexityRule.java

    LOGGER.finest("ASTProgramUnit: ComplexityAverage==" + methodEntry.getComplexityAverage() 
                   +", highestDecisionPoint=" 
                   + methodEntry.highestDecisionPoints
                 );
    if ( showMethodsComplexity ) {
	    //Entry methodEntry = entryStack.pop();
	    int methodDecisionPoints = methodEntry.decisionPoints;
=====================================================================
Found a 4 line (24 tokens) duplication in the following files: 
Starting at line 55 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\ClassScope.java
Starting at line 17 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\LocalScope.java

    @Override
    public NameDeclaration addNameOccurrence(NameOccurrence occ) {
        PLSQLNameOccurrence occurrence = (PLSQLNameOccurrence)occ;
        NameDeclaration decl = findVariableHere(occurrence);
=====================================================================
Found a 7 line (24 tokens) duplication in the following files: 
Starting at line 26 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\Search.java
Starting at line 33 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\Search.java

        decl = searchUpward(occ, occ.getLocation().getScope());
        if (LOGGER.isLoggable(Level.FINEST)) {
            LOGGER.finest("found " + decl);
        }
    }

    public void execute(Scope startingScope) {
=====================================================================
Found a 15 line (24 tokens) duplication in the following files: 
Starting at line 210 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\AbstractRule.java
Starting at line 46 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\AbstractRenderer.java

	 }

	 /**
	  * @see Rule#getDescription()
	  */
	 public String getDescription() {
		 return description;
	 }

	 /**
	  * @see Rule#setDescription(String)
	  */
	 public void setDescription(String description) {
		 this.description = description;
	 }
=====================================================================
Found a 9 line (24 tokens) duplication in the following files: 
Starting at line 41 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\properties\AbstractDelimitedProperty.java
Starting at line 104 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\properties\AbstractNumericProperty.java
Starting at line 55 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\properties\AbstractPackagedProperty.java

    }
    
    /**
     * @param attributes Map<String,String>
     */
    protected void addAttributesTo(Map<String, String> attributes) {
        super.addAttributesTo(attributes);
        
        attributes.put(DELIM_ID, Character.toString(multiValueDelimiter));
=====================================================================
Found a 1 line (24 tokens) duplication in the following files: 
Starting at line 33 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\properties\AbstractEnumeratedProperty.java
Starting at line 49 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\properties\EnumeratedMultiProperty.java

    public AbstractEnumeratedProperty(String theName, String theDescription, String[] theLabels, E[] theChoices, int[] choiceIndices, float theUIOrder, boolean isMulti) {
=====================================================================
Found a 3 line (24 tokens) duplication in the following files: 
Starting at line 45 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\properties\PropertyDescriptorFactory.java
Starting at line 91 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\properties\PropertyDescriptorFactory.java

		} else if ("Character[]".equals(type)) {
			checkDelimiter(name, type, delimiter);
			char delim = delimiter.charAt(0);
=====================================================================
Found a 2 line (24 tokens) duplication in the following files: 
Starting at line 35 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\symboltable\AbstractScope.java
Starting at line 75 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\symboltable\AbstractScope.java

        for (Map.Entry<NameDeclaration, List<NameOccurrence>> e : nameDeclarations.entrySet()) {
            if (clazz.isAssignableFrom(e.getKey().getClass())) {
=====================================================================
Found a 11 line (24 tokens) duplication in the following files: 
Starting at line 59 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\ASTDirective.java
Starting at line 64 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\ASTMethod.java
Starting at line 70 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\ASTReference.java
Starting at line 110 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\ASTStringLiteral.java
Starting at line 125 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\AbstractVmNode.java

    public Object jjtAccept(final VmParserVisitor visitor, final Object data) {
        return visitor.visit(this, data);
    }

    /**
     * Sets the directive name. Used by the parser. This keeps us from having to dig it out of the token stream and
     * gives the parse the change to override.
     * 
     * @param str
     */
    public void setDirectiveName(final String str) {
=====================================================================
Found a 2 line (24 tokens) duplication in the following files: 
Starting at line 95 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\TokenMgrError.java
Starting at line 131 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\TokenMgrError.java

    protected static String LexicalError(final boolean EOFSeen, final int lexState, final int errorLine,
            final int errorColumn, final String errorAfter, final char curChar) {
=====================================================================
Found a 5 line (24 tokens) duplication in the following files: 
Starting at line 20 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\xpath\PMDFunctions.java
Starting at line 25 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\xpath\PMDFunctions.java

	return MatchesFunction.matches(s, pattern1, pattern2, pattern3, pattern4);
    }

    public static boolean matches(String s, String pattern1, String pattern2, String pattern3, String pattern4,
	    String pattern5) {
=====================================================================
Found a 4 line (24 tokens) duplication in the following files: 
Starting at line 61 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\AbstractIncrementingRenderer.java
Starting at line 142 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\TextColorRenderer.java

	    getWriter().flush();
	}

	for (Iterator<Report.ProcessingError> i = report.errors(); i.hasNext();) {
=====================================================================
Found a 1 line (24 tokens) duplication in the following files: 
Starting at line 40 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\CSVRenderer.java
Starting at line 41 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\CSVRenderer.java
Starting at line 42 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\CSVRenderer.java
Starting at line 43 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\CSVRenderer.java
Starting at line 44 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\CSVRenderer.java
Starting at line 45 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\CSVRenderer.java
Starting at line 46 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\CSVRenderer.java
Starting at line 47 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\CSVRenderer.java

    	new ColumnDescriptor<RuleViolation>("problem", 	"Problem", 		new Accessor<RuleViolation>() { public String get(int idx, RuleViolation rv, String cr) { return Integer.toString(idx); }} ),
=====================================================================
Found a 5 line (24 tokens) duplication in the following files: 
Starting at line 115 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\RendererFactory.java
Starting at line 125 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\RendererFactory.java

	    constructor = rendererClass.getConstructor(Properties.class);
	    if (!Modifier.isPublic(constructor.getModifiers())) {
		constructor = null;
	    }
	} catch (NoSuchMethodException e) {
=====================================================================
Found a 2 line (23 tokens) duplication in the following files: 
Starting at line 333 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\PMD.java
Starting at line 35 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\processor\MultiThreadProcessor.java

    public static void processFiles(final PMDConfiguration configuration, final RuleSetFactory ruleSetFactory,
            final List<DataSource> files, final RuleContext ctx, final List<Renderer> renderers) {
=====================================================================
Found a 13 line (23 tokens) duplication in the following files: 
Starting at line 114 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\PMDConfiguration.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ParserOptions.java

    public String getSuppressMarker() {
        return suppressMarker;
    }

    /**
     * Set the suppress marker.
     * 
     * @param suppressMarker
     *            The suppress marker to use.
     */
    public void setSuppressMarker(String suppressMarker) {
        this.suppressMarker = suppressMarker;
    }
=====================================================================
Found a 6 line (23 tokens) duplication in the following files: 
Starting at line 83 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\ant\Formatter.java
Starting at line 308 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\ant\PMDTask.java

                writer.close();
            }
        } catch (IOException ioe) {
            throw new BuildException(ioe.getMessage(), ioe);
        }
    }
=====================================================================
Found a 2 line (23 tokens) duplication in the following files: 
Starting at line 127 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\CsTokenizer.java
Starting at line 200 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\CsTokenizer.java
Starting at line 218 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\CsTokenizer.java

					if (ic != -1) b.append((char)ic);
					tokenEntries.add(new TokenEntry(b.toString(), sourceCode.getFileName(), line));
=====================================================================
Found a 4 line (23 tokens) duplication in the following files: 
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\FortranTokenizer.java
Starting at line 23 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\RubyTokenizer.java

		this.ignorableCharacter = new ArrayList<String>();
		this.ignorableCharacter.add("(");
		this.ignorableCharacter.add(")");
		this.ignorableCharacter.add(",");
=====================================================================
Found a 5 line (23 tokens) duplication in the following files: 
Starting at line 23 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\JSPTokenizer.java
Starting at line 53 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\JavaTokenizer.java

		    currentToken.beginLine));
	    currentToken = (Token) tokenMgr.getNextToken();
	}
	tokenEntries.add(TokenEntry.getEOF());
    }
=====================================================================
Found a 3 line (23 tokens) duplication in the following files: 
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\Match.java
Starting at line 27 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\Match.java
Starting at line 45 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\Match.java

    public static final Comparator<Match> MATCHES_COMPARATOR = new Comparator<Match>() {
    	public int compare(Match ma, Match mb) {
    		return mb.getMarkCount() - ma.getMarkCount();
=====================================================================
Found a 6 line (23 tokens) duplication in the following files: 
Starting at line 208 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dfa\SequenceChecker.java
Starting at line 215 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dfa\SequenceChecker.java
Starting at line 229 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dfa\SequenceChecker.java

                    LOGGER.finer("aktStatus is NULL (lookAhead): Invalid transition");
                    LOGGER.exiting(this.getClass().getCanonicalName(),"run", false);
		    return false;
		}
                //Cope with incorrect bracesList contents
                else if (l >  maximumIterations )
=====================================================================
Found a 2 line (23 tokens) duplication in the following files: 
Starting at line 229 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dfa\SequenceChecker.java
Starting at line 239 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dfa\SequenceChecker.java

                    LOGGER.finest("aktStatus is NOT NULL: lastStep reached and no moreSteps - firstIndex=" + firstIndex + ", lastIndex=" + lastIndex);
                    LOGGER.exiting(this.getClass().getCanonicalName(),"run", false);
=====================================================================
Found a 6 line (23 tokens) duplication in the following files: 
Starting at line 105 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\DesignPatternDetection.java
Starting at line 660 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\DesignPatternDetection.java

		node.childrenAccept(this, data);
		// TODO unterschied Klasse und Interface einf�gen.
		Candidate candidate = new Candidate();
		RuleContext result = (RuleContext) data;

		candidate.setActiveClass(true);
=====================================================================
Found a 6 line (23 tokens) duplication in the following files: 
Starting at line 132 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\DesignPatternDetection.java
Starting at line 234 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\DesignPatternDetection.java
Starting at line 582 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\DesignPatternDetection.java

		method.childrenAccept(this, data);
		Candidate candidate = new Candidate();
		RuleContext result = (RuleContext) data;
		// Hole den Klassenamen f�r den aktuellen Kontruktor.
		
		if (method.getParentsOfType(ASTClassOrInterfaceDeclaration.class)
=====================================================================
Found a 4 line (23 tokens) duplication in the following files: 
Starting at line 358 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\DesignPatternDetection.java
Starting at line 703 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\DesignPatternDetection.java

					candidate.setMethodInvocationCalledMethodName(baseName
							.substring(indexOfDot + 1));
					candidate.setAttributeName(baseName
							.substring(0, indexOfDot));
=====================================================================
Found a 5 line (23 tokens) duplication in the following files: 
Starting at line 713 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\DesignPatternDetection.java
Starting at line 717 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\DesignPatternDetection.java

					if (candidate.getAttributeName().equals("This") == true) {
						candidate.setAttributeName(candidate
								.getMethodInvocationName());
						candidate.setMethodInvocationName("attrib");
					} else if (candidate.getAttributeName().equals("super") == true) {
=====================================================================
Found a 5 line (23 tokens) duplication in the following files: 
Starting at line 345 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\CandidateDAO.java
Starting at line 418 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\CandidateDAO.java
Starting at line 69 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\initialization\FirstTimeDBInit.java
Starting at line 99 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\initialization\FirstTimeDBInit.java
Starting at line 200 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\initialization\FirstTimeDBInit.java
Starting at line 230 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\initialization\FirstTimeDBInit.java
Starting at line 261 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\initialization\FirstTimeDBInit.java
Starting at line 328 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\initialization\FirstTimeDBInit.java

			stmt.executeUpdate(sql);
			stmt.close();
			connection.commit();
			// System.out.println("Attributes Records created successfully");
		} catch (SQLException e) {
=====================================================================
Found a 7 line (23 tokens) duplication in the following files: 
Starting at line 626 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\CandidateDAO.java
Starting at line 644 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\CandidateDAO.java

			}
			stmt.close();
		} catch (SQLException e) {

			log.error( "failed!", e );;
		}
		return className;
=====================================================================
Found a 8 line (23 tokens) duplication in the following files: 
Starting at line 287 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\initialization\FirstTimeDBInit.java
Starting at line 329 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\initialization\FirstTimeDBInit.java

			initStatement.close();
			connection.commit();

		} catch (SQLException e) {

			e.printStackTrace();
		}
	}
=====================================================================
Found a 7 line (23 tokens) duplication in the following files: 
Starting at line 147 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\rules\decorator\DecoratorRule.java
Starting at line 334 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\rules\facade\FacadeRule.java

			}
			this.stmt.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
}
=====================================================================
Found a 7 line (23 tokens) duplication in the following files: 
Starting at line 29 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\Ecmascript3Parser.java
Starting at line 48 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\AbstractJavaParser.java
Starting at line 30 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\JspParser.java
Starting at line 44 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\PLSQLParser.java
Starting at line 28 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\xml\XmlParser.java

    }

    public boolean canParse() {
	return true;
    }

    public Node parse(String fileName, Reader source) throws ParseException {
=====================================================================
Found a 9 line (23 tokens) duplication in the following files: 
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTArrayComprehension.java
Starting at line 11 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTArrayComprehensionLoop.java
Starting at line 12 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTArrayLiteral.java
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTForInLoop.java
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTForLoop.java
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTFunctionCall.java
Starting at line 11 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTFunctionNode.java
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTIfStatement.java
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTInfixExpression.java
Starting at line 11 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTLabel.java
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTLabeledStatement.java
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTLetNode.java
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTNewExpression.java
Starting at line 12 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTNumberLiteral.java
Starting at line 12 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTObjectLiteral.java
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTObjectProperty.java
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTParenthesizedExpression.java
Starting at line 11 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTPropertyGet.java
Starting at line 11 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTRegExpLiteral.java
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTReturnStatement.java
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTScope.java
Starting at line 11 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTStringLiteral.java
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTSwitchCase.java
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTSwitchStatement.java
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTThrowStatement.java
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTTryStatement.java
Starting at line 12 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTVariableDeclaration.java
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTVariableInitializer.java
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTWhileLoop.java
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTWithStatement.java
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTXmlDotQuery.java
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTXmlExpression.java
Starting at line 10 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTXmlMemberGet.java
Starting at line 11 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTXmlString.java

	super(arrayComprehension);
    }

    /**
     * Accept the visitor.
     */
    public Object jjtAccept(EcmascriptParserVisitor visitor, Object data) {
	return visitor.visit(this, data);
    }
=====================================================================
Found a 10 line (23 tokens) duplication in the following files: 
Starting at line 11 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTArrayComprehension.java
Starting at line 12 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTArrayComprehensionLoop.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTArrayLiteral.java
Starting at line 11 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTForInLoop.java
Starting at line 11 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTForLoop.java
Starting at line 11 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTFunctionCall.java
Starting at line 12 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTFunctionNode.java
Starting at line 11 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTIfStatement.java
Starting at line 11 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTLabeledStatement.java
Starting at line 11 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTLetNode.java
Starting at line 11 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTNewExpression.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTNumberLiteral.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTObjectLiteral.java
Starting at line 11 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTObjectProperty.java
Starting at line 12 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTRegExpLiteral.java
Starting at line 11 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTReturnStatement.java
Starting at line 12 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTStringLiteral.java
Starting at line 11 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTSwitchCase.java
Starting at line 11 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTSwitchStatement.java
Starting at line 11 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTTryStatement.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTVariableDeclaration.java
Starting at line 11 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTVariableInitializer.java
Starting at line 11 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTWhileLoop.java
Starting at line 11 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTWithStatement.java
Starting at line 11 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTXmlExpression.java
Starting at line 31 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\AbstractEcmascriptNode.java

    }

    /**
     * Accept the visitor.
     */
    public Object jjtAccept(EcmascriptParserVisitor visitor, Object data) {
	return visitor.visit(this, data);
    }

    public EcmascriptNode getResult() {
=====================================================================
Found a 5 line (23 tokens) duplication in the following files: 
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTArrayComprehension.java
Starting at line 17 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTArrayComprehensionLoop.java
Starting at line 17 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTConditionalExpression.java
Starting at line 17 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTDoLoop.java
Starting at line 17 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTElementGet.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTForInLoop.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTForLoop.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTFunctionCall.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTNewExpression.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTSwitchStatement.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTTryStatement.java
Starting at line 24 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTUnaryExpression.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTVariableInitializer.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTWhileLoop.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTWithStatement.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTXmlExpression.java

    public Object jjtAccept(EcmascriptParserVisitor visitor, Object data) {
	return visitor.visit(this, data);
    }

    public EcmascriptNode getResult() {
=====================================================================
Found a 5 line (23 tokens) duplication in the following files: 
Starting at line 18 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTArrayLiteral.java
Starting at line 18 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTBreakStatement.java
Starting at line 18 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTContinueStatement.java
Starting at line 18 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTExpressionStatement.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTIfStatement.java
Starting at line 19 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTKeywordLiteral.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTObjectProperty.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTReturnStatement.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTSwitchCase.java

    public Object jjtAccept(EcmascriptParserVisitor visitor, Object data) {
	return visitor.visit(this, data);
    }

    public boolean isDestructuring() {
=====================================================================
Found a 5 line (23 tokens) duplication in the following files: 
Starting at line 17 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTAstRoot.java
Starting at line 17 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTFunctionNode.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTLabeledStatement.java

    public Object jjtAccept(EcmascriptParserVisitor visitor, Object data) {
	return visitor.visit(this, data);
    }

    public int getNumComments() {
=====================================================================
Found a 5 line (23 tokens) duplication in the following files: 
Starting at line 17 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTComment.java
Starting at line 18 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTName.java
Starting at line 18 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTNumberLiteral.java
Starting at line 17 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTRegExpLiteral.java

    public Object jjtAccept(EcmascriptParserVisitor visitor, Object data) {
	return visitor.visit(this, data);
    }

    public String getValue() {
=====================================================================
Found a 6 line (23 tokens) duplication in the following files: 
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\DumpFacade.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\xml\ast\DumpFacade.java

public class DumpFacade {

	private PrintWriter writer;
	private boolean recurse;

	public void initializeWith(Writer writer, String prefix, boolean recurse, EcmascriptNode<?> node) {
=====================================================================
Found a 3 line (23 tokens) duplication in the following files: 
Starting at line 22 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\rule\EcmascriptRuleViolationFactory.java
Starting at line 22 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\rule\JspRuleViolationFactory.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\PLSQLRuleViolationFactory.java
Starting at line 22 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\xml\rule\XmlRuleViolationFactory.java

	@Override
    protected RuleViolation createRuleViolation(Rule rule, RuleContext ruleContext, Node node, String message) {
	return new ParametricRuleViolation<EcmascriptNode>(rule, ruleContext, (EcmascriptNode) node, message);
=====================================================================
Found a 10 line (23 tokens) duplication in the following files: 
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTAdditiveExpression.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTAllocationExpression.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTAndExpression.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTAnnotationMethodDeclaration.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTAnnotationTypeBody.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTAnnotationTypeDeclaration.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTAnnotationTypeMemberDeclaration.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTArgumentList.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTArrayDimsAndInits.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTArrayInitializer.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTAssertStatement.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTBreakStatement.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTCatchStatement.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTClassOrInterfaceBody.java
Starting at line 19 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTClassOrInterfaceDeclaration.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTClassOrInterfaceType.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTConditionalAndExpression.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTConditionalOrExpression.java
Starting at line 22 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTConstructorDeclaration.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTContinueStatement.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTDefaultValue.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTDoStatement.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTEmptyStatement.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTEnumBody.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTEnumConstant.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTEnumDeclaration.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTEqualityExpression.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTExclusiveOrExpression.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTExpression.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTExtendsList.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTFinallyStatement.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTForInit.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTForStatement.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTForUpdate.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTImplementsList.java
Starting at line 55 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTImportDeclaration.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTInclusiveOrExpression.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTInstanceOfExpression.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTLabeledStatement.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTLambdaExpression.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTMarkerAnnotation.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTMemberSelector.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTMemberValue.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTMemberValueArrayInitializer.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTMemberValuePair.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTMemberValuePairs.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTMethodReference.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTMultiplicativeExpression.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTNameList.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTNormalAnnotation.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTNullLiteral.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTPostfixExpression.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTPreDecrementExpression.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTPreIncrementExpression.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTPrimaryExpression.java
Starting at line 19 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTPrimitiveType.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTRSIGNEDSHIFT.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTRUNSIGNEDSHIFT.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTRelationalExpression.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTResource.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTResourceSpecification.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTResources.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTReturnStatement.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTShiftExpression.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTSingleMemberAnnotation.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTStatement.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTStatementExpression.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTStatementExpressionList.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTSwitchStatement.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTSynchronizedStatement.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTTypeArgument.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTTypeArguments.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTTypeBound.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTTypeParameter.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTTypeParameters.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTUnaryExpression.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTUnaryExpressionNotPlusMinus.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTVariableDeclarator.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTVariableInitializer.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTWhileStatement.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTWildcardBounds.java

        super(p, id);
    }


    /**
     * Accept the visitor. *
     */
    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }
=====================================================================
Found a 11 line (23 tokens) duplication in the following files: 
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTAdditiveExpression.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTAllocationExpression.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTAndExpression.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTAnnotationMethodDeclaration.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTAnnotationTypeBody.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTAnnotationTypeDeclaration.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTAnnotationTypeMemberDeclaration.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTArgumentList.java
Starting at line 23 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTArguments.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTArrayDimsAndInits.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTArrayInitializer.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTAssertStatement.java
Starting at line 25 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTAssignmentOperator.java
Starting at line 25 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTBooleanLiteral.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTBreakStatement.java
Starting at line 24 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTCastExpression.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTCatchStatement.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTClassOrInterfaceBody.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTClassOrInterfaceType.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTConditionalAndExpression.java
Starting at line 25 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTConditionalExpression.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTConditionalOrExpression.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTContinueStatement.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTDefaultValue.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTDoStatement.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTEmptyStatement.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTEnumBody.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTEnumConstant.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTEnumDeclaration.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTEqualityExpression.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTExclusiveOrExpression.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTExpression.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTExtendsList.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTFinallyStatement.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTForInit.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTForStatement.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTForUpdate.java
Starting at line 19 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTFormalParameters.java
Starting at line 25 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTIfStatement.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTImplementsList.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTInclusiveOrExpression.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTInstanceOfExpression.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTLabeledStatement.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTLambdaExpression.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTMarkerAnnotation.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTMemberSelector.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTMemberValue.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTMemberValueArrayInitializer.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTMemberValuePair.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTMemberValuePairs.java
Starting at line 20 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTMethodDeclarator.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTMethodReference.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTMultiplicativeExpression.java
Starting at line 27 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTName.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTNameList.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTNormalAnnotation.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTNullLiteral.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTPostfixExpression.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTPreDecrementExpression.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTPreIncrementExpression.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTPrimaryExpression.java
Starting at line 34 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTPrimaryPrefix.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTRSIGNEDSHIFT.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTRUNSIGNEDSHIFT.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTRelationalExpression.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTResource.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTResourceSpecification.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTResources.java
Starting at line 23 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTResultType.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTReturnStatement.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTShiftExpression.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTSingleMemberAnnotation.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTStatement.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTStatementExpression.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTStatementExpressionList.java
Starting at line 25 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTSwitchLabel.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTSwitchStatement.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTSynchronizedStatement.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTTypeArgument.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTTypeArguments.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTTypeBound.java
Starting at line 30 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTTypeDeclaration.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTTypeParameter.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTTypeParameters.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTUnaryExpression.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTUnaryExpressionNotPlusMinus.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTVariableDeclarator.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTVariableInitializer.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTWhileStatement.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTWildcardBounds.java

    }


    /**
     * Accept the visitor. *
     */
    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }

}
=====================================================================
Found a 9 line (23 tokens) duplication in the following files: 
Starting at line 22 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTArguments.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTBlock.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTBlockStatement.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTExplicitConstructorInvocation.java
Starting at line 28 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTFormalParameter.java
Starting at line 18 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTFormalParameters.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTInitializer.java
Starting at line 19 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTMethodDeclarator.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTReferenceType.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTTryStatement.java

        return this.jjtGetChild(0).jjtGetNumChildren();
    }

    /**
     * Accept the visitor. *
     */
    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }
=====================================================================
Found a 17 line (23 tokens) duplication in the following files: 
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTBlockStatement.java
Starting at line 35 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTClassOrInterfaceBodyDeclaration.java
Starting at line 20 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTClassOrInterfaceDeclaration.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTExplicitConstructorInvocation.java
Starting at line 29 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTFormalParameter.java
Starting at line 17 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTTryStatement.java
Starting at line 40 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\AbstractJavaNode.java

    }


    /**
     * Accept the visitor. *
     */
    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }

    /**
     * Tells if this BlockStatement is an allocation statement.
     * This is done by
     *
     * @return the result of containsDescendantOfType(ASTAllocationExpression.class)
     */
    public final boolean isAllocation() {
=====================================================================
Found a 11 line (23 tokens) duplication in the following files: 
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTBlockStatement.java
Starting at line 22 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTThrowStatement.java

    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }

    /**
     * Tells if this BlockStatement is an allocation statement.
     * This is done by
     *
     * @return the result of containsDescendantOfType(ASTAllocationExpression.class)
     */
    public final boolean isAllocation() {
=====================================================================
Found a 5 line (23 tokens) duplication in the following files: 
Starting at line 40 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTClassOrInterfaceBodyDeclaration.java
Starting at line 25 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTClassOrInterfaceDeclaration.java
Starting at line 41 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTCompilationUnit.java
Starting at line 22 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTFieldDeclaration.java
Starting at line 31 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTFormalParameter.java
Starting at line 24 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTLocalVariableDeclaration.java
Starting at line 22 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTTryStatement.java

    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }

    public boolean isAnonymousInnerClass() {
=====================================================================
Found a 5 line (23 tokens) duplication in the following files: 
Starting at line 61 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\DumpFacade.java
Starting at line 61 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\DumpFacade.java

			image = String.valueOf(((ASTBooleanLiteral) node).isTrue());
		} else if (node instanceof ASTPrimaryPrefix) {
			ASTPrimaryPrefix primaryPrefix = (ASTPrimaryPrefix) node;
			String result = null;
			if (primaryPrefix.usesSuperModifier()) {
=====================================================================
Found a 6 line (23 tokens) duplication in the following files: 
Starting at line 205 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 232 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 377 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java

            LOGGER.finest("pushOnStack LABEL_LAST_STATEMENT: line " + node.getBeginLine() +", column " + node.getBeginColumn());
        }
        return data;
    }

    public Object visit(ASTSwitchStatement node, Object data) {
=====================================================================
Found a 1 line (23 tokens) duplication in the following files: 
Starting at line 27 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\JavaRuleViolationFactory.java
Starting at line 26 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\PLSQLRuleViolationFactory.java

	protected RuleViolation createRuleViolation(Rule rule, RuleContext ruleContext, Node node, String message, int beginLine, int endLine) {
=====================================================================
Found a 5 line (23 tokens) duplication in the following files: 
Starting at line 55 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\basic\CheckResultSetRule.java
Starting at line 114 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\imports\UnusedImportsRule.java
Starting at line 217 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\ClassTypeResolver.java

        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTName node, Object data) {
=====================================================================
Found a 4 line (23 tokens) duplication in the following files: 
Starting at line 53 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\basic\DoubleCheckedLockingRule.java
Starting at line 19 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\controversial\OnlyOneReturnRule.java
Starting at line 62 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\coupling\CouplingBetweenObjectsRule.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\junit\JUnitTestsShouldIncludeAssertRule.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\naming\AvoidFieldNameMatchingMethodNameRule.java
Starting at line 36 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\sunsecure\ArrayIsStoredDirectlyRule.java
Starting at line 26 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\sunsecure\MethodReturnsInternalArrayRule.java
Starting at line 27 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\unusedcode\UnusedPrivateMethodRule.java

    public Object visit(ASTClassOrInterfaceDeclaration node, Object data) {
        if (node.isInterface()) {
            return data;
        }
=====================================================================
Found a 4 line (23 tokens) duplication in the following files: 
Starting at line 28 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\basic\OverrideBothEqualsAndHashcodeRule.java
Starting at line 187 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\CyclomaticComplexityRule.java
Starting at line 56 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\javabeans\BeanMembersShouldSerializeRule.java
Starting at line 12 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\naming\AvoidFieldNameMatchingTypeNameRule.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\optimizations\AbstractOptimizationRule.java

    public Object visit(ASTClassOrInterfaceDeclaration node, Object data) {
        if (node.isInterface()) {
            return data;
        }
=====================================================================
Found a 5 line (23 tokens) duplication in the following files: 
Starting at line 171 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\CyclomaticComplexityRule.java
Starting at line 363 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\GodClassRule.java

  }

  @Override
public Object visit(ASTConditionalExpression node, Object data) {
    if ( node.isTernary() ) {
=====================================================================
Found a 6 line (23 tokens) duplication in the following files: 
Starting at line 257 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\NPathComplexityRule.java
Starting at line 427 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NPathComplexityRule.java

        return children;
    }

    @Override
    public Object[] getViolationParameters(DataPoint point) {
        return new String[] { ((ASTMethodDeclaration) point.getNode()).getMethodName(),
=====================================================================
Found a 3 line (23 tokens) duplication in the following files: 
Starting at line 88 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\comments\CommentRequiredRule.java
Starting at line 128 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\comments\CommentRequiredRule.java
Starting at line 146 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\comments\CommentRequiredRule.java
Starting at line 171 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\comments\CommentRequiredRule.java
Starting at line 198 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\comments\CommentRequiredRule.java

			if (headerRequirement == CommentRequirement.Required) {
				if (decl.comment() == null) {
					addViolationWithMessage(data, decl,
=====================================================================
Found a 5 line (23 tokens) duplication in the following files: 
Starting at line 96 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\coupling\CouplingBetweenObjectsRule.java
Starting at line 47 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\NonThreadSafeSingletonRule.java
Starting at line 245 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\ClassTypeResolver.java

        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTFieldDeclaration node, Object data) {
=====================================================================
Found a 5 line (23 tokens) duplication in the following files: 
Starting at line 118 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\GenericClassCounterRule.java
Starting at line 162 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\ClassTypeResolver.java

    	 return super.visit(node,data);
     }

     @Override
     public Object visit(ASTImportDeclaration node, Object data) {
=====================================================================
Found a 5 line (23 tokens) duplication in the following files: 
Starting at line 326 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\GodClassRule.java
Starting at line 318 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\ClassTypeResolver.java

        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTConditionalAndExpression node, Object data) {
=====================================================================
Found a 6 line (23 tokens) duplication in the following files: 
Starting at line 74 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\IdempotentOperationsRule.java
Starting at line 221 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\unnecessary\UselessOverridingMethodRule.java

            if (!l.hasImageEqualTo(r.getImage())) {
                return super.visit(node, data);
            }
        }

        addViolation(data, node);
=====================================================================
Found a 2 line (23 tokens) duplication in the following files: 
Starting at line 56 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\SimplifyBooleanReturnsRule.java
Starting at line 180 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\SimplifyBooleanReturnsRule.java

            node.jjtGetChild(0).jjtGetChild(0).jjtGetChild(0) instanceof ASTPrimaryPrefix &&
            node.jjtGetChild(0).jjtGetChild(0).jjtGetChild(0).jjtGetChild(0) instanceof ASTLiteral &&
=====================================================================
Found a 5 line (23 tokens) duplication in the following files: 
Starting at line 54 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\ClassScope.java
Starting at line 24 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\MethodScope.java
Starting at line 86 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\ClassScope.java
Starting at line 30 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\LocalScope.java
Starting at line 26 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\MethodScope.java

    }

    public Map<VariableNameDeclaration, List<NameOccurrence>> getVariableDeclarations() {
        return getDeclarations(VariableNameDeclaration.class);
    }
=====================================================================
Found a 5 line (23 tokens) duplication in the following files: 
Starting at line 20 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\LocalScope.java
Starting at line 88 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\ClassScope.java

    public Map<VariableNameDeclaration, List<NameOccurrence>> getVariableDeclarations() {
        return getDeclarations(VariableNameDeclaration.class);
    }

    public NameDeclaration addNameOccurrence(NameOccurrence occurrence) {
=====================================================================
Found a 8 line (23 tokens) duplication in the following files: 
Starting at line 130 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\ScopeAndDeclarationFinder.java
Starting at line 127 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\ScopeAndDeclarationFinder.java

    public Object visit(ASTCompilationUnit node, Object data) {
	createSourceFileScope(node);
	cont(node);
	return data;
    }

    @Override
    public Object visit(ASTClassOrInterfaceDeclaration node, Object data) {
=====================================================================
Found a 8 line (23 tokens) duplication in the following files: 
Starting at line 146 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\ScopeAndDeclarationFinder.java
Starting at line 153 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\ScopeAndDeclarationFinder.java

    public Object visit(ASTEnumDeclaration node, Object data) {
	createClassScope(node);
	cont(node);
	return data;
    }

    @Override
    public Object visit(ASTAnnotationTypeDeclaration node, Object data) {
=====================================================================
Found a 8 line (23 tokens) duplication in the following files: 
Starting at line 171 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\ScopeAndDeclarationFinder.java
Starting at line 178 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\ScopeAndDeclarationFinder.java
Starting at line 185 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\ScopeAndDeclarationFinder.java
Starting at line 248 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\ScopeAndDeclarationFinder.java
Starting at line 256 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\ScopeAndDeclarationFinder.java
Starting at line 263 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\ScopeAndDeclarationFinder.java
Starting at line 211 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\ScopeAndDeclarationFinder.java
Starting at line 355 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\ScopeAndDeclarationFinder.java
Starting at line 362 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\ScopeAndDeclarationFinder.java

    public Object visit(ASTBlock node, Object data) {
	createLocalScope(node);
	cont(node);
	return data;
    }

    @Override
    public Object visit(ASTCatchStatement node, Object data) {
=====================================================================
Found a 2 line (23 tokens) duplication in the following files: 
Starting at line 47 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\VariableNameDeclaration.java
Starting at line 64 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\VariableNameDeclaration.java

    public boolean isPrimitiveType() {
	return !isLambdaTypelessParameter() && getAccessNodeParent().jjtGetChild(0).jjtGetChild(0) instanceof ASTPrimitiveType;
=====================================================================
Found a 8 line (23 tokens) duplication in the following files: 
Starting at line 457 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\ClassTypeResolver.java
Starting at line 205 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\ScopeAndDeclarationFinder.java

	public Object visit(ASTPrimarySuffix node, Object data) {
		super.visit(node, data);
		// TODO OMG, this is complicated.  PrimaryExpression, PrimaryPrefix and PrimarySuffix are all related.
		return data;
	}

	@Override
	public Object visit(ASTNullLiteral node, Object data) {
=====================================================================
Found a 6 line (23 tokens) duplication in the following files: 
Starting at line 53 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\rules\SignatureDeclareThrowsException.java
Starting at line 61 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\rules\SignatureDeclareThrowsException.java

                ASTClassOrInterfaceType type = (ASTClassOrInterfaceType) impl.jjtGetChild(ix);
                if (isJUnitTest(type)) {
                    junitImported = true;
                    return super.visit(node, data);
                }
            }
=====================================================================
Found a 8 line (23 tokens) duplication in the following files: 
Starting at line 26 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTIfStatement.java
Starting at line 18 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTInput.java

  }


  /** Accept the visitor. **/
  public Object jjtAccept(PLSQLParserVisitor visitor, Object data) {
    return visitor.visit(this, data);
  }
}
=====================================================================
Found a 6 line (23 tokens) duplication in the following files: 
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 19 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 24 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 29 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 34 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 39 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 44 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 49 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 54 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 59 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 64 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 69 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 74 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 79 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 84 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 89 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 94 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 99 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 104 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 109 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 114 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 119 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 124 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 129 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 134 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 139 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 144 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 149 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 154 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 159 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 164 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 169 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 174 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 179 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 184 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 189 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 194 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 199 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 204 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 209 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 214 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 219 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 224 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 229 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 234 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 239 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 244 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 249 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 254 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 259 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 264 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 269 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 274 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 279 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 284 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 289 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 294 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 299 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 304 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 309 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 314 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 319 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 324 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 329 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 334 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 339 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 344 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 349 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 354 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 359 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 364 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 369 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 374 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 379 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 384 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 389 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 394 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 399 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 404 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 409 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 414 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 419 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 424 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 429 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 434 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 439 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 444 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 449 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 454 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 459 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 464 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 469 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 474 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 479 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 484 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 489 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 494 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 499 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 504 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 509 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 514 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 519 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 524 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 529 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 534 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 539 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 544 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 549 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 554 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 559 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 564 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 569 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 574 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 579 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 584 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 589 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 594 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 599 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 604 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 609 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 614 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 619 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 624 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 629 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 634 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 639 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 644 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 649 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 654 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 659 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 664 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 669 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 674 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 679 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 684 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\PLSQLParserVisitorAdapter.java
Starting at line 95 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 100 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 105 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 110 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 115 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 132 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 137 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 142 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 153 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 158 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 163 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 168 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 173 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 178 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 183 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 188 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 193 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 198 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 203 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 208 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 213 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 218 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 223 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 228 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 233 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 238 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 243 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 248 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 253 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 258 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 263 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 268 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 273 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 278 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 283 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 288 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 293 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 298 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 303 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 308 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 313 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 318 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 323 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 328 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 333 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 338 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 343 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 348 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 353 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 358 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 363 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 368 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 373 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 378 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 383 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 388 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 393 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 398 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 403 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 408 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 413 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 418 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 423 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 428 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 433 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 438 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 443 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 448 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 453 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 458 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 463 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 468 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 473 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 478 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 483 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 488 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 493 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 498 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 503 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 508 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 513 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 518 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 523 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 528 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 533 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 538 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 543 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 548 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 553 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 558 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 563 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 568 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 573 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 578 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 583 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 588 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 593 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 598 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 603 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 608 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 613 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 618 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 623 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 628 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 633 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 638 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 643 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 648 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 653 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 670 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 675 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 680 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 685 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 690 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 707 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 712 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 717 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 722 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 727 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 732 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 737 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 742 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 747 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 752 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 757 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 762 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 767 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 772 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java

	public Object visit(ASTInput node, Object data) {
		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTDDLCommand node, Object data) {
=====================================================================
Found a 3 line (23 tokens) duplication in the following files: 
Starting at line 297 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 305 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java

            ASTForStatement st = (ASTForStatement) node.jjtGetParent(); 
            if (node.equals(st.getFirstChildOfType(ASTStatement.class)))
            {
=====================================================================
Found a 6 line (23 tokens) duplication in the following files: 
Starting at line 143 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 92 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NPathComplexityRule.java

		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTProgramUnit node, Object data) {
		LOGGER.entering(CLASS_NAME, "visit(ASTProgramUnit)");
=====================================================================
Found a 6 line (23 tokens) duplication in the following files: 
Starting at line 654 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 108 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NPathComplexityRule.java

		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTTypeMethod node, Object data) {
		LOGGER.entering(CLASS_NAME, "visit(ASTTypeMethod)");
=====================================================================
Found a 6 line (23 tokens) duplication in the following files: 
Starting at line 691 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 124 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NPathComplexityRule.java

		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTTriggerUnit node, Object data) {
		LOGGER.entering(CLASS_NAME, "visit(ASTTriggerUnit)");
=====================================================================
Found a 6 line (23 tokens) duplication in the following files: 
Starting at line 697 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 140 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NPathComplexityRule.java

		return visit((PLSQLNode) node, data);
	}

	@Override
	public Object visit(ASTTriggerTimingPointSection node, Object data) {
		LOGGER.entering(CLASS_NAME, "visit(ASTTriggerTimingPointSection)");
=====================================================================
Found a 6 line (23 tokens) duplication in the following files: 
Starting at line 214 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NPathComplexityRule.java
Starting at line 250 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NPathComplexityRule.java

        LOGGER.exiting(CLASS_NAME,"visit(ASTIfStatement)", (boolCompIf + complexity));
	return Integer.valueOf(boolCompIf + complexity);
    }

    @Override
    public Object visit(ASTElsifClause node, Object data) {
=====================================================================
Found a 6 line (23 tokens) duplication in the following files: 
Starting at line 361 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NPathComplexityRule.java
Starting at line 383 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NPathComplexityRule.java

        LOGGER.exiting(CLASS_NAME,"visit(ASTCaseWhenClause)", (boolCompSwitch + npath) );
	return Integer.valueOf(boolCompSwitch + npath);
    }

    @Override
    public Object visit(ASTCaseStatement node, Object data) {
=====================================================================
Found a 2 line (23 tokens) duplication in the following files: 
Starting at line 40 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\properties\CharacterMultiProperty.java
Starting at line 45 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\properties\StringMultiProperty.java

	public CharacterMultiProperty(String theName, String theDescription, Character[] theDefaults, float theUIOrder, char delimiter) {
		super(theName, theDescription, theDefaults, delimiter, theUIOrder);
=====================================================================
Found a 3 line (23 tokens) duplication in the following files: 
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\properties\DoubleProperty.java
Starting at line 20 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\properties\FloatProperty.java
Starting at line 20 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\properties\IntegerProperty.java
Starting at line 20 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\properties\LongProperty.java

		public DoubleProperty createWith(Map<String, String> valuesById) {
			final String[] minMax = minMaxFrom(valuesById);
			return new DoubleProperty(
=====================================================================
Found a 1 line (23 tokens) duplication in the following files: 
Starting at line 33 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\properties\PropertyDescriptorFactory.java
Starting at line 37 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\properties\PropertyDescriptorFactory.java

	public static PropertyDescriptor<?> createPropertyDescriptor(String name, String description, String type, String delimiter, String min, String max, String value) {
=====================================================================
Found a 3 line (23 tokens) duplication in the following files: 
Starting at line 54 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\ASTEscape.java
Starting at line 50 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\ASTMathNode.java
Starting at line 125 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\AbstractVmNode.java

    public Object jjtAccept(final VmParserVisitor visitor, final Object data) {
        return visitor.visit(this, data);
    }
=====================================================================
Found a 4 line (23 tokens) duplication in the following files: 
Starting at line 18 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\rule\basic\EmptyIfStmtRule.java
Starting at line 24 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\rule\basic\EmptyIfStmtRule.java
Starting at line 30 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\rule\basic\EmptyIfStmtRule.java

    public Object visit(final ASTIfStatement node, final Object data) {
        handleIf(node, data);
        return super.visit(node, data);
    }
=====================================================================
Found a 8 line (23 tokens) duplication in the following files: 
Starting at line 30 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\AbstractAccumulatingRenderer.java
Starting at line 38 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\AbstractIncrementingRenderer.java

    public AbstractAccumulatingRenderer(String name, String description) {
	super(name, description);
    }

    /**
     * {@inheritDoc}
     */
    public void start() throws IOException {
=====================================================================
Found a 9 line (23 tokens) duplication in the following files: 
Starting at line 80 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\HTMLRenderer.java
Starting at line 54 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\XMLRenderer.java

			+ "<th>#</th><th>File</th><th>Line</th><th>Problem</th></tr>" + PMD.EOL);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void renderFileViolations(Iterator<RuleViolation> violations) throws IOException {
		Writer writer = getWriter();
=====================================================================
Found a 3 line (23 tokens) duplication in the following files: 
Starting at line 64 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\IDEAJRenderer.java
Starting at line 78 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\IDEAJRenderer.java
Starting at line 43 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\TextRenderer.java
Starting at line 67 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\XMLRenderer.java

		while (violations.hasNext()) {
			buf.setLength(0);
			RuleViolation rv = violations.next();
=====================================================================
Found a 5 line (23 tokens) duplication in the following files: 
Starting at line 55 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\TextPadRenderer.java
Starting at line 75 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\TextRenderer.java

	    buf.append(rv.getDescription()).append(PMD.EOL);
	    writer.write(buf.toString());
	}
    }
}
=====================================================================
Found a 3 line (23 tokens) duplication in the following files: 
Starting at line 356 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\StringUtil.java
Starting at line 506 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\StringUtil.java

	public static void asStringOn(StringBuilder sb, Object[] items, String separator) {

	    if (items == null || items.length == 0) { return;  }
=====================================================================
Found a 4 line (23 tokens) duplication in the following files: 
Starting at line 161 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\database\DBType.java
Starting at line 170 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\database\DBType.java

            LOGGER.finest("Attempting File no file suffix: " + matchString);
            resourceBundle = new PropertyResourceBundle(new FileInputStream(propertiesFile));
            propertiesSource = propertiesFile.getAbsolutePath();
            LOGGER.finest("FileSystemWithoutExtension");
=====================================================================
Found a 4 line (23 tokens) duplication in the following files: 
Starting at line 550 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\designer\Designer.java
Starting at line 596 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\designer\Designer.java

	private class SymbolTableListener implements TreeSelectionListener {
		public void valueChanged(TreeSelectionEvent e) {
			if (e.getNewLeadSelectionPath() != null) {
				ASTTreeNode astTreeNode = (ASTTreeNode) e.getNewLeadSelectionPath().getLastPathComponent();
=====================================================================
Found a 6 line (22 tokens) duplication in the following files: 
Starting at line 71 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\ant\Formatter.java
Starting at line 85 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\ant\Formatter.java

        } catch (IOException ioe) {
            throw new BuildException(ioe.getMessage(), ioe);
        }
    }

    public void end(Report errorReport) {
=====================================================================
Found a 5 line (22 tokens) duplication in the following files: 
Starting at line 63 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\AbstractTokenizer.java
Starting at line 69 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\AbstractTokenizer.java

                if (isComment(tok)) {
                    if (token.length() > 0) {
                        return j;
                    } else {
                        return getCommentToken(token, loc);
=====================================================================
Found a 4 line (22 tokens) duplication in the following files: 
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\CPPTokenizer.java
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\JSPTokenizer.java

public class CPPTokenizer implements Tokenizer {

	public void tokenize(SourceCode sourceCode, Tokens tokenEntries) {
		StringBuilder buffer = sourceCode.getCodeBuffer();
=====================================================================
Found a 2 line (22 tokens) duplication in the following files: 
Starting at line 92 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\GUI.java
Starting at line 98 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\GUI.java
Starting at line 101 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\GUI.java
Starting at line 104 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\GUI.java
Starting at line 107 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\GUI.java
Starting at line 110 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\GUI.java
Starting at line 113 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\GUI.java
Starting at line 116 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\GUI.java
Starting at line 127 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\GUI.java
Starting at line 130 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\GUI.java

		{"Java", 			new LanguageConfig() {
									public Language languageFor(LanguageFactory lf, Properties p) { return lf.createLanguage("java"); }
=====================================================================
Found a 4 line (22 tokens) duplication in the following files: 
Starting at line 148 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\SourceCode.java
Starting at line 157 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\SourceCode.java

    public StringBuilder getCodeBuffer() {
	StringBuilder sb = new StringBuilder();
	List<String> lines = cl.getCode();
	for (String line : lines) {
=====================================================================
Found a 3 line (22 tokens) duplication in the following files: 
Starting at line 78 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\dcd\DumpNodeVisitor.java
Starting at line 94 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\dcd\DumpNodeVisitor.java

	public Object visitUse(MemberNode use, Object data) {
		if (Boolean.TRUE == data) {
			System.out.println("\t\t\t\t" + use.toStringLong());
=====================================================================
Found a 3 line (22 tokens) duplication in the following files: 
Starting at line 242 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ast\AbstractNode.java
Starting at line 326 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ast\AbstractNode.java

	int n = node.jjtGetNumChildren();
	for (int i = 0; i < n; i++) {
	    Node child = node.jjtGetChild(i);
=====================================================================
Found a 7 line (22 tokens) duplication in the following files: 
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\cpp\CppParser.java
Starting at line 29 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\AbstractJavaParser.java
Starting at line 23 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\JspParser.java
Starting at line 28 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\PLSQLParser.java

    public CppParser(ParserOptions parserOptions) {
	super(parserOptions);
    }

    @Override
    public TokenManager createTokenManager(Reader source) {
	return new CppTokenManager(source);
=====================================================================
Found a 9 line (22 tokens) duplication in the following files: 
Starting at line 183 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\DesignPatternDetection.java
Starting at line 245 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\DesignPatternDetection.java
Starting at line 595 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\DesignPatternDetection.java

					.getParentsOfType(ASTClassOrInterfaceDeclaration.class)
					.get(0).getImage());
		}
//		
//		candidate.setClassName(method
//				.getParentsOfType(ASTClassOrInterfaceDeclaration.class).get(0)
//				.getImage());

		candidate.setPackageName(method
=====================================================================
Found a 3 line (22 tokens) duplication in the following files: 
Starting at line 234 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\DesignPatternDetection.java
Starting at line 582 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\DesignPatternDetection.java
Starting at line 660 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\DesignPatternDetection.java

		context.childrenAccept(this, data);
		Candidate candidate = new Candidate();
		RuleContext result = (RuleContext) data;
=====================================================================
Found a 3 line (22 tokens) duplication in the following files: 
Starting at line 244 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\DesignPatternDetection.java
Starting at line 594 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\DesignPatternDetection.java
Starting at line 668 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\DesignPatternDetection.java

			candidate.setClassName(context
					.getParentsOfType(ASTClassOrInterfaceDeclaration.class)
					.get(0).getImage());
=====================================================================
Found a 9 line (22 tokens) duplication in the following files: 
Starting at line 117 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\CandidateDAO.java
Starting at line 133 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\CandidateDAO.java

				stmt.executeUpdate(sql);
				stmt.close();
				connection.commit();
				checkActiveClass(candidate);
				// System.out.println("Class Records created successfully Case 3");
				// Fall 4: Package unbekannt und Class bekannt. Class anlegen
				// mit neuem Package und ID direk mit dem Packagenamen gesucht
				// wird auch gefunden.
			} else if (candidate.getPackageNumber() == -2 && classResult != -1
=====================================================================
Found a 4 line (22 tokens) duplication in the following files: 
Starting at line 858 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\CandidateDAO.java
Starting at line 892 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\CandidateDAO.java

								+ candidate.getAttributeNumber()
								+ "' AND class_id = "
								+ candidate.getClassNumber() + ";");
				while (rs.next()) {
=====================================================================
Found a 3 line (22 tokens) duplication in the following files: 
Starting at line 117 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\rules\state\StateRule.java
Starting at line 296 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\rules\state\StateRule.java

					attributeID, "s.attribut_id");
			HashMap<String, Integer> caseNames = new HashMap<String, Integer>();
			int numberOfSwitchIDs = 0;
=====================================================================
Found a 5 line (22 tokens) duplication in the following files: 
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTArrayComprehension.java
Starting at line 17 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTArrayComprehensionLoop.java
Starting at line 18 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTArrayLiteral.java
Starting at line 17 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTAstRoot.java
Starting at line 18 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTBreakStatement.java
Starting at line 17 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTCatchClause.java
Starting at line 17 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTComment.java
Starting at line 17 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTConditionalExpression.java
Starting at line 18 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTContinueStatement.java
Starting at line 17 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTDoLoop.java
Starting at line 17 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTElementGet.java
Starting at line 18 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTExpressionStatement.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTForInLoop.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTForLoop.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTFunctionCall.java
Starting at line 17 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTFunctionNode.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTIfStatement.java
Starting at line 19 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTKeywordLiteral.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTLabeledStatement.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTLetNode.java
Starting at line 18 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTName.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTNewExpression.java
Starting at line 18 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTNumberLiteral.java
Starting at line 18 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTObjectLiteral.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTObjectProperty.java
Starting at line 17 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTRegExpLiteral.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTReturnStatement.java
Starting at line 17 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTStringLiteral.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTSwitchCase.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTSwitchStatement.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTTryStatement.java
Starting at line 24 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTUnaryExpression.java
Starting at line 18 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTVariableDeclaration.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTVariableInitializer.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTWhileLoop.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTWithStatement.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTXmlExpression.java
Starting at line 36 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\AbstractEcmascriptNode.java

    public Object jjtAccept(EcmascriptParserVisitor visitor, Object data) {
	return visitor.visit(this, data);
    }

    public EcmascriptNode getResult() {
=====================================================================
Found a 4 line (22 tokens) duplication in the following files: 
Starting at line 17 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTAssignment.java
Starting at line 17 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTBlock.java
Starting at line 17 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTEmptyExpression.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTInfixExpression.java
Starting at line 17 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTLabel.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTParenthesizedExpression.java
Starting at line 17 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTPropertyGet.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTScope.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTThrowStatement.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTXmlDotQuery.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTXmlMemberGet.java
Starting at line 17 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTXmlString.java

    public Object jjtAccept(EcmascriptParserVisitor visitor, Object data) {
	return visitor.visit(this, data);
    }
}
=====================================================================
Found a 8 line (22 tokens) duplication in the following files: 
Starting at line 11 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTInfixExpression.java
Starting at line 12 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTLabel.java
Starting at line 11 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTParenthesizedExpression.java
Starting at line 12 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTPropertyGet.java
Starting at line 11 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTScope.java
Starting at line 11 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTThrowStatement.java
Starting at line 11 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTXmlDotQuery.java
Starting at line 11 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTXmlMemberGet.java
Starting at line 12 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTXmlString.java
Starting at line 31 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\AbstractEcmascriptNode.java

    }

    /**
     * Accept the visitor.
     */
    public Object jjtAccept(EcmascriptParserVisitor visitor, Object data) {
	return visitor.visit(this, data);
    }
=====================================================================
Found a 2 line (22 tokens) duplication in the following files: 
Starting at line 44 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\AbstractEcmascriptNode.java
Starting at line 53 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\AbstractJavaNode.java
Starting at line 50 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\AbstractJspNode.java
Starting at line 53 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\AbstractPLSQLNode.java
Starting at line 75 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\AbstractPLSQLNode.java
Starting at line 134 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\AbstractVmNode.java

	if (children != null) {
	    for (int i = 0; i < children.length; ++i) {
=====================================================================
Found a 4 line (22 tokens) duplication in the following files: 
Starting at line 82 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\DumpFacade.java
Starting at line 90 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\DumpFacade.java

			if (((ASTBreakStatement) node).hasLabel()) {
				extras.add("has label");
			}
		} else if (node instanceof ASTCatchClause) {
=====================================================================
Found a 4 line (22 tokens) duplication in the following files: 
Starting at line 94 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\DumpFacade.java
Starting at line 154 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\DumpFacade.java

			if (((ASTExpressionStatement) node).hasResult()) {
				extras.add("has result");
			}
		} else if (node instanceof ASTForInLoop) {
=====================================================================
Found a 4 line (22 tokens) duplication in the following files: 
Starting at line 112 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\DumpFacade.java
Starting at line 148 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\DumpFacade.java

			if (((ASTFunctionNode) node).isSetter()) {
				extras.add("setter");
			}
		} else if (node instanceof ASTIfStatement) {
=====================================================================
Found a 9 line (22 tokens) duplication in the following files: 
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTAdditiveExpression.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTAllocationExpression.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTAndExpression.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTAnnotationMethodDeclaration.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTAnnotationTypeBody.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTAnnotationTypeDeclaration.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTAnnotationTypeMemberDeclaration.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTArgumentList.java
Starting at line 23 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTArguments.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTArrayDimsAndInits.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTArrayInitializer.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTAssertStatement.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTBreakStatement.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTCatchStatement.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTClassOrInterfaceBody.java
Starting at line 35 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTClassOrInterfaceBodyDeclaration.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTClassOrInterfaceType.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTConditionalAndExpression.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTConditionalOrExpression.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTContinueStatement.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTDefaultValue.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTDoStatement.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTEmptyStatement.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTEnumBody.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTEnumConstant.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTEnumDeclaration.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTEqualityExpression.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTExclusiveOrExpression.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTExpression.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTExtendsList.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTFinallyStatement.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTForInit.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTForStatement.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTForUpdate.java
Starting at line 19 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTFormalParameters.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTImplementsList.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTInclusiveOrExpression.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTInstanceOfExpression.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTLabeledStatement.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTLambdaExpression.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTMarkerAnnotation.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTMemberSelector.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTMemberValue.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTMemberValueArrayInitializer.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTMemberValuePair.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTMemberValuePairs.java
Starting at line 20 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTMethodDeclarator.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTMethodReference.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTMultiplicativeExpression.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTNameList.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTNormalAnnotation.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTNullLiteral.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTPostfixExpression.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTPreDecrementExpression.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTPreIncrementExpression.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTPrimaryExpression.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTRSIGNEDSHIFT.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTRUNSIGNEDSHIFT.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTRelationalExpression.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTResource.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTResourceSpecification.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTResources.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTReturnStatement.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTShiftExpression.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTSingleMemberAnnotation.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTStatement.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTStatementExpression.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTStatementExpressionList.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTSwitchStatement.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTSynchronizedStatement.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTTypeArgument.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTTypeArguments.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTTypeBound.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTTypeParameter.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTTypeParameters.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTUnaryExpression.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTUnaryExpressionNotPlusMinus.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTVariableDeclarator.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTVariableInitializer.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTWhileStatement.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTWildcardBounds.java
Starting at line 40 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\AbstractJavaNode.java

    }


    /**
     * Accept the visitor. *
     */
    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }
=====================================================================
Found a 5 line (22 tokens) duplication in the following files: 
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTAdditiveExpression.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTAllocationExpression.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTAndExpression.java
Starting at line 67 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTAnnotation.java
Starting at line 19 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTAnnotationMethodDeclaration.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTAnnotationTypeBody.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTAnnotationTypeDeclaration.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTAnnotationTypeMemberDeclaration.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTArgumentList.java
Starting at line 28 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTArguments.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTArrayDimsAndInits.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTArrayInitializer.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTAssertStatement.java
Starting at line 31 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTAssignmentOperator.java
Starting at line 31 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTBooleanLiteral.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTBreakStatement.java
Starting at line 29 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTCastExpression.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTCatchStatement.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTClassOrInterfaceBody.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTClassOrInterfaceType.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTConditionalAndExpression.java
Starting at line 30 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTConditionalExpression.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTConditionalOrExpression.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTContinueStatement.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTDefaultValue.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTDoStatement.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTEmptyStatement.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTEnumBody.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTEnumConstant.java
Starting at line 17 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTEnumDeclaration.java
Starting at line 20 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTEqualityExpression.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTExclusiveOrExpression.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTExpression.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTExtendsList.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTFinallyStatement.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTForInit.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTForStatement.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTForUpdate.java
Starting at line 24 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTFormalParameters.java
Starting at line 30 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTIfStatement.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTImplementsList.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTInclusiveOrExpression.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTInstanceOfExpression.java
Starting at line 17 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTLabeledStatement.java
Starting at line 20 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTLambdaExpression.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTMarkerAnnotation.java
Starting at line 20 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTMemberSelector.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTMemberValue.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTMemberValueArrayInitializer.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTMemberValuePair.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTMemberValuePairs.java
Starting at line 25 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTMethodDeclarator.java
Starting at line 20 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTMethodReference.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTMultiplicativeExpression.java
Starting at line 33 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTName.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTNameList.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTNormalAnnotation.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTNullLiteral.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTPostfixExpression.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTPreDecrementExpression.java
Starting at line 20 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTPreIncrementExpression.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTPrimaryExpression.java
Starting at line 39 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTPrimaryPrefix.java
Starting at line 54 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTPrimarySuffix.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTRSIGNEDSHIFT.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTRUNSIGNEDSHIFT.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTRelationalExpression.java
Starting at line 19 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTResource.java
Starting at line 19 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTResourceSpecification.java
Starting at line 19 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTResources.java
Starting at line 28 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTResultType.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTReturnStatement.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTShiftExpression.java
Starting at line 20 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTSingleMemberAnnotation.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTStatement.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTStatementExpression.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTStatementExpressionList.java
Starting at line 31 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTSwitchLabel.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTSwitchStatement.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTSynchronizedStatement.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTTypeArgument.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTTypeArguments.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTTypeBound.java
Starting at line 35 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTTypeDeclaration.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTTypeParameter.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTTypeParameters.java
Starting at line 20 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTUnaryExpression.java
Starting at line 20 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTUnaryExpressionNotPlusMinus.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTVariableDeclarator.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTVariableInitializer.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTWhileStatement.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTWildcardBounds.java

    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }

}
=====================================================================
Found a 9 line (22 tokens) duplication in the following files: 
Starting at line 25 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTAssignmentOperator.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTBlock.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTBlockStatement.java
Starting at line 25 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTBooleanLiteral.java
Starting at line 24 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTCastExpression.java
Starting at line 20 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTClassOrInterfaceDeclaration.java
Starting at line 25 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTConditionalExpression.java
Starting at line 23 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTConstructorDeclaration.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTExplicitConstructorInvocation.java
Starting at line 29 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTFormalParameter.java
Starting at line 25 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTIfStatement.java
Starting at line 56 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTImportDeclaration.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTInitializer.java
Starting at line 27 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTName.java
Starting at line 34 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTPrimaryPrefix.java
Starting at line 20 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTPrimitiveType.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTReferenceType.java
Starting at line 23 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTResultType.java
Starting at line 25 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTSwitchLabel.java
Starting at line 17 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTTryStatement.java
Starting at line 30 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTTypeDeclaration.java

    }


    /**
     * Accept the visitor. *
     */
    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }
=====================================================================
Found a 5 line (22 tokens) duplication in the following files: 
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTBlock.java
Starting at line 29 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTConstructorDeclaration.java
Starting at line 61 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTImportDeclaration.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTInitializer.java
Starting at line 29 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTVariableDeclaratorId.java

    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }

    private boolean containsComment;
=====================================================================
Found a 11 line (22 tokens) duplication in the following files: 
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTBlockStatement.java
Starting at line 40 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTClassOrInterfaceBodyDeclaration.java
Starting at line 25 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTClassOrInterfaceDeclaration.java
Starting at line 41 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTCompilationUnit.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTExplicitConstructorInvocation.java
Starting at line 22 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTFieldDeclaration.java
Starting at line 31 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTFormalParameter.java
Starting at line 29 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTLiteral.java
Starting at line 24 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTLocalVariableDeclaration.java
Starting at line 24 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTMethodDeclaration.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTPackageDeclaration.java
Starting at line 22 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTThrowStatement.java
Starting at line 22 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTTryStatement.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTType.java
Starting at line 45 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\AbstractJavaNode.java

    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }

    /**
     * Tells if this BlockStatement is an allocation statement.
     * This is done by
     *
     * @return the result of containsDescendantOfType(ASTAllocationExpression.class)
     */
    public final boolean isAllocation() {
=====================================================================
Found a 6 line (22 tokens) duplication in the following files: 
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTFormalParameters.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTMethodDeclarator.java

    public ASTFormalParameters(JavaParser p, int id) {
        super(p, id);
    }

    public int getParameterCount() {
        return jjtGetNumChildren();
=====================================================================
Found a 10 line (22 tokens) duplication in the following files: 
Starting at line 24 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTMethodDeclaration.java
Starting at line 22 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTTriggerTimingPointSection.java
Starting at line 22 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTTriggerUnit.java

    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }

    /**
     * Gets the name of the method.
     *
     * @return a String representing the name of the method
     */
    public String getMethodName() {
=====================================================================
Found a 6 line (22 tokens) duplication in the following files: 
Starting at line 34 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTMethodDeclaration.java
Starting at line 32 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTMethodDeclaration.java
Starting at line 33 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTProgramUnit.java
Starting at line 32 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTTypeMethod.java

        ASTMethodDeclarator md = getFirstChildOfType(ASTMethodDeclarator.class);
        if (md != null) {
	    return md.getImage();
	}
        return null;
    }
=====================================================================
Found a 5 line (22 tokens) duplication in the following files: 
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTType.java
Starting at line 20 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTDatatype.java

    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }

    public String getTypeImage() {
=====================================================================
Found a 4 line (22 tokens) duplication in the following files: 
Starting at line 115 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\DumpFacade.java
Starting at line 129 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\DumpFacade.java

			if (((ASTBlock) node).containsComment()) {
				extras.add("contains comment");
			}
		} else if (node instanceof ASTClassOrInterfaceDeclaration) {
=====================================================================
Found a 5 line (22 tokens) duplication in the following files: 
Starting at line 97 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 179 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java

        dataFlow.createNewNode(node);
        return super.visit(node, data);
    }

    public Object visit(ASTExpression node, Object data) {
=====================================================================
Found a 8 line (22 tokens) duplication in the following files: 
Starting at line 160 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 217 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 261 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 407 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 427 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java

        LOGGER.finest("pushOnStack FOR_UPDATE: line " + node.getBeginLine() +", column " + node.getBeginColumn());
        return data;
    }

// 	----------------------------------------------------------------------------
//  BRANCH OUT

    public Object visit(ASTStatement node, Object data) {
=====================================================================
Found a 3 line (22 tokens) duplication in the following files: 
Starting at line 187 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 451 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java

            if (!st.hasElse()) {
                dataFlow.pushOnStack(NodeType.IF_LAST_STATEMENT_WITHOUT_ELSE, dataFlow.getLast());
                LOGGER.finest("pushOnStack IF_LAST_STATEMENT_WITHOUT_ELSE: line " + node.getBeginLine() +", column " + node.getBeginColumn());
=====================================================================
Found a 2 line (22 tokens) duplication in the following files: 
Starting at line 34 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\basic\BigIntegerInstantiationRule.java
Starting at line 51 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\optimizations\UnnecessaryWrapperObjectCreationRule.java

        boolean jdk15 = ((RuleContext) data).getLanguageVersion().compareTo(LanguageVersion.JAVA_15) >= 0;
        if ((TypeHelper.isA((ASTClassOrInterfaceType) type, BigInteger.class) || jdk15 && TypeHelper.isA((ASTClassOrInterfaceType) type, BigDecimal.class)) &&
=====================================================================
Found a 9 line (22 tokens) duplication in the following files: 
Starting at line 51 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\basic\BigIntegerInstantiationRule.java
Starting at line 101 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\basic\BooleanInstantiationRule.java

                    addViolation(data, node);
                    return data;
                }
            }
        }
        return super.visit(node, data);
    }

}
=====================================================================
Found a 1 line (22 tokens) duplication in the following files: 
Starting at line 84 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\AbstractNcssCountRule.java
Starting at line 37 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\ExcessiveNodeCountRule.java

            nodeCount = (Integer) ((JavaNode) node.jjtGetChild(i)).jjtAccept(this, data);
=====================================================================
Found a 6 line (22 tokens) duplication in the following files: 
Starting at line 82 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\NPathComplexityRule.java
Starting at line 163 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NPathComplexityRule.java

        int npath = complexityMultipleOf(node, 1, data);
        return Integer.valueOf(npath);
    }

    @Override
    public Object visit(ASTIfStatement node, Object data) {
=====================================================================
Found a 3 line (22 tokens) duplication in the following files: 
Starting at line 123 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\NPathComplexityRule.java
Starting at line 284 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NPathComplexityRule.java

        int boolCompWhile = sumExpressionComplexity(node.getFirstChildOfType(ASTExpression.class));

        Integer nPathWhile = (Integer) ((JavaNode) node.getFirstChildOfType(ASTStatement.class)).jjtAccept(this, data);
=====================================================================
Found a 3 line (22 tokens) duplication in the following files: 
Starting at line 134 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\NPathComplexityRule.java
Starting at line 297 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NPathComplexityRule.java

        int boolCompDo = sumExpressionComplexity(node.getFirstChildOfType(ASTExpression.class));

        Integer nPathDo = (Integer) ((JavaNode) node.getFirstChildOfType(ASTStatement.class)).jjtAccept(this, data);
=====================================================================
Found a 3 line (22 tokens) duplication in the following files: 
Starting at line 145 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\NPathComplexityRule.java
Starting at line 310 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NPathComplexityRule.java

        int boolCompFor = sumExpressionComplexity(node.getFirstDescendantOfType(ASTExpression.class));

        Integer nPathFor = (Integer) ((JavaNode) node.getFirstChildOfType(ASTStatement.class)).jjtAccept(this, data);
=====================================================================
Found a 6 line (22 tokens) duplication in the following files: 
Starting at line 26 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\NcssMethodCountRule.java
Starting at line 26 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NcssMethodCountRule.java
Starting at line 52 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\design\ExcessiveLengthRule.java

        return super.visit(node, data);
    }

    @Override
    public Object[] getViolationParameters(DataPoint point) {
        return new String[] { ((ASTMethodDeclaration) point.getNode()).getMethodName(),
=====================================================================
Found a 3 line (22 tokens) duplication in the following files: 
Starting at line 84 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\NcssTypeCountRule.java
Starting at line 202 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\AbstractNcssCountRule.java
Starting at line 89 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NcssObjectCountRule.java
Starting at line 57 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\design\ExcessiveLengthRule.java

        return new String[] { String.valueOf((int) point.getScore()) };
    }
}
=====================================================================
Found a 4 line (22 tokens) duplication in the following files: 
Starting at line 109 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\comments\CommentRequiredRule.java
Starting at line 115 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\comments\CommentRequiredRule.java

	public Object visit(ASTConstructorDeclaration decl, Object data) {
	    checkComment(decl, data);
	    return super.visit(decl, data);
	}
=====================================================================
Found a 10 line (22 tokens) duplication in the following files: 
Starting at line 54 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\controversial\AssignmentInOperandRule.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\naming\AvoidDollarSignsRule.java
Starting at line 22 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\naming\AvoidDollarSignsRule.java

		(node.hasDecendantOfAnyType(ASTPreIncrementExpression.class, ASTPreDecrementExpression.class, ASTPostfixExpression.class))))) {

	    addViolation(data, node);
	    return data;
	}
	return super.visit(node, data);
    }


	public boolean allowsAllAssignments() {
=====================================================================
Found a 6 line (22 tokens) duplication in the following files: 
Starting at line 23 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\controversial\OnlyOneReturnRule.java
Starting at line 105 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\unnecessary\UselessOverridingMethodRule.java

        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTMethodDeclaration node, Object data) {
        if (node.isAbstract()) {
=====================================================================
Found a 4 line (22 tokens) duplication in the following files: 
Starting at line 260 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\coupling\LawOfDemeterRule.java
Starting at line 264 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\coupling\LawOfDemeterRule.java

                var = determineTypeOfVariable(baseName, scope.getEnclosingScope(MethodScope.class).getVariableDeclarations().keySet());
            }
            if (var == null) {
                baseScope = SCOPE_CLASS;
=====================================================================
Found a 2 line (22 tokens) duplication in the following files: 
Starting at line 34 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\coupling\LooseCouplingRule.java
Starting at line 32 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\rules\LooseCoupling.java

        if (CollectionUtil.isCollectionType(typeName, false) && (parent instanceof ASTFieldDeclaration || parent instanceof ASTFormalParameter || parent instanceof ASTResultType)) {
            addViolation(data, node, typeName);
=====================================================================
Found a 8 line (22 tokens) duplication in the following files: 
Starting at line 177 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\AccessorClassGenerationRule.java
Starting at line 214 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\AccessorClassGenerationRule.java

                if (o != null) {
                    processRule(o);
                } else {
                    processRule(data);
                }
                setClassID(-1);
                return o;
            }
=====================================================================
Found a 2 line (22 tokens) duplication in the following files: 
Starting at line 26 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\AssignmentToNonFinalStaticRule.java
Starting at line 78 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\PreserveStackTraceRule.java
Starting at line 43 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\UnnecessaryLocalBeforeReturnRule.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\optimizations\LocalVariableCouldBeFinalRule.java
Starting at line 30 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\optimizations\MethodArgumentCouldBeFinalRule.java
Starting at line 85 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\unusedcode\UnusedFormalParameterRule.java
Starting at line 31 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\unusedcode\UnusedPrivateFieldRule.java

        Map<VariableNameDeclaration, List<NameOccurrence>> vars = node.getScope().getDeclarations(VariableNameDeclaration.class);
        for (Map.Entry<VariableNameDeclaration, List<NameOccurrence>> entry: vars.entrySet()) {
=====================================================================
Found a 7 line (22 tokens) duplication in the following files: 
Starting at line 34 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\AvoidReassigningParametersRule.java
Starting at line 40 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\unusedcode\UnusedPrivateFieldRule.java

                    (!decl.isArray() || jocc.getLocation().jjtGetParent().jjtGetParent().jjtGetNumChildren() == 1))
                {
                    // not an array or no primary suffix to access the array values
                    addViolation(data, decl.getNode(), decl.getImage());
                }
            }
        }
=====================================================================
Found a 3 line (22 tokens) duplication in the following files: 
Starting at line 69 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\ImmutableFieldRule.java
Starting at line 99 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\unusedcode\UnusedFormalParameterRule.java
Starting at line 34 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\unusedcode\UnusedLocalVariableRule.java

        for (NameOccurrence occ: usages) {
            JavaNameOccurrence jocc = (JavaNameOccurrence)occ;
            if (jocc.isOnLeftHandSide() || jocc.isSelfAssignment()) {
=====================================================================
Found a 2 line (22 tokens) duplication in the following files: 
Starting at line 56 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\SimplifyBooleanReturnsRule.java
Starting at line 57 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\SimplifyBooleanReturnsRule.java
Starting at line 180 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\SimplifyBooleanReturnsRule.java

            node.jjtGetChild(0).jjtGetChild(0).jjtGetChild(0) instanceof ASTPrimaryPrefix &&
            node.jjtGetChild(0).jjtGetChild(0).jjtGetChild(0).jjtGetChild(0) instanceof ASTLiteral &&
=====================================================================
Found a 5 line (22 tokens) duplication in the following files: 
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\naming\AvoidFieldNameMatchingTypeNameRule.java
Starting at line 39 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\unusedcode\UnusedModifierRule.java

        }
        return super.visit(node, data);
    }

    public Object visit(ASTFieldDeclaration node, Object data) {
=====================================================================
Found a 4 line (22 tokens) duplication in the following files: 
Starting at line 59 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\strictexception\SignatureDeclareThrowsExceptionRule.java
Starting at line 69 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\strictexception\SignatureDeclareThrowsExceptionRule.java

        if (!exceptionList.isEmpty()) {
            evaluateExceptions(exceptionList, o);
        }
        return super.visit(methodDeclaration, o);
=====================================================================
Found a 3 line (22 tokens) duplication in the following files: 
Starting at line 20 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\LocalScope.java
Starting at line 32 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\LocalScope.java
Starting at line 28 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\MethodScope.java

    public Map<VariableNameDeclaration, List<NameOccurrence>> getVariableDeclarations() {
        return getDeclarations(VariableNameDeclaration.class);
    }
=====================================================================
Found a 3 line (22 tokens) duplication in the following files: 
Starting at line 318 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\visitors\PMDASMVisitor.java
Starting at line 323 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\visitors\PMDASMVisitor.java

		public void visitFieldInsn(int opcode, String owner, String name, String desc) {
			parent.parseClassName(owner);
			parent.addType(Type.getType(desc));
=====================================================================
Found a 3 line (22 tokens) duplication in the following files: 
Starting at line 36 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\JspParser.java
Starting at line 36 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\VmParser.java

    public Node parse(String fileName, Reader source) throws ParseException {
	AbstractTokenManager.setFileName(fileName);
	return new net.sourceforge.pmd.lang.jsp.ast.JspParser(new SimpleCharStream(source)).CompilationUnit();
=====================================================================
Found a 9 line (22 tokens) duplication in the following files: 
Starting at line 64 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTAttribute.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTAttributeValue.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTCData.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTCommentTag.java
Starting at line 17 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTCompilationUnit.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTContent.java
Starting at line 35 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTDeclaration.java
Starting at line 38 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTDoctypeDeclaration.java
Starting at line 63 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTDoctypeExternalId.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTElExpression.java
Starting at line 101 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTElement.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTJspComment.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTJspDeclaration.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTJspDeclarations.java
Starting at line 38 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTJspDirective.java
Starting at line 49 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTJspDirectiveAttribute.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTJspDocument.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTJspExpression.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTJspExpressionInAttribute.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTJspScriptlet.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTText.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTUnparsedText.java
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTValueBinding.java
Starting at line 37 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\AbstractJspNode.java

    }


    /**
     * Accept the visitor. *
     */
    public Object jjtAccept(JspParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }
=====================================================================
Found a 4 line (22 tokens) duplication in the following files: 
Starting at line 70 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTAttribute.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTAttributeValue.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTCData.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTCommentTag.java
Starting at line 23 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTCompilationUnit.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTContent.java
Starting at line 41 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTDeclaration.java
Starting at line 44 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTDoctypeDeclaration.java
Starting at line 69 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTDoctypeExternalId.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTElExpression.java
Starting at line 107 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTElement.java
Starting at line 19 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTHtmlScript.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTJspComment.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTJspDeclaration.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTJspDeclarations.java
Starting at line 44 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTJspDirective.java
Starting at line 55 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTJspDirectiveAttribute.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTJspDocument.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTJspExpression.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTJspExpressionInAttribute.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTJspScriptlet.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTText.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTUnparsedText.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTValueBinding.java

    public Object jjtAccept(JspParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }
}
=====================================================================
Found a 6 line (22 tokens) duplication in the following files: 
Starting at line 46 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\rule\basic\NoInlineStyleInformationRule.java
Starting at line 54 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\rule\basic\NoInlineStyleInformationRule.java

        if (isStyleAttribute(node)) {
            addViolation(data, node);
        }

        return super.visit(node, data);
    }
=====================================================================
Found a 7 line (22 tokens) duplication in the following files: 
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTArguments.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTDatatype.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTFormalParameter.java
Starting at line 26 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTIfStatement.java
Starting at line 17 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTMethodDeclaration.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTMethodDeclarator.java
Starting at line 18 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTName.java
Starting at line 17 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTPackageBody.java
Starting at line 17 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTPackageSpecification.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTPrimaryPrefix.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTPrimarySuffix.java
Starting at line 18 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTProgramUnit.java
Starting at line 18 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTTriggerTimingPointSection.java
Starting at line 18 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTTriggerUnit.java
Starting at line 18 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTTypeMethod.java
Starting at line 17 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTTypeSpecification.java
Starting at line 22 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTVariableOrConstantDeclaratorId.java

  }


  /** Accept the visitor. **/
  public Object jjtAccept(PLSQLParserVisitor visitor, Object data) {
    return visitor.visit(this, data);
  }
=====================================================================
Found a 14 line (22 tokens) duplication in the following files: 
Starting at line 38 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTProgramUnit.java
Starting at line 33 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTTriggerUnit.java

   }

  @Override
  public String getName() {
      return getMethodName();
  }

  /**
   * Gets the name of the Oracle Object.
   *
   * @return a String representing the name of the Oracle Object
   */
  @Override
  public String getObjectName() {
=====================================================================
Found a 5 line (22 tokens) duplication in the following files: 
Starting at line 117 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 202 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\CyclomaticComplexityRule.java

	}

	@Override
	public Object visit(ASTPackageSpecification node, Object data) {
		LOGGER.entering(CLASS_NAME, "visit(ASTPackageSpecification)");
=====================================================================
Found a 5 line (22 tokens) duplication in the following files: 
Starting at line 123 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 218 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\CyclomaticComplexityRule.java

	}

	@Override
	public Object visit(ASTPackageBody node, Object data) {
		LOGGER.entering(CLASS_NAME, "visit(ASTPackageBody)");
=====================================================================
Found a 5 line (22 tokens) duplication in the following files: 
Starting at line 144 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 268 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\CyclomaticComplexityRule.java
Starting at line 93 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NPathComplexityRule.java

	}

	@Override
	public Object visit(ASTProgramUnit node, Object data) {
		LOGGER.entering(CLASS_NAME, "visit(ASTProgramUnit)");
=====================================================================
Found a 5 line (22 tokens) duplication in the following files: 
Starting at line 655 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 324 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\CyclomaticComplexityRule.java
Starting at line 109 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NPathComplexityRule.java

	}

	@Override
	public Object visit(ASTTypeMethod node, Object data) {
		LOGGER.entering(CLASS_NAME, "visit(ASTTypeMethod)");
=====================================================================
Found a 5 line (22 tokens) duplication in the following files: 
Starting at line 661 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 210 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\CyclomaticComplexityRule.java

	}

	@Override
	public Object visit(ASTTypeSpecification node, Object data) {
		LOGGER.entering(CLASS_NAME, "visit(ASTTypeSpecification)");
=====================================================================
Found a 5 line (22 tokens) duplication in the following files: 
Starting at line 692 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 243 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\CyclomaticComplexityRule.java
Starting at line 125 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NPathComplexityRule.java

	}

	@Override
	public Object visit(ASTTriggerUnit node, Object data) {
		LOGGER.entering(CLASS_NAME, "visit(ASTTriggerUnit)");
=====================================================================
Found a 5 line (22 tokens) duplication in the following files: 
Starting at line 698 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 373 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\CyclomaticComplexityRule.java
Starting at line 141 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NPathComplexityRule.java

	}

	@Override
	public Object visit(ASTTriggerTimingPointSection node, Object data) {
		LOGGER.entering(CLASS_NAME, "visit(ASTTriggerTimingPointSection)");
=====================================================================
Found a 1 line (22 tokens) duplication in the following files: 
Starting at line 96 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\AbstractNcssCountRule.java
Starting at line 37 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\design\ExcessiveNodeCountRule.java

	    nodeCount = (Integer) ((PLSQLNode) node.jjtGetChild(i)).jjtAccept(this, data);
=====================================================================
Found a 5 line (22 tokens) duplication in the following files: 
Starting at line 160 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\CyclomaticComplexityRule.java
Starting at line 363 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NPathComplexityRule.java

  }

  @Override
public Object visit(ASTCaseStatement node, Object data) {
    LOGGER.entering(CLASS_NAME,"visit(ASTCaseStatement)");
=====================================================================
Found a 5 line (22 tokens) duplication in the following files: 
Starting at line 173 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\CyclomaticComplexityRule.java
Starting at line 341 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NPathComplexityRule.java

  }

  @Override
public Object visit(ASTCaseWhenClause node, Object data) {
    LOGGER.entering(CLASS_NAME,"visit(ASTCaseWhenClause)");
=====================================================================
Found a 15 line (22 tokens) duplication in the following files: 
Starting at line 43 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\properties\DoubleProperty.java
Starting at line 43 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\properties\IntegerProperty.java
Starting at line 42 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\properties\LongProperty.java

	public DoubleProperty(String theName, String theDescription, Double min, Double max, Double theDefault, float theUIOrder) {
		super(theName, theDescription, min, max, theDefault, theUIOrder);		
	}
	
	/**
     * Constructor for DoubleProperty.
     * @param theName String
     * @param theDescription String
     * @param minStr String
     * @param maxStr String
     * @param defaultStr String
     * @param theUIOrder float
     * @throws IllegalArgumentException
     */
    public DoubleProperty(String theName, String theDescription, String minStr, String maxStr, String defaultStr, float theUIOrder) {
=====================================================================
Found a 1 line (22 tokens) duplication in the following files: 
Starting at line 33 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\symboltable\AbstractScope.java
Starting at line 50 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\symboltable\Scope.java

    public <T extends NameDeclaration> Map<T, List<NameOccurrence>> getDeclarations(Class<T> clazz) {
=====================================================================
Found a 5 line (22 tokens) duplication in the following files: 
Starting at line 20 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\rule\VmRuleViolationFactory.java
Starting at line 26 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\rule\VmRuleViolationFactory.java

    }

    @Override
    protected RuleViolation createRuleViolation(final Rule rule, final RuleContext ruleContext, final Node node,
            final String message) {
=====================================================================
Found a 6 line (22 tokens) duplication in the following files: 
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\rule\basic\CollapsibleIfStatementsRule.java
Starting at line 25 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\rule\basic\EmptyIfStmtRule.java

        handleIfElseIf(node, data);
        return super.visit(node, data);
    }

    @Override
    public Object visit(final ASTElseIfStatement node, final Object data) {
=====================================================================
Found a 8 line (22 tokens) duplication in the following files: 
Starting at line 25 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\EmacsRenderer.java
Starting at line 81 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\HTMLRenderer.java
Starting at line 36 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\TextPadRenderer.java
Starting at line 33 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\TextRenderer.java
Starting at line 55 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\XMLRenderer.java

    public String defaultFileExtension() { return "emacs"; }
    
    /**
     * {@inheritDoc}
     */
    @Override
    public void renderFileViolations(Iterator<RuleViolation> violations) throws IOException {
		Writer writer = getWriter();
=====================================================================
Found a 4 line (22 tokens) duplication in the following files: 
Starting at line 55 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\TextPadRenderer.java
Starting at line 48 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\TextRenderer.java
Starting at line 65 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\TextRenderer.java
Starting at line 75 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\TextRenderer.java

	    buf.append(rv.getDescription()).append(PMD.EOL);
	    writer.write(buf.toString());
	}
    }
=====================================================================
Found a 4 line (22 tokens) duplication in the following files: 
Starting at line 360 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\StringUtil.java
Starting at line 511 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\StringUtil.java

	    sb.append(items[0]);

	    for (int i=1; i<items.length; i++) {
	    	sb.append(separator);
=====================================================================
Found a 3 line (22 tokens) duplication in the following files: 
Starting at line 713 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\designer\Designer.java
Starting at line 88 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\viewer\gui\MainFrame.java

		JMenuBar menuBar = new JMenuBar();
		JMenu menu = new JMenu("Language");
		ButtonGroup group = new ButtonGroup();
=====================================================================
Found a 15 line (22 tokens) duplication in the following files: 
Starting at line 112 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\filter\Filters.java
Starting at line 129 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\filter\Filters.java

				return filter.filter(new File(dir, name));
			}

			public String toString() {
				return filter.toString();
			}
		};
	}

	/**
	 * Given a FilenameFilter, expose as a File Filter.
	 * @param filter The FilenameFilter.
	 * @return A File Filter.
	 */
	public static Filter<File> toFileFilter(final FilenameFilter filter) {
=====================================================================
Found a 9 line (22 tokens) duplication in the following files: 
Starting at line 69 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\viewer\gui\ASTPanel.java
Starting at line 51 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\viewer\gui\XPathPanel.java

        add(new JScrollPane(tree), BorderLayout.CENTER);
    }

    /**
     * @see ViewerModelListener#viewerModelChanged(ViewerModelEvent)
     */
    public void viewerModelChanged(ViewerModelEvent e) {
        switch (e.getReason()) {
            case ViewerModelEvent.CODE_RECOMPILED:
=====================================================================
Found a 9 line (22 tokens) duplication in the following files: 
Starting at line 37 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\viewer\gui\EvaluationResultsPanel.java
Starting at line 36 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\viewer\gui\XPathPanel.java

        super(new BorderLayout());

        this.model = model;

        init();
    }

    private void init() {
        model.addViewerModelListener(this);
=====================================================================
Found a 4 line (21 tokens) duplication in the following files: 
Starting at line 183 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\AbstractPropertySource.java
Starting at line 115 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\TypeMap.java

        Iterator<Map.Entry<PropertyDescriptor<?>, Object>> iter = valuesByProperty.entrySet().iterator();

        while (iter.hasNext()) {
            Map.Entry<PropertyDescriptor<?>, Object> entry = iter.next();
=====================================================================
Found a 4 line (21 tokens) duplication in the following files: 
Starting at line 71 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\ant\Formatter.java
Starting at line 310 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\ant\PMDTask.java

        } catch (IOException ioe) {
            throw new BuildException(ioe.getMessage(), ioe);
        }
    }
=====================================================================
Found a 4 line (21 tokens) duplication in the following files: 
Starting at line 40 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cli\PMDCommandLineInterface.java
Starting at line 56 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\CPDCommandLineInterface.java

			}
		} catch (ParameterException e) {
			jcommander.usage();
			System.out.println(buildUsageText(jcommander));
=====================================================================
Found a 2 line (21 tokens) duplication in the following files: 
Starting at line 61 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\CsTokenizer.java
Starting at line 66 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\CsTokenizer.java

						{
							tokenEntries.add(new TokenEntry(String.valueOf(c)+String.valueOf(c)+"=", sourceCode.getFileName(), line));
=====================================================================
Found a 3 line (21 tokens) duplication in the following files: 
Starting at line 11 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\EcmascriptTokenizer.java
Starting at line 18 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\FortranTokenizer.java
Starting at line 17 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\RubyTokenizer.java

        this.stringToken = new ArrayList<String>();
        this.stringToken.add( "\'" );
        this.stringToken.add( "\"" );
=====================================================================
Found a 1 line (21 tokens) duplication in the following files: 
Starting at line 79 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\GUI.java
Starting at line 80 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\GUI.java

		{ "CSV (comma)",new Renderer() { public String render(Iterator<Match> items) { return new CSVRenderer(',').render(items); } } },
=====================================================================
Found a 4 line (21 tokens) duplication in the following files: 
Starting at line 344 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\GUI.java
Starting at line 811 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\designer\Designer.java

        frame.getContentPane().setLayout(new BorderLayout());
        JPanel topPanel = new JPanel();
        topPanel.setLayout(new BorderLayout());
        topPanel.add(settingsPanel, BorderLayout.NORTH);
=====================================================================
Found a 2 line (21 tokens) duplication in the following files: 
Starting at line 546 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\GUI.java
Starting at line 33 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\SimpleRenderer.java

    	Set<String> sourceIDs = new HashSet<String>(match.getMarkCount());
    	for (Iterator<TokenEntry> occurrences = match.iterator(); occurrences.hasNext();) {
=====================================================================
Found a 3 line (21 tokens) duplication in the following files: 
Starting at line 67 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\dcd\ClassLoaderUtil.java
Starting at line 114 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\dcd\ClassLoaderUtil.java

    public static Method getMethod(Class<?> type, String name, Class<?>... parameterTypes) {
	try {
	    return myGetMethod(type, name, parameterTypes);
=====================================================================
Found a 6 line (21 tokens) duplication in the following files: 
Starting at line 22 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\dcd\graph\ConstructorNode.java
Starting at line 22 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\dcd\graph\MethodNode.java

	public ConstructorNode(ClassNode classNode, String name, String desc) {
		super(classNode, name, desc);
		// getMember();
	}

	public boolean isStaticInitializer() {
=====================================================================
Found a 3 line (21 tokens) duplication in the following files: 
Starting at line 82 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\dcd\graph\UsageGraph.java
Starting at line 87 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\dcd\graph\UsageGraph.java

	public FieldNode defineField(String className, String name, String desc) {
		ClassNode classNode = defineClass(className);
		return classNode.defineField(name, desc);
=====================================================================
Found a 1 line (21 tokens) duplication in the following files: 
Starting at line 94 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\dcd\graph\UsageGraph.java
Starting at line 113 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\dcd\graph\UsageGraph.java

		if (ClassLoaderUtil.CLINIT.equals(name) || ClassLoaderUtil.INIT.equals(name)) {
=====================================================================
Found a 11 line (21 tokens) duplication in the following files: 
Starting at line 114 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\dcd\graph\UsageGraphBuilder.java
Starting at line 237 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\dcd\graph\UsageGraphBuilder.java

				printlnIndent("attr: " + attr);
			}
		}

		public void visitEnd() {
			if (TRACE) {
				println("visitEnd:");
			}
		}

		public FieldVisitor visitField(int access, String name, String desc, String signature, Object value) {
=====================================================================
Found a 5 line (21 tokens) duplication in the following files: 
Starting at line 127 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\dcd\graph\UsageGraphBuilder.java
Starting at line 161 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\dcd\graph\UsageGraphBuilder.java
Starting at line 327 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\dcd\graph\UsageGraphBuilder.java

				printlnIndent("access: " + access);
				printlnIndent("name: " + name);
				printlnIndent("desc: " + desc);
				printlnIndent("signature: " + signature);
				printlnIndent("value: " + value);
=====================================================================
Found a 3 line (21 tokens) duplication in the following files: 
Starting at line 247 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\dcd\graph\UsageGraphBuilder.java
Starting at line 354 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\dcd\graph\UsageGraphBuilder.java

		public void visitFieldInsn(int opcode, String owner, String name, String desc) {
			if (TRACE) {
				println("visitFieldInsn:");
=====================================================================
Found a 2 line (21 tokens) duplication in the following files: 
Starting at line 222 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ast\AbstractNode.java
Starting at line 256 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ast\AbstractNode.java

    public <T> List<T> findDescendantsOfType(Class<T> targetType) {
	List<T> list = new ArrayList<T>();
=====================================================================
Found a 4 line (21 tokens) duplication in the following files: 
Starting at line 43 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ast\xpath\NodeIterator.java
Starting at line 64 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ast\xpath\NodeIterator.java

    protected Node getPreviousSibling(Node contextNode) {
        Node parentNode = contextNode.jjtGetParent();
        if (parentNode != null) {
            int prevPosition = getPositionFromParent(contextNode) - 1;
=====================================================================
Found a 3 line (21 tokens) duplication in the following files: 
Starting at line 75 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ast\xpath\NodeIterator.java
Starting at line 83 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ast\xpath\NodeIterator.java

    protected Node getFirstChild(Node contextNode) {
        if (contextNode.jjtGetNumChildren() > 0) {
            return contextNode.jjtGetChild(0);
=====================================================================
Found a 7 line (21 tokens) duplication in the following files: 
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\cpp\CppParser.java
Starting at line 29 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\AbstractJavaParser.java
Starting at line 23 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\JspParser.java
Starting at line 28 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\PLSQLParser.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\xml\XmlParser.java

    public CppParser(ParserOptions parserOptions) {
	super(parserOptions);
    }

    @Override
    public TokenManager createTokenManager(Reader source) {
	return new CppTokenManager(source);
=====================================================================
Found a 4 line (21 tokens) duplication in the following files: 
Starting at line 124 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dfa\report\ReportHTMLPrintVisitor.java
Starting at line 180 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dfa\report\ReportHTMLPrintVisitor.java

                write("index.html", packageBuf);
            } catch (Exception e) {
                throw new RuntimeException("Error while writing HTML report: " + e.getMessage());
            }
=====================================================================
Found a 3 line (21 tokens) duplication in the following files: 
Starting at line 90 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\DesignPatternDetection.java
Starting at line 105 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\DesignPatternDetection.java
Starting at line 132 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\DesignPatternDetection.java
Starting at line 166 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\DesignPatternDetection.java
Starting at line 234 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\DesignPatternDetection.java
Starting at line 582 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\DesignPatternDetection.java
Starting at line 660 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\DesignPatternDetection.java

		packageNode.childrenAccept(this, data);
		Candidate candidate = new Candidate();
		RuleContext result = (RuleContext) data;
=====================================================================
Found a 5 line (21 tokens) duplication in the following files: 
Starting at line 336 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\DesignPatternDetection.java
Starting at line 692 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\DesignPatternDetection.java

					.getFirstDescendantOfType(ASTPrimaryPrefix.class);
			// Dieser Teil extrahiert den Attributennahmen und den
			// Ziel-Methodennamen.
			List<ASTName> names = prefixNode
					.findDescendantsOfType(ASTName.class);
=====================================================================
Found a 3 line (21 tokens) duplication in the following files: 
Starting at line 748 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\DesignPatternDetection.java
Starting at line 757 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\DesignPatternDetection.java

							if((blockList.get(size).findChildrenOfType(ASTBreakStatement.class)).size() > -1) {
								caseList.get(i).setStopLine(
										blockList.get(size).getEndLine());
=====================================================================
Found a 8 line (21 tokens) duplication in the following files: 
Starting at line 80 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\CandidateDAO.java
Starting at line 97 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\CandidateDAO.java
Starting at line 344 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\CandidateDAO.java
Starting at line 417 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\CandidateDAO.java

							+ "'," + candidate.getPackageNumber() + ");";
					stmt.executeUpdate(sql);
					stmt.close();
					connection.commit();
					// System.out
					// .println("Class Records created successfully in Case 1"
					// + candidate.getClassName());
				}
=====================================================================
Found a 5 line (21 tokens) duplication in the following files: 
Starting at line 176 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\CandidateDAO.java
Starting at line 525 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\CandidateDAO.java

							+ candidate.getClassName() + "';");
					stmt2.close();
					connection.commit();
				}
			}
=====================================================================
Found a 6 line (21 tokens) duplication in the following files: 
Starting at line 534 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\CandidateDAO.java
Starting at line 563 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\CandidateDAO.java
Starting at line 852 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\CandidateDAO.java
Starting at line 885 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\CandidateDAO.java

		if (candidate.getPackageName() != null) {
			try {
				Statement stmt = this.connection.createStatement();

				ResultSet rs = stmt
						.executeQuery("SELECT ID FROM packages where name = '"
=====================================================================
Found a 5 line (21 tokens) duplication in the following files: 
Starting at line 546 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\CandidateDAO.java
Starting at line 627 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\CandidateDAO.java
Starting at line 645 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\CandidateDAO.java
Starting at line 755 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\CandidateDAO.java
Starting at line 875 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\CandidateDAO.java
Starting at line 901 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\CandidateDAO.java
Starting at line 924 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\CandidateDAO.java

				stmt.close();
			} catch (SQLException e) {

				log.error( "failed!", e );;
			}
=====================================================================
Found a 6 line (21 tokens) duplication in the following files: 
Starting at line 837 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\CandidateDAO.java
Starting at line 875 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\CandidateDAO.java
Starting at line 901 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\CandidateDAO.java
Starting at line 924 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\CandidateDAO.java

				rsByMethod.close();
			} catch (SQLException e) {

				log.error( "failed!", e );;
			}
		}
=====================================================================
Found a 5 line (21 tokens) duplication in the following files: 
Starting at line 164 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\initialization\FirstTimeDBInit.java
Starting at line 223 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\initialization\FirstTimeDBInit.java
Starting at line 254 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\initialization\FirstTimeDBInit.java

					+ " FOREIGN KEY(class_id) REFERENCES classes(id))";
			initStatement.executeUpdate(sql);
			initStatement.close();

			Statement stmt = connection.createStatement();
=====================================================================
Found a 4 line (21 tokens) duplication in the following files: 
Starting at line 194 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\initialization\FirstTimeDBInit.java
Starting at line 224 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\initialization\FirstTimeDBInit.java
Starting at line 255 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\initialization\FirstTimeDBInit.java
Starting at line 319 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\initialization\FirstTimeDBInit.java

			initStatement.executeUpdate(sql);
			initStatement.close();
			Statement stmt = connection.createStatement();
			sql = "INSERT into parameters (name, type, method_id, attribute_id) "
=====================================================================
Found a 5 line (21 tokens) duplication in the following files: 
Starting at line 34 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\rules\builder\BuilderRule.java
Starting at line 148 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\rules\decorator\DecoratorRule.java
Starting at line 335 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\rules\facade\FacadeRule.java

			this.stmt.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
=====================================================================
Found a 5 line (21 tokens) duplication in the following files: 
Starting at line 122 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\rules\decorator\DecoratorRule.java
Starting at line 56 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\rules\singleton\SingletonRule.java

			this.connection.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
=====================================================================
Found a 4 line (21 tokens) duplication in the following files: 
Starting at line 106 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\rules\facade\FacadeRule.java
Starting at line 122 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\rules\mediator\MediatorRule.java

					+ ",'"
					+ level + "','" + result + "');";
			stmt2.executeUpdate(sqlResult);
			stmt2.close();
=====================================================================
Found a 3 line (21 tokens) duplication in the following files: 
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTArrayComprehension.java
Starting at line 17 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTArrayComprehensionLoop.java
Starting at line 18 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTArrayLiteral.java
Starting at line 17 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTAssignment.java
Starting at line 17 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTBlock.java
Starting at line 17 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTEmptyExpression.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTForInLoop.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTForLoop.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTFunctionCall.java
Starting at line 17 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTFunctionNode.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTIfStatement.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTLabeledStatement.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTLetNode.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTNewExpression.java
Starting at line 18 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTNumberLiteral.java
Starting at line 18 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTObjectLiteral.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTObjectProperty.java
Starting at line 17 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTRegExpLiteral.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTReturnStatement.java
Starting at line 17 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTStringLiteral.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTSwitchCase.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTSwitchStatement.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTTryStatement.java
Starting at line 18 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTVariableDeclaration.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTVariableInitializer.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTWhileLoop.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTWithStatement.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTXmlExpression.java
Starting at line 36 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\AbstractEcmascriptNode.java

    public Object jjtAccept(EcmascriptParserVisitor visitor, Object data) {
	return visitor.visit(this, data);
    }
=====================================================================
Found a 3 line (21 tokens) duplication in the following files: 
Starting at line 17 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTAstRoot.java
Starting at line 18 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTBreakStatement.java
Starting at line 17 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTCatchClause.java
Starting at line 17 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTComment.java
Starting at line 17 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTConditionalExpression.java
Starting at line 18 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTContinueStatement.java
Starting at line 17 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTDoLoop.java
Starting at line 17 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTElementGet.java
Starting at line 18 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTExpressionStatement.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTInfixExpression.java
Starting at line 19 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTKeywordLiteral.java
Starting at line 17 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTLabel.java
Starting at line 18 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTName.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTParenthesizedExpression.java
Starting at line 17 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTPropertyGet.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTScope.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTThrowStatement.java
Starting at line 24 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTUnaryExpression.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTXmlDotQuery.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTXmlMemberGet.java
Starting at line 17 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTXmlString.java

    public Object jjtAccept(EcmascriptParserVisitor visitor, Object data) {
	return visitor.visit(this, data);
    }
=====================================================================
Found a 7 line (21 tokens) duplication in the following files: 
Starting at line 23 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTBreakStatement.java
Starting at line 23 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\ASTContinueStatement.java

	return node.getBreakLabel() != null;
    }

    public ASTName getLabel() {
	return (ASTName) jjtGetChild(0);
    }
}
=====================================================================
Found a 6 line (21 tokens) duplication in the following files: 
Starting at line 8 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\EcmascriptParserVisitorAdapter.java
Starting at line 104 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\rule\AbstractEcmascriptRule.java
Starting at line 68 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 8 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\JspParserVisitorAdapter.java
Starting at line 66 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\rule\AbstractJspRule.java

    public Object visit(EcmascriptNode node, Object data) {
	node.childrenAccept(this, data);
	return null;
    }

    public Object visit(ASTArrayComprehension node, Object data) {
=====================================================================
Found a 5 line (21 tokens) duplication in the following files: 
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\EcmascriptParserVisitorAdapter.java
Starting at line 17 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\EcmascriptParserVisitorAdapter.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\EcmascriptParserVisitorAdapter.java
Starting at line 25 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\EcmascriptParserVisitorAdapter.java
Starting at line 29 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\EcmascriptParserVisitorAdapter.java
Starting at line 33 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\EcmascriptParserVisitorAdapter.java
Starting at line 37 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\EcmascriptParserVisitorAdapter.java
Starting at line 41 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\EcmascriptParserVisitorAdapter.java
Starting at line 45 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\EcmascriptParserVisitorAdapter.java
Starting at line 49 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\EcmascriptParserVisitorAdapter.java
Starting at line 53 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\EcmascriptParserVisitorAdapter.java
Starting at line 57 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\EcmascriptParserVisitorAdapter.java
Starting at line 61 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\EcmascriptParserVisitorAdapter.java
Starting at line 65 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\EcmascriptParserVisitorAdapter.java
Starting at line 69 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\EcmascriptParserVisitorAdapter.java
Starting at line 73 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\EcmascriptParserVisitorAdapter.java
Starting at line 77 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\EcmascriptParserVisitorAdapter.java
Starting at line 81 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\EcmascriptParserVisitorAdapter.java
Starting at line 85 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\EcmascriptParserVisitorAdapter.java
Starting at line 89 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\EcmascriptParserVisitorAdapter.java
Starting at line 93 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\EcmascriptParserVisitorAdapter.java
Starting at line 97 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\EcmascriptParserVisitorAdapter.java
Starting at line 101 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\EcmascriptParserVisitorAdapter.java
Starting at line 105 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\EcmascriptParserVisitorAdapter.java
Starting at line 109 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\EcmascriptParserVisitorAdapter.java
Starting at line 113 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\EcmascriptParserVisitorAdapter.java
Starting at line 117 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\EcmascriptParserVisitorAdapter.java
Starting at line 121 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\EcmascriptParserVisitorAdapter.java
Starting at line 125 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\EcmascriptParserVisitorAdapter.java
Starting at line 129 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\EcmascriptParserVisitorAdapter.java
Starting at line 133 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\EcmascriptParserVisitorAdapter.java
Starting at line 137 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\EcmascriptParserVisitorAdapter.java
Starting at line 141 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\EcmascriptParserVisitorAdapter.java
Starting at line 145 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\EcmascriptParserVisitorAdapter.java
Starting at line 149 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\EcmascriptParserVisitorAdapter.java
Starting at line 153 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\EcmascriptParserVisitorAdapter.java
Starting at line 157 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\EcmascriptParserVisitorAdapter.java
Starting at line 161 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\EcmascriptParserVisitorAdapter.java
Starting at line 165 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\EcmascriptParserVisitorAdapter.java
Starting at line 169 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\EcmascriptParserVisitorAdapter.java
Starting at line 173 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\EcmascriptParserVisitorAdapter.java
Starting at line 177 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\EcmascriptParserVisitorAdapter.java
Starting at line 181 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\EcmascriptParserVisitorAdapter.java
Starting at line 185 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\EcmascriptParserVisitorAdapter.java
Starting at line 189 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\EcmascriptParserVisitorAdapter.java
Starting at line 193 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\EcmascriptParserVisitorAdapter.java
Starting at line 197 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\EcmascriptParserVisitorAdapter.java
Starting at line 201 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\EcmascriptParserVisitorAdapter.java
Starting at line 109 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\rule\AbstractEcmascriptRule.java
Starting at line 113 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\rule\AbstractEcmascriptRule.java
Starting at line 117 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\rule\AbstractEcmascriptRule.java
Starting at line 121 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\rule\AbstractEcmascriptRule.java
Starting at line 125 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\rule\AbstractEcmascriptRule.java
Starting at line 129 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\rule\AbstractEcmascriptRule.java
Starting at line 133 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\rule\AbstractEcmascriptRule.java
Starting at line 137 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\rule\AbstractEcmascriptRule.java
Starting at line 141 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\rule\AbstractEcmascriptRule.java
Starting at line 145 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\rule\AbstractEcmascriptRule.java
Starting at line 149 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\rule\AbstractEcmascriptRule.java
Starting at line 153 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\rule\AbstractEcmascriptRule.java
Starting at line 157 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\rule\AbstractEcmascriptRule.java
Starting at line 161 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\rule\AbstractEcmascriptRule.java
Starting at line 165 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\rule\AbstractEcmascriptRule.java
Starting at line 169 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\rule\AbstractEcmascriptRule.java
Starting at line 173 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\rule\AbstractEcmascriptRule.java
Starting at line 177 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\rule\AbstractEcmascriptRule.java
Starting at line 181 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\rule\AbstractEcmascriptRule.java
Starting at line 185 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\rule\AbstractEcmascriptRule.java
Starting at line 189 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\rule\AbstractEcmascriptRule.java
Starting at line 193 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\rule\AbstractEcmascriptRule.java
Starting at line 197 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\rule\AbstractEcmascriptRule.java
Starting at line 201 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\rule\AbstractEcmascriptRule.java
Starting at line 205 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\rule\AbstractEcmascriptRule.java
Starting at line 209 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\rule\AbstractEcmascriptRule.java
Starting at line 213 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\rule\AbstractEcmascriptRule.java
Starting at line 217 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\rule\AbstractEcmascriptRule.java
Starting at line 221 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\rule\AbstractEcmascriptRule.java
Starting at line 225 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\rule\AbstractEcmascriptRule.java
Starting at line 229 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\rule\AbstractEcmascriptRule.java
Starting at line 233 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\rule\AbstractEcmascriptRule.java
Starting at line 237 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\rule\AbstractEcmascriptRule.java
Starting at line 241 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\rule\AbstractEcmascriptRule.java
Starting at line 245 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\rule\AbstractEcmascriptRule.java
Starting at line 249 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\rule\AbstractEcmascriptRule.java
Starting at line 253 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\rule\AbstractEcmascriptRule.java
Starting at line 257 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\rule\AbstractEcmascriptRule.java
Starting at line 261 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\rule\AbstractEcmascriptRule.java
Starting at line 265 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\rule\AbstractEcmascriptRule.java
Starting at line 269 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\rule\AbstractEcmascriptRule.java
Starting at line 273 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\rule\AbstractEcmascriptRule.java
Starting at line 277 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\rule\AbstractEcmascriptRule.java
Starting at line 281 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\rule\AbstractEcmascriptRule.java
Starting at line 285 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\rule\AbstractEcmascriptRule.java
Starting at line 289 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\rule\AbstractEcmascriptRule.java
Starting at line 293 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\rule\AbstractEcmascriptRule.java
Starting at line 297 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\rule\AbstractEcmascriptRule.java

    public Object visit(ASTArrayComprehension node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTArrayComprehensionLoop node, Object data) {
=====================================================================
Found a 5 line (21 tokens) duplication in the following files: 
Starting at line 30 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\EcmascriptParserVisitorAdapter.java
Starting at line 126 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\rule\AbstractEcmascriptRule.java
Starting at line 352 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 414 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java

	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTBlock node, Object data) {
	return visit((EcmascriptNode) node, data);
=====================================================================
Found a 5 line (21 tokens) duplication in the following files: 
Starting at line 34 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\EcmascriptParserVisitorAdapter.java
Starting at line 130 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\rule\AbstractEcmascriptRule.java
Starting at line 408 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 470 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java

	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTBreakStatement node, Object data) {
	return visit((EcmascriptNode) node, data);
=====================================================================
Found a 5 line (21 tokens) duplication in the following files: 
Starting at line 46 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\EcmascriptParserVisitorAdapter.java
Starting at line 142 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\rule\AbstractEcmascriptRule.java
Starting at line 232 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 294 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java

	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTConditionalExpression node, Object data) {
	return visit((EcmascriptNode) node, data);
=====================================================================
Found a 5 line (21 tokens) duplication in the following files: 
Starting at line 50 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\EcmascriptParserVisitorAdapter.java
Starting at line 146 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\rule\AbstractEcmascriptRule.java
Starting at line 412 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 474 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java

	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTContinueStatement node, Object data) {
	return visit((EcmascriptNode) node, data);
=====================================================================
Found a 5 line (21 tokens) duplication in the following files: 
Starting at line 86 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\EcmascriptParserVisitorAdapter.java
Starting at line 182 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\rule\AbstractEcmascriptRule.java
Starting at line 380 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 442 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java

	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTIfStatement node, Object data) {
	return visit((EcmascriptNode) node, data);
=====================================================================
Found a 5 line (21 tokens) duplication in the following files: 
Starting at line 102 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\EcmascriptParserVisitorAdapter.java
Starting at line 198 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\rule\AbstractEcmascriptRule.java
Starting at line 348 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 410 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java

	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTLabeledStatement node, Object data) {
	return visit((EcmascriptNode) node, data);
=====================================================================
Found a 5 line (21 tokens) duplication in the following files: 
Starting at line 110 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\EcmascriptParserVisitorAdapter.java
Starting at line 206 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\rule\AbstractEcmascriptRule.java
Starting at line 216 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 278 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java

	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTName node, Object data) {
	return visit((EcmascriptNode) node, data);
=====================================================================
Found a 5 line (21 tokens) duplication in the following files: 
Starting at line 142 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\EcmascriptParserVisitorAdapter.java
Starting at line 238 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\rule\AbstractEcmascriptRule.java
Starting at line 416 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 478 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java

	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTReturnStatement node, Object data) {
	return visit((EcmascriptNode) node, data);
=====================================================================
Found a 5 line (21 tokens) duplication in the following files: 
Starting at line 158 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\EcmascriptParserVisitorAdapter.java
Starting at line 254 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\rule\AbstractEcmascriptRule.java
Starting at line 372 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 434 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java

	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTSwitchStatement node, Object data) {
	return visit((EcmascriptNode) node, data);
=====================================================================
Found a 5 line (21 tokens) duplication in the following files: 
Starting at line 162 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\EcmascriptParserVisitorAdapter.java
Starting at line 258 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\rule\AbstractEcmascriptRule.java
Starting at line 420 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 482 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java

	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTThrowStatement node, Object data) {
	return visit((EcmascriptNode) node, data);
=====================================================================
Found a 5 line (21 tokens) duplication in the following files: 
Starting at line 166 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\EcmascriptParserVisitorAdapter.java
Starting at line 262 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\rule\AbstractEcmascriptRule.java
Starting at line 428 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 490 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java

	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTTryStatement node, Object data) {
	return visit((EcmascriptNode) node, data);
=====================================================================
Found a 5 line (21 tokens) duplication in the following files: 
Starting at line 170 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\EcmascriptParserVisitorAdapter.java
Starting at line 266 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\rule\AbstractEcmascriptRule.java
Starting at line 280 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 342 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java

	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTUnaryExpression node, Object data) {
	return visit((EcmascriptNode) node, data);
=====================================================================
Found a 5 line (21 tokens) duplication in the following files: 
Starting at line 178 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\EcmascriptParserVisitorAdapter.java
Starting at line 274 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\rule\AbstractEcmascriptRule.java
Starting at line 168 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 230 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java

	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTVariableInitializer node, Object data) {
	return visit((EcmascriptNode) node, data);
=====================================================================
Found a 3 line (21 tokens) duplication in the following files: 
Starting at line 22 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\rule\EcmascriptRuleViolationFactory.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\JavaRuleViolationFactory.java

	@Override
    protected RuleViolation createRuleViolation(Rule rule, RuleContext ruleContext, Node node, String message) {
	return new ParametricRuleViolation<EcmascriptNode>(rule, ruleContext, (EcmascriptNode) node, message);
=====================================================================
Found a 1 line (21 tokens) duplication in the following files: 
Starting at line 27 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\rule\EcmascriptRuleViolationFactory.java
Starting at line 27 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\JavaRuleViolationFactory.java
Starting at line 27 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\rule\JspRuleViolationFactory.java
Starting at line 26 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\PLSQLRuleViolationFactory.java
Starting at line 48 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\AbstractRuleViolationFactory.java
Starting at line 27 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\xml\rule\XmlRuleViolationFactory.java

    protected RuleViolation createRuleViolation(Rule rule, RuleContext ruleContext, Node node, String message, int beginLine, int endLine) {
=====================================================================
Found a 3 line (21 tokens) duplication in the following files: 
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTAdditiveExpression.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTAllocationExpression.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTAndExpression.java
Starting at line 19 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTAnnotationMethodDeclaration.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTAnnotationTypeBody.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTAnnotationTypeDeclaration.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTAnnotationTypeMemberDeclaration.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTArgumentList.java
Starting at line 28 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTArguments.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTArrayDimsAndInits.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTArrayInitializer.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTAssertStatement.java
Starting at line 31 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTAssignmentOperator.java
Starting at line 31 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTBooleanLiteral.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTBreakStatement.java
Starting at line 29 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTCastExpression.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTCatchStatement.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTClassOrInterfaceBody.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTClassOrInterfaceType.java
Starting at line 41 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTCompilationUnit.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTConditionalAndExpression.java
Starting at line 30 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTConditionalExpression.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTConditionalOrExpression.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTContinueStatement.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTDefaultValue.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTDoStatement.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTEmptyStatement.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTEnumBody.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTEnumConstant.java
Starting at line 17 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTEnumDeclaration.java
Starting at line 20 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTEqualityExpression.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTExclusiveOrExpression.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTExpression.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTExtendsList.java
Starting at line 22 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTFieldDeclaration.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTFinallyStatement.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTForInit.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTForStatement.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTForUpdate.java
Starting at line 24 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTFormalParameters.java
Starting at line 30 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTIfStatement.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTImplementsList.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTInclusiveOrExpression.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTInstanceOfExpression.java
Starting at line 17 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTLabeledStatement.java
Starting at line 20 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTLambdaExpression.java
Starting at line 29 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTLiteral.java
Starting at line 24 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTLocalVariableDeclaration.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTMarkerAnnotation.java
Starting at line 20 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTMemberSelector.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTMemberValue.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTMemberValueArrayInitializer.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTMemberValuePair.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTMemberValuePairs.java
Starting at line 24 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTMethodDeclaration.java
Starting at line 25 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTMethodDeclarator.java
Starting at line 20 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTMethodReference.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTMultiplicativeExpression.java
Starting at line 33 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTName.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTNameList.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTNormalAnnotation.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTNullLiteral.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTPackageDeclaration.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTPostfixExpression.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTPreDecrementExpression.java
Starting at line 20 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTPreIncrementExpression.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTPrimaryExpression.java
Starting at line 39 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTPrimaryPrefix.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTRSIGNEDSHIFT.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTRUNSIGNEDSHIFT.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTRelationalExpression.java
Starting at line 19 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTResource.java
Starting at line 19 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTResourceSpecification.java
Starting at line 19 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTResources.java
Starting at line 28 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTResultType.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTReturnStatement.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTShiftExpression.java
Starting at line 20 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTSingleMemberAnnotation.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTStatement.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTStatementExpression.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTStatementExpressionList.java
Starting at line 31 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTSwitchLabel.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTSwitchStatement.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTSynchronizedStatement.java
Starting at line 22 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTThrowStatement.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTType.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTTypeArgument.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTTypeArguments.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTTypeBound.java
Starting at line 35 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTTypeDeclaration.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTTypeParameter.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTTypeParameters.java
Starting at line 20 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTUnaryExpression.java
Starting at line 20 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTUnaryExpressionNotPlusMinus.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTVariableDeclarator.java
Starting at line 29 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTVariableDeclaratorId.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTVariableInitializer.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTWhileStatement.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTWildcardBounds.java

    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }
=====================================================================
Found a 3 line (21 tokens) duplication in the following files: 
Starting at line 67 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTAnnotation.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTBlock.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTBlockStatement.java
Starting at line 40 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTClassOrInterfaceBodyDeclaration.java
Starting at line 25 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTClassOrInterfaceDeclaration.java
Starting at line 29 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTConstructorDeclaration.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTExplicitConstructorInvocation.java
Starting at line 31 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTFormalParameter.java
Starting at line 61 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTImportDeclaration.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTInitializer.java
Starting at line 54 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTPrimarySuffix.java
Starting at line 25 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTPrimitiveType.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTReferenceType.java
Starting at line 22 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTTryStatement.java
Starting at line 45 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\AbstractJavaNode.java

    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
	return visitor.visit(this, data);
    }
=====================================================================
Found a 5 line (21 tokens) duplication in the following files: 
Starting at line 12 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 20 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 24 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 28 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 32 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 36 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 40 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 44 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 48 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 52 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 56 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 60 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 64 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 68 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 72 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 76 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 80 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 84 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 88 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 92 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 96 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 100 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 104 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 108 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 112 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 116 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 119 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 123 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 127 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 131 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 135 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 139 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 143 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 147 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 151 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 155 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 159 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 163 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 167 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 171 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 175 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 179 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 183 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 187 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 191 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 195 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 199 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 203 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 207 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 211 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 215 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 219 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 223 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 227 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 231 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 235 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 239 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 243 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 247 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 251 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 255 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 259 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 263 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 267 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 271 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 275 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 279 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 283 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 287 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 291 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 295 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 299 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 303 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 307 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 311 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 315 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 319 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 323 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 327 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 331 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 335 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 339 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 343 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 347 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 351 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 355 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 359 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 363 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 367 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 371 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 375 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 379 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 383 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 387 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 391 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 395 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 399 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 403 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 407 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 411 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 415 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 419 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 423 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 427 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 431 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 434 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 438 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 442 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 446 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 450 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 454 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\JavaParserVisitorAdapter.java
Starting at line 73 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 77 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 81 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 85 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 89 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 93 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 97 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 101 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 105 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 109 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 113 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 117 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 121 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 125 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 129 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 133 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 137 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 141 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 145 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 149 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 153 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 157 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 161 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 165 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 169 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 173 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 177 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 181 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 185 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 189 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 193 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 197 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 201 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 205 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 209 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 213 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 217 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 221 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 225 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 229 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 233 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 237 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 241 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 245 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 249 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 253 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 257 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 261 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 265 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 269 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 273 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 277 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 281 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 285 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 289 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 293 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 297 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 301 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 305 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 309 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 313 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 317 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 321 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 325 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 329 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 333 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 337 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 341 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 345 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 349 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 353 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 357 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 361 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 365 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 369 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 373 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 377 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 381 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 385 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 389 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 393 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 397 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 401 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 405 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 409 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 413 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 417 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 421 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 425 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 429 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 433 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 437 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 441 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 445 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 449 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 453 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 457 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 461 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 465 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 469 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 473 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 477 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 481 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 485 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 489 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 493 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 497 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 501 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 505 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 509 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 513 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java
Starting at line 517 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractJavaRule.java

    public Object visit(ASTExtendsList node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTClassOrInterfaceDeclaration node, Object data) {
=====================================================================
Found a 5 line (21 tokens) duplication in the following files: 
Starting at line 28 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\DataFlowFacade.java
Starting at line 34 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\DataFlowFacade.java

    public Object visit(ASTMethodDeclaration node, Object data) {
        sbf.buildDataFlowFor(node);
        vav.compute(node);
        return data;
    }
=====================================================================
Found a 6 line (21 tokens) duplication in the following files: 
Starting at line 29 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\JavaDFAGraphRule.java
Starting at line 34 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\DFAPLSQLGraphRule.java
Starting at line 40 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\DFAPLSQLGraphRule.java
Starting at line 46 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\DFAPLSQLGraphRule.java
Starting at line 53 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\DFAPLSQLGraphRule.java

	methods.add(node);
	return super.visit(node, data);
    }

    @Override
    public Object visit(ASTCompilationUnit acu, Object data) {
=====================================================================
Found a 2 line (21 tokens) duplication in the following files: 
Starting at line 86 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 96 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 193 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 202 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java

        LOGGER.finest("createNewNode ASTStatementExpression: line " + node.getBeginLine() +", column " + node.getBeginColumn());
        dataFlow.createNewNode(node);
=====================================================================
Found a 5 line (21 tokens) duplication in the following files: 
Starting at line 169 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 292 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java

            return data;
        }
        Structure dataFlow = (Structure) data;

        if (node.jjtGetParent() instanceof ASTForStatement) {
=====================================================================
Found a 3 line (21 tokens) duplication in the following files: 
Starting at line 195 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 310 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 302 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 344 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 356 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java

                LOGGER.finest("pushOnStack IF_LAST_STATEMENT: line " + node.getBeginLine() +", column " + node.getBeginColumn());
            }
        } else if (node.jjtGetParent() instanceof ASTWhileStatement) {
=====================================================================
Found a 7 line (21 tokens) duplication in the following files: 
Starting at line 51 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\basic\BigIntegerInstantiationRule.java
Starting at line 65 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\strings\UselessStringValueOfRule.java

                    addViolation(data, node);
                    return data;
                }
            }
        }
        return super.visit(node, data);
    }
=====================================================================
Found a 6 line (21 tokens) duplication in the following files: 
Starting at line 78 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\basic\DoubleCheckedLockingRule.java
Starting at line 23 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\controversial\OnlyOneReturnRule.java

        return super.visit(fieldDeclaration, data);
    }

    @Override
    public Object visit(ASTMethodDeclaration node, Object data) {
        if (node.getResultType().isVoid()) {
=====================================================================
Found a 9 line (21 tokens) duplication in the following files: 
Starting at line 38 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\AbstractNcssCountRule.java
Starting at line 37 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\AbstractNcssCountRule.java

    private Class<?> nodeClass;

    /**
     * Count the nodes of the given type using NCSS rules.
     * 
     * @param nodeClass class of node to count
     */
    protected AbstractNcssCountRule(Class<?> nodeClass) {
        this.nodeClass = nodeClass;
=====================================================================
Found a 4 line (21 tokens) duplication in the following files: 
Starting at line 44 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\NPathComplexityRule.java
Starting at line 57 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\NPathComplexityRule.java
Starting at line 53 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NPathComplexityRule.java
Starting at line 68 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NPathComplexityRule.java

        JavaNode n;

        for (int i = 0; i < node.jjtGetNumChildren(); i++) {
            n = (JavaNode) node.jjtGetChild(i);
=====================================================================
Found a 3 line (21 tokens) duplication in the following files: 
Starting at line 47 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\NPathComplexityRule.java
Starting at line 56 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NPathComplexityRule.java

            n = (JavaNode) node.jjtGetChild(i);
            npath *= (Integer) n.jjtAccept(this, data);
        }
=====================================================================
Found a 3 line (21 tokens) duplication in the following files: 
Starting at line 60 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\NPathComplexityRule.java
Starting at line 71 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NPathComplexityRule.java

            n = (JavaNode) node.jjtGetChild(i);
            npath += (Integer) n.jjtAccept(this, data);
        }
=====================================================================
Found a 2 line (21 tokens) duplication in the following files: 
Starting at line 183 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\NPathComplexityRule.java
Starting at line 351 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NPathComplexityRule.java

        int caseRange = 0;
        for (int i = 0; i < node.jjtGetNumChildren(); i++) {
=====================================================================
Found a 5 line (21 tokens) duplication in the following files: 
Starting at line 258 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\NPathComplexityRule.java
Starting at line 27 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NcssMethodCountRule.java

    }

    @Override
    public Object[] getViolationParameters(DataPoint point) {
        return new String[] { ((ASTMethodDeclaration) point.getNode()).getMethodName(),
=====================================================================
Found a 5 line (21 tokens) duplication in the following files: 
Starting at line 27 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\NcssMethodCountRule.java
Starting at line 428 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NPathComplexityRule.java

    }

    @Override
    public Object[] getViolationParameters(DataPoint point) {
        return new String[] { ((ASTMethodDeclaration) point.getNode()).getMethodName(),
=====================================================================
Found a 6 line (21 tokens) duplication in the following files: 
Starting at line 19 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\TooManyFieldsRule.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\TooManyFieldsRule.java

public class TooManyFieldsRule extends AbstractJavaRule {

    private static final int DEFAULT_MAXFIELDS = 15;

    private Map<String, Integer> stats;
    private Map<String, ASTClassOrInterfaceDeclaration> nodes;
=====================================================================
Found a 7 line (21 tokens) duplication in the following files: 
Starting at line 54 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\controversial\AssignmentInOperandRule.java
Starting at line 30 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\naming\AvoidDollarSignsRule.java

		(node.hasDecendantOfAnyType(ASTPreIncrementExpression.class, ASTPreDecrementExpression.class, ASTPostfixExpression.class))))) {

	    addViolation(data, node);
	    return data;
	}
	return super.visit(node, data);
    }
=====================================================================
Found a 2 line (21 tokens) duplication in the following files: 
Starting at line 121 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\controversial\DataflowAnomalyAnalysisRule.java
Starting at line 123 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\controversial\DataflowAnomalyAnalysisRule.java

            addDaaViolation(rc, lastNode, "DD", va.getVariableName(), startLine, endLine);
        } else if (u.accessType == VariableAccess.UNDEFINITION && va.isReference()) { // UR
=====================================================================
Found a 4 line (21 tokens) duplication in the following files: 
Starting at line 34 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\AssignmentToNonFinalStaticRule.java
Starting at line 34 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\AvoidReassigningParametersRule.java
Starting at line 91 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\javabeans\BeanMembersShouldSerializeRule.java
Starting at line 40 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\unusedcode\UnusedPrivateFieldRule.java

            if (initializedInConstructor(entry.getValue())) {
                addViolation(data, decl.getNode(), decl.getImage());
            }
        }
=====================================================================
Found a 2 line (21 tokens) duplication in the following files: 
Starting at line 17 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\CompareObjectsWithEqualsRule.java
Starting at line 28 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\CompareObjectsWithEqualsRule.java

    private boolean hasName(Node n) {
        return n.jjtGetNumChildren() > 0 && n.jjtGetChild(0) instanceof ASTName;
=====================================================================
Found a 6 line (21 tokens) duplication in the following files: 
Starting at line 84 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\ConfusingTernaryRule.java
Starting at line 20 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\rule\basic\NoInlineJavaScriptRule.java

            if (isMatch(inode)) {
                addViolation(data, node);
            }
        }
        return super.visit(node, data);
    }
=====================================================================
Found a 4 line (21 tokens) duplication in the following files: 
Starting at line 368 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\ConstructorCallsOverridableMethodRule.java
Starting at line 374 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\ConstructorCallsOverridableMethodRule.java

            for (String name: getQualifierNames()) {
                System.out.println("    " + name);
            }
            System.out.println("  </Qualifiers>");
=====================================================================
Found a 9 line (21 tokens) duplication in the following files: 
Starting at line 129 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\GenericClassCounterRule.java
Starting at line 242 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\ClassTypeResolver.java

    			 simpleClassname.add(node.getImportedName());
    		 }
    		 // FIXME: use type resolution framework to deal with star import ?
    	 }
         return super.visit(node, data);
     }

	@Override
	public Object visit(ASTClassOrInterfaceType classType,Object data) {
=====================================================================
Found a 1 line (21 tokens) duplication in the following files: 
Starting at line 57 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\SimplifyBooleanReturnsRule.java
Starting at line 58 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\SimplifyBooleanReturnsRule.java
Starting at line 180 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\SimplifyBooleanReturnsRule.java

            node.jjtGetChild(0).jjtGetChild(0).jjtGetChild(0).jjtGetChild(0) instanceof ASTLiteral &&
=====================================================================
Found a 1 line (21 tokens) duplication in the following files: 
Starting at line 46 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\strictexception\SignatureDeclareThrowsExceptionRule.java
Starting at line 120 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\rules\SignatureDeclareThrowsException.java

        if ((methodDeclaration.getMethodName().equals("setUp") || methodDeclaration.getMethodName().equals("tearDown")) && junitImported) {
=====================================================================
Found a 7 line (21 tokens) duplication in the following files: 
Starting at line 57 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\strings\ConsecutiveAppendsShouldReuseRule.java
Starting at line 52 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\unnecessary\UnnecessaryConversionTemporaryRule.java

                if (nextVariable != null && nextVariable.equals(variable)) {
                    addViolation(data, node);
                }
            }
        }
        return super.visit(node, data);
    }
=====================================================================
Found a 4 line (21 tokens) duplication in the following files: 
Starting at line 101 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\strings\ConsecutiveLiteralAppendsRule.java
Starting at line 67 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\strings\InsufficientStringBufferDeclarationRule.java

				currentBlock = getFirstParentBlock(n);

				if (!InefficientStringBufferingRule.isInStringBufferOperation(n, 3, "append")) {
					if (!jno.isPartOfQualifiedName()) {
=====================================================================
Found a 5 line (21 tokens) duplication in the following files: 
Starting at line 37 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\unusedcode\UnusedModifierRule.java
Starting at line 44 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\unusedcode\UnusedModifierRule.java

        if (node.isSyntacticallyPublic() || node.isSyntacticallyAbstract()) {
            check(node, data);
        }
        return super.visit(node, data);
    }
=====================================================================
Found a 7 line (21 tokens) duplication in the following files: 
Starting at line 23 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\JavaNameOccurrence.java
Starting at line 17 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\PLSQLNameOccurrence.java

    private NameOccurrence qualifiedName;

    private boolean isMethodOrConstructorInvocation;
    private int argumentCount;

    private final static String THIS = "this";
    private final static String SUPER = "super";
=====================================================================
Found a 12 line (21 tokens) duplication in the following files: 
Starting at line 53 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\ScopeAndDeclarationFinder.java
Starting at line 49 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\ScopeAndDeclarationFinder.java

    private Stack<Scope> scopes = new Stack<Scope>();

    /**
     * Sets the scope of a node and adjusts the scope stack accordingly.
     * The scope on top of the stack is set as the parent of the given scope,
     * which is then also stored on the scope stack.
     *
     * @param newScope the scope for the node.
     * @param node     the AST node for which the scope is to be set.
     * @throws java.util.EmptyStackException if the scope stack is empty.
     */
    private void addScope(Scope newScope, JavaNode node) {
=====================================================================
Found a 3 line (21 tokens) duplication in the following files: 
Starting at line 239 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\ScopeAndDeclarationFinder.java
Starting at line 278 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\ScopeAndDeclarationFinder.java
Starting at line 316 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\ScopeAndDeclarationFinder.java

    public Object visit(ASTMethodDeclaration node, Object data) {
	createMethodScope(node);
	ASTMethodDeclarator md = node.getFirstChildOfType(ASTMethodDeclarator.class);
=====================================================================
Found a 1 line (21 tokens) duplication in the following files: 
Starting at line 242 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\ScopeAndDeclarationFinder.java
Starting at line 284 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\ScopeAndDeclarationFinder.java
Starting at line 322 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\ScopeAndDeclarationFinder.java

	node.getScope().getEnclosingScope(ClassScope.class).addDeclaration(new MethodNameDeclaration(md));
=====================================================================
Found a 3 line (21 tokens) duplication in the following files: 
Starting at line 57 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\TypeSet.java
Starting at line 116 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\TypeSet.java
Starting at line 57 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\TypeSet.java
Starting at line 116 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\TypeSet.java

    public static class ImplicitImportResolver implements Resolver {
	public Class<?> resolve(String name) throws ClassNotFoundException {
	    return Class.forName("java.lang." + name);
=====================================================================
Found a 5 line (21 tokens) duplication in the following files: 
Starting at line 181 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\ClassTypeResolver.java
Starting at line 249 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\ClassTypeResolver.java
Starting at line 256 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\ClassTypeResolver.java
Starting at line 278 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\ClassTypeResolver.java
Starting at line 285 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\ClassTypeResolver.java
Starting at line 298 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\ClassTypeResolver.java
Starting at line 396 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\ClassTypeResolver.java
Starting at line 403 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\ClassTypeResolver.java
Starting at line 421 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\ClassTypeResolver.java
Starting at line 428 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\ClassTypeResolver.java
Starting at line 549 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\ClassTypeResolver.java
Starting at line 556 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\ClassTypeResolver.java
Starting at line 563 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\ClassTypeResolver.java
Starting at line 570 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\ClassTypeResolver.java

	public Object visit(ASTTypeDeclaration node, Object data) {
		super.visit(node, data);
		rollupTypeUnary(node);
		return data;
	}
=====================================================================
Found a 3 line (21 tokens) duplication in the following files: 
Starting at line 435 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\ClassTypeResolver.java
Starting at line 476 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\ClassTypeResolver.java
Starting at line 519 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\ClassTypeResolver.java

	public Object visit(ASTPrimaryExpression node, Object data) {
		super.visit(node, data);
		if (node.jjtGetNumChildren() == 1) {
=====================================================================
Found a 4 line (21 tokens) duplication in the following files: 
Starting at line 37 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTAttribute.java
Starting at line 48 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTAttribute.java
Starting at line 38 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTElement.java
Starting at line 49 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTElement.java

    public String getNamespacePrefix() {
        int colonIndex = name.indexOf(':');
        return colonIndex >= 0
                ? name.substring(0, colonIndex)
=====================================================================
Found a 3 line (21 tokens) duplication in the following files: 
Starting at line 19 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\ASTHtmlScript.java
Starting at line 42 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\AbstractJspNode.java

    public Object jjtAccept(JspParserVisitor visitor, Object data) {
	return visitor.visit(this, data);
    }
=====================================================================
Found a 5 line (21 tokens) duplication in the following files: 
Starting at line 13 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\JspParserVisitorAdapter.java
Starting at line 17 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\JspParserVisitorAdapter.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\JspParserVisitorAdapter.java
Starting at line 25 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\JspParserVisitorAdapter.java
Starting at line 29 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\JspParserVisitorAdapter.java
Starting at line 33 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\JspParserVisitorAdapter.java
Starting at line 37 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\JspParserVisitorAdapter.java
Starting at line 41 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\JspParserVisitorAdapter.java
Starting at line 45 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\JspParserVisitorAdapter.java
Starting at line 49 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\JspParserVisitorAdapter.java
Starting at line 53 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\JspParserVisitorAdapter.java
Starting at line 57 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\JspParserVisitorAdapter.java
Starting at line 61 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\JspParserVisitorAdapter.java
Starting at line 65 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\JspParserVisitorAdapter.java
Starting at line 69 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\JspParserVisitorAdapter.java
Starting at line 73 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\JspParserVisitorAdapter.java
Starting at line 77 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\JspParserVisitorAdapter.java
Starting at line 81 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\JspParserVisitorAdapter.java
Starting at line 85 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\JspParserVisitorAdapter.java
Starting at line 89 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\JspParserVisitorAdapter.java
Starting at line 93 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\JspParserVisitorAdapter.java
Starting at line 71 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\rule\AbstractJspRule.java
Starting at line 75 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\rule\AbstractJspRule.java
Starting at line 79 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\rule\AbstractJspRule.java
Starting at line 83 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\rule\AbstractJspRule.java
Starting at line 87 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\rule\AbstractJspRule.java
Starting at line 91 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\rule\AbstractJspRule.java
Starting at line 95 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\rule\AbstractJspRule.java
Starting at line 99 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\rule\AbstractJspRule.java
Starting at line 103 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\rule\AbstractJspRule.java
Starting at line 107 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\rule\AbstractJspRule.java
Starting at line 111 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\rule\AbstractJspRule.java
Starting at line 115 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\rule\AbstractJspRule.java
Starting at line 119 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\rule\AbstractJspRule.java
Starting at line 123 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\rule\AbstractJspRule.java
Starting at line 127 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\rule\AbstractJspRule.java
Starting at line 131 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\rule\AbstractJspRule.java
Starting at line 135 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\rule\AbstractJspRule.java
Starting at line 139 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\rule\AbstractJspRule.java
Starting at line 143 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\rule\AbstractJspRule.java
Starting at line 147 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\rule\AbstractJspRule.java
Starting at line 151 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\rule\AbstractJspRule.java

    public Object visit(ASTCompilationUnit node, Object data) {
        return visit((JspNode) node, data);
    }

    public Object visit(ASTContent node, Object data) {
=====================================================================
Found a 3 line (21 tokens) duplication in the following files: 
Starting at line 20 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTArguments.java
Starting at line 20 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTDatatype.java
Starting at line 20 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTFormalParameter.java
Starting at line 30 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTIfStatement.java
Starting at line 22 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTInput.java
Starting at line 20 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTMethodDeclarator.java
Starting at line 22 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTName.java
Starting at line 20 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTPrimaryPrefix.java
Starting at line 20 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTPrimarySuffix.java
Starting at line 22 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTTriggerTimingPointSection.java
Starting at line 22 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTTriggerUnit.java
Starting at line 22 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTTypeMethod.java
Starting at line 26 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTVariableOrConstantDeclaratorId.java
Starting at line 47 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\AbstractPLSQLNode.java

  public Object jjtAccept(PLSQLParserVisitor visitor, Object data) {
    return visitor.visit(this, data);
  }
=====================================================================
Found a 7 line (21 tokens) duplication in the following files: 
Starting at line 89 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractPLSQLRule.java
Starting at line 6 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\VmParserVisitorAdapter.java
Starting at line 82 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\rule\AbstractVmRule.java

	public Object visit(PLSQLNode node, Object data) {
		node.childrenAccept(this, data);
		return null;
	}

	@Override
	public Object visit(ASTInput node, Object data) {
=====================================================================
Found a 2 line (21 tokens) duplication in the following files: 
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\properties\DoubleMultiProperty.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\properties\DoubleProperty.java
Starting at line 20 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\properties\FloatMultiProperty.java
Starting at line 20 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\properties\FloatProperty.java
Starting at line 20 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\properties\IntegerMultiProperty.java
Starting at line 20 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\properties\IntegerProperty.java
Starting at line 20 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\properties\LongMultiProperty.java
Starting at line 20 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\properties\LongProperty.java

		public DoubleMultiProperty createWith(Map<String, String> valuesById) {
			final String[] minMax = minMaxFrom(valuesById);
=====================================================================
Found a 5 line (21 tokens) duplication in the following files: 
Starting at line 28 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\properties\EnumeratedMultiProperty.java
Starting at line 27 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\properties\EnumeratedProperty.java

			return new EnumeratedMultiProperty(
					nameIn(valuesById),
					descriptionIn(valuesById),
					labelsIn(valuesById),
					choicesIn(valuesById),
=====================================================================
Found a 4 line (21 tokens) duplication in the following files: 
Starting at line 26 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\rule\AbstractStatisticalVmRule.java
Starting at line 67 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\rule\AbstractVmRule.java

    }

    @Override
    public void apply(final List<? extends Node> nodes, final RuleContext ctx) {
=====================================================================
Found a 9 line (21 tokens) duplication in the following files: 
Starting at line 48 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\rule\basic\CollapsibleIfStatementsRule.java
Starting at line 56 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\rule\basic\CollapsibleIfStatementsRule.java

                else if (blockChild instanceof ASTIfStatement) {
                    // check if it has an ELSE of ELSEIF
                    violationFound = !hasElseOrElseIf(blockChild);
                    if (!violationFound) {
                        break;
                    }
                    ifCounter++;
                }
                else if (blockChild instanceof ASTElseIfStatement) {
=====================================================================
Found a 12 line (21 tokens) duplication in the following files: 
Starting at line 380 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\util\VelocityCharStream.java
Starting at line 424 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\util\VelocityCharStream.java

    public void ReInit(java.io.Reader dstream, int startline,
            int startcolumn)
    {
        ReInit(dstream, startline, startcolumn, 4096);
    }
    /**
     * @param dstream
     * @param startline
     * @param startcolumn
     * @param buffersize
     */
    public VelocityCharStream(java.io.InputStream dstream, int startline,
=====================================================================
Found a 5 line (21 tokens) duplication in the following files: 
Starting at line 90 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\xml\rule\AbstractDomXmlRule.java
Starting at line 94 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\xml\rule\AbstractDomXmlRule.java
Starting at line 98 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\xml\rule\AbstractDomXmlRule.java
Starting at line 102 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\xml\rule\AbstractDomXmlRule.java
Starting at line 106 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\xml\rule\AbstractDomXmlRule.java
Starting at line 110 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\xml\rule\AbstractDomXmlRule.java
Starting at line 114 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\xml\rule\AbstractDomXmlRule.java
Starting at line 118 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\xml\rule\AbstractDomXmlRule.java
Starting at line 122 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\xml\rule\AbstractDomXmlRule.java

    protected void visit(XmlNode node, CharacterData characterData, RuleContext ctx) {
	super.visit(node, ctx);
    }

    protected void visit(XmlNode node, Comment comment, RuleContext ctx) {
=====================================================================
Found a 4 line (21 tokens) duplication in the following files: 
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\xpath\PMDFunctions.java
Starting at line 20 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\xpath\PMDFunctions.java
Starting at line 25 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\xpath\PMDFunctions.java

	return MatchesFunction.matches(s, pattern1, pattern2, pattern3);
    }

    public static boolean matches(String s, String pattern1, String pattern2, String pattern3, String pattern4) {
=====================================================================
Found a 2 line (21 tokens) duplication in the following files: 
Starting at line 184 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\HTMLRenderer.java
Starting at line 185 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\HTMLRenderer.java

			buf.append("<td align=\"left\">" + sv.getRuleViolation().getFilename() + "</td>" + PMD.EOL);
			buf.append("<td align=\"center\">" + sv.getRuleViolation().getBeginLine() + "</td>" + PMD.EOL);
=====================================================================
Found a 10 line (21 tokens) duplication in the following files: 
Starting at line 24 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\SummaryHTMLRenderer.java
Starting at line 25 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\YAHTMLRenderer.java

	definePropertyDescriptor(HTMLRenderer.LINE_PREFIX);
    }

    public String defaultFileExtension() { return "html"; }
    
    /**
     * {@inheritDoc}
     */
    @Override
    public void end() throws IOException {
=====================================================================
Found a 2 line (21 tokens) duplication in the following files: 
Starting at line 59 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\SummaryHTMLRenderer.java
Starting at line 137 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\TextColorRenderer.java

		Map<String, Integer> summary = report.getSummary();
		for (Map.Entry<String, Integer> entry : summary.entrySet()) {
=====================================================================
Found a 3 line (21 tokens) duplication in the following files: 
Starting at line 141 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\TextColorRenderer.java
Starting at line 55 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\TextPadRenderer.java
Starting at line 48 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\TextRenderer.java
Starting at line 65 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\TextRenderer.java
Starting at line 75 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\TextRenderer.java

	    buf.append(key).append(" : ").append(entry.getValue()).append(PMD.EOL);
	    writer.write(buf.toString());
	}
=====================================================================
Found a 5 line (21 tokens) duplication in the following files: 
Starting at line 147 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\XSLTRenderer.java
Starting at line 981 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\designer\Designer.java

	} catch (ParserConfigurationException e) {
	    e.printStackTrace();
	} catch (SAXException e) {
	    e.printStackTrace();
	} catch (IOException e) {
=====================================================================
Found a 5 line (21 tokens) duplication in the following files: 
Starting at line 149 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\XSLTRenderer.java
Starting at line 979 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\designer\Designer.java
Starting at line 1018 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\designer\Designer.java

	} catch (SAXException e) {
	    e.printStackTrace();
	} catch (IOException e) {
	    e.printStackTrace();
	}
=====================================================================
Found a 4 line (21 tokens) duplication in the following files: 
Starting at line 177 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\database\DBType.java
Starting at line 184 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\database\DBType.java

                    resourceBundle = ResourceBundle.getBundle(matchString);
                    propertiesSource = "[" + INTERNAL_SETTINGS + "]" + File.separator 
                                        + matchString + ".properties";
                    LOGGER.finest("InJarWithoutPath");
=====================================================================
Found a 15 line (21 tokens) duplication in the following files: 
Starting at line 95 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\filter\Filters.java
Starting at line 129 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\filter\Filters.java

				return filter.filter(obj.toString());
			}

			public String toString() {
				return filter.toString();
			}
		};
	}

	/**
	 * Given a File Filter, expose as a FilenameFilter.
	 * @param filter The File Filter.
	 * @return A FilenameFilter.
	 */
	public static FilenameFilter toFilenameFilter(final Filter<File> filter) {
=====================================================================
Found a 6 line (21 tokens) duplication in the following files: 
Starting at line 48 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\viewer\gui\ASTPanel.java
Starting at line 39 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\viewer\gui\EvaluationResultsPanel.java
Starting at line 40 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\viewer\gui\SourceCodePanel.java
Starting at line 37 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\viewer\gui\XPathPanel.java

        this.model = model;
        init();
    }

    private void init() {
        model.addViewerModelListener(this);
=====================================================================
Found a 7 line (20 tokens) duplication in the following files: 
Starting at line 371 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\PMD.java
Starting at line 435 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\PMD.java

						Function<? super T, ? extends U> arg0,
						Comparator<? super U> arg1) {
					// TODO Auto-generated method stub
					return null;
				}

				public  <T> Comparator<T> comparingDouble(
=====================================================================
Found a 6 line (20 tokens) duplication in the following files: 
Starting at line 93 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\RuleSet.java
Starting at line 116 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\RuleSet.java

	public boolean addRuleReplaceIfExists(Rule rule) {
        if (rule == null) {
            throw new IllegalArgumentException("Missing rule");
        }

        boolean replaced = false;
=====================================================================
Found a 3 line (20 tokens) duplication in the following files: 
Starting at line 195 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\RuleSetFactory.java
Starting at line 956 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\designer\Designer.java

		try {
			DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
			Document document = builder.parse(inputStream);
=====================================================================
Found a 4 line (20 tokens) duplication in the following files: 
Starting at line 74 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\RuleSetWriter.java
Starting at line 59 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\XMLRenderer.java
Starting at line 1008 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\designer\Designer.java

		    Transformer transformer = transformerFactory.newTransformer();
		    transformer.setOutputProperty(OutputKeys.METHOD, "xml");
		    // This is as close to pretty printing as we'll get using standard Java APIs.
		    transformer.setOutputProperty(OutputKeys.INDENT, "yes");
=====================================================================
Found a 3 line (20 tokens) duplication in the following files: 
Starting at line 104 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\SourceCodeProcessor.java
Starting at line 131 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\SourceCodeProcessor.java

		languageVersionHandler.getSymbolFacade().start(rootNode);
		long end = System.nanoTime();
		Benchmarker.mark(Benchmark.SymbolTable, end - start, 0);
=====================================================================
Found a 3 line (20 tokens) duplication in the following files: 
Starting at line 24 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\CPPTokenizer.java
Starting at line 18 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\JSPTokenizer.java

			TokenManager tokenManager = languageVersionHandler.getParser(
					languageVersionHandler.getDefaultParserOptions())
					.getTokenManager(sourceCode.getFileName(), reader);
=====================================================================
Found a 3 line (20 tokens) duplication in the following files: 
Starting at line 60 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\CsTokenizer.java
Starting at line 83 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\CsTokenizer.java

						if(ic == '=')
						{
							tokenEntries.add(new TokenEntry(String.valueOf(c)+String.valueOf(c)+"=", sourceCode.getFileName(), line));
=====================================================================
Found a 2 line (20 tokens) duplication in the following files: 
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\Match.java
Starting at line 27 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\Match.java
Starting at line 33 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\Match.java
Starting at line 45 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\cpd\Match.java

    public static final Comparator<Match> MATCHES_COMPARATOR = new Comparator<Match>() {
    	public int compare(Match ma, Match mb) {
=====================================================================
Found a 4 line (20 tokens) duplication in the following files: 
Starting at line 144 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\dcd\graph\UsageGraphBuilder.java
Starting at line 121 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\visitors\PMDASMVisitor.java

		}

		public void visitInnerClass(String name, String outerName, String innerName, int access) {
			if (TRACE) {
=====================================================================
Found a 5 line (20 tokens) duplication in the following files: 
Starting at line 175 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\dcd\graph\UsageGraphBuilder.java
Starting at line 250 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\dcd\graph\UsageGraphBuilder.java
Starting at line 357 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\dcd\graph\UsageGraphBuilder.java

				println("visitOuterClass:");
				printlnIndent("owner: " + owner);
				printlnIndent("name: " + name);
				printlnIndent("desc: " + desc);
			}
=====================================================================
Found a 5 line (20 tokens) duplication in the following files: 
Starting at line 243 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\dcd\graph\UsageGraphBuilder.java
Starting at line 314 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\visitors\PMDASMVisitor.java

				println("visitEnd:");
			}
		}

		public void visitFieldInsn(int opcode, String owner, String name, String desc) {
=====================================================================
Found a 3 line (20 tokens) duplication in the following files: 
Starting at line 384 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\dcd\graph\UsageGraphBuilder.java
Starting at line 372 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\visitors\PMDASMVisitor.java

		}

		public void visitTableSwitchInsn(int min, int max, Label dflt, Label[] labels) {
=====================================================================
Found a 3 line (20 tokens) duplication in the following files: 
Starting at line 243 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ast\AbstractNode.java
Starting at line 251 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\unnecessary\UselessOverridingMethodRule.java

	for (int i = 0; i < n; i++) {
	    Node child = node.jjtGetChild(i);
	    if (child.getClass() == targetType) {
=====================================================================
Found a 4 line (20 tokens) duplication in the following files: 
Starting at line 32 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\cpp\CppParser.java
Starting at line 52 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\AbstractJavaParser.java
Starting at line 34 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\JspParser.java
Starting at line 48 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\PLSQLParser.java

    }

    public Node parse(String fileName, Reader source) throws ParseException {
	AbstractTokenManager.setFileName(fileName);
=====================================================================
Found a 3 line (20 tokens) duplication in the following files: 
Starting at line 293 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dfa\Linker.java
Starting at line 308 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dfa\Linker.java

	if (isUpdate) {
	    if (fSt.getIndex() != fEnd.getIndex()) {
		end.reverseParentPathsTo(fUpdate);
=====================================================================
Found a 8 line (20 tokens) duplication in the following files: 
Starting at line 144 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\DesignPatternDetection.java
Starting at line 245 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\DesignPatternDetection.java
Starting at line 595 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\DesignPatternDetection.java

					.getParentsOfType(ASTClassOrInterfaceDeclaration.class)
					.get(0).getImage());
		}
//		
//		candidate.setClassName(method
//				.getParentsOfType(ASTClassOrInterfaceDeclaration.class).get(0)
//				.getImage());
		candidate.setMethodName(candidate.getClassName());
=====================================================================
Found a 4 line (20 tokens) duplication in the following files: 
Starting at line 350 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\DesignPatternDetection.java
Starting at line 696 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\DesignPatternDetection.java

				candidate.setMethodInvocationName(baseName);
				int indexOfDot = baseName.lastIndexOf('.');
				if (indexOfDot == -1) {
					candidate.setMethodInvocationClassType(baseName);
=====================================================================
Found a 5 line (20 tokens) duplication in the following files: 
Starting at line 409 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\DesignPatternDetection.java
Starting at line 463 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\DesignPatternDetection.java

						&& prefixNode.getFirstChildOfType(
								ASTAllocationExpression.class)
								.getFirstChildOfType(
										ASTClassOrInterfaceType.class) != null) {
					candidate.setMethodInvocationClassType(prefixNode
=====================================================================
Found a 10 line (20 tokens) duplication in the following files: 
Starting at line 80 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\CandidateDAO.java
Starting at line 187 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\CandidateDAO.java

							+ "'," + candidate.getPackageNumber() + ");";
					stmt.executeUpdate(sql);
					stmt.close();
					connection.commit();
					// System.out
					// .println("Class Records created successfully in Case 1"
					// + candidate.getClassName());
				}
				// 2. Fall: Wenn Package bekannt und Class unbekannt anlegen
			} else if (candidate.getPackageNumber() != -2 && classResult == -1) {
=====================================================================
Found a 7 line (20 tokens) duplication in the following files: 
Starting at line 100 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\CandidateDAO.java
Starting at line 120 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\CandidateDAO.java

				connection.commit();
				// System.out.println("Class Records created successfully Case 2");
				// Fall 3; Package unbekannt und Class bekannt. Class anlegen
				// mit neuem Package und ID direk mit dem Packagenamen gesucht
				// wird auch nicht gefunden.
			} else if (candidate.getPackageNumber() == -2 && classResult != -1
					&& packageIDDirectFromPackageName == -2) {
=====================================================================
Found a 4 line (20 tokens) duplication in the following files: 
Starting at line 116 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\CandidateDAO.java
Starting at line 344 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\CandidateDAO.java
Starting at line 417 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\CandidateDAO.java

						+ candidate.getPackageNumber() + ");";
				stmt.executeUpdate(sql);
				stmt.close();
				connection.commit();
=====================================================================
Found a 5 line (20 tokens) duplication in the following files: 
Starting at line 627 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\CandidateDAO.java
Starting at line 645 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\CandidateDAO.java
Starting at line 755 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\CandidateDAO.java
Starting at line 837 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\CandidateDAO.java

			stmt.close();
		} catch (SQLException e) {

			log.error( "failed!", e );;
		}
=====================================================================
Found a 8 line (20 tokens) duplication in the following files: 
Starting at line 39 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\initialization\FirstTimeDBInit.java
Starting at line 148 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\database\initialization\FirstTimeDBInit.java
Starting at line 34 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\rules\builder\BuilderRule.java
Starting at line 122 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\rules\decorator\DecoratorRule.java
Starting at line 83 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\rules\state\StateRule.java

			initStatement.close();
		} catch (SQLException e) {

			e.printStackTrace();
		}
	}

	private void createSwitchNodeTable() {
=====================================================================
Found a 13 line (20 tokens) duplication in the following files: 
Starting at line 34 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\rules\builder\BuilderRule.java
Starting at line 48 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\dpc\rules\mediator\MediatorRule.java

			this.stmt.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	/**
	 * Zaehle die Anzahl der Methoden die als Konstruktor gekennzeichnet sind
	 * pro Klasse.
	 * 
	 * @throws SQLException
	 */
	private void countParameters() throws SQLException {
=====================================================================
Found a 4 line (20 tokens) duplication in the following files: 
Starting at line 26 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\Ecmascript3Handler.java
Starting at line 43 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\AbstractJavaHandler.java
Starting at line 28 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\JspHandler.java
Starting at line 26 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\VmHandler.java

    @Override
    public XPathHandler getXPathHandler() {
	return new AbstractASTXPathHandler() {
	    public void initialize() {
=====================================================================
Found a 8 line (20 tokens) duplication in the following files: 
Starting at line 36 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\AbstractEcmascriptNode.java
Starting at line 45 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\AbstractJavaNode.java
Starting at line 42 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\AbstractJspNode.java

    public Object jjtAccept(EcmascriptParserVisitor visitor, Object data) {
	return visitor.visit(this, data);
    }

    /**
     * Accept the visitor. *
     */
    public Object childrenAccept(EcmascriptParserVisitor visitor, Object data) {
=====================================================================
Found a 6 line (20 tokens) duplication in the following files: 
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\DumpFacade.java
Starting at line 12 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\DumpFacade.java
Starting at line 14 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\DumpFacade.java
Starting at line 12 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\DumpFacade.java
Starting at line 16 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\xml\ast\DumpFacade.java

public class DumpFacade {

	private PrintWriter writer;
	private boolean recurse;

	public void initializeWith(Writer writer, String prefix, boolean recurse, EcmascriptNode<?> node) {
=====================================================================
Found a 3 line (20 tokens) duplication in the following files: 
Starting at line 30 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\DumpFacade.java
Starting at line 29 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\DumpFacade.java
Starting at line 31 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\ast\DumpFacade.java
Starting at line 29 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\DumpFacade.java
Starting at line 32 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\xml\ast\DumpFacade.java

	public Object visit(EcmascriptNode<?> node, Object data) {
		dump(node, (String) data);
		if (recurse) {
=====================================================================
Found a 4 line (20 tokens) duplication in the following files: 
Starting at line 109 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\DumpFacade.java
Starting at line 145 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\ast\DumpFacade.java

			if (((ASTFunctionNode) node).isGetter()) {
				extras.add("getter");
			}
			if (((ASTFunctionNode) node).isSetter()) {
=====================================================================
Found a 6 line (20 tokens) duplication in the following files: 
Starting at line 33 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\ecmascript\rule\EcmascriptRuleChainVisitor.java
Starting at line 32 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\rule\JspRuleChainVisitor.java

	}
    }

    protected void visit(Rule rule, Node node, RuleContext ctx) {
	// Rule better either be a EcmascriptParserVisitor, or a XPathRule
	if (rule instanceof XPathRule) {
=====================================================================
Found a 6 line (20 tokens) duplication in the following files: 
Starting at line 15 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTMethodDeclarator.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTMethodDeclarator.java

        super(p, id);
    }

    public int getParameterCount() {
        return this.jjtGetChild(0).jjtGetNumChildren();
    }
=====================================================================
Found a 6 line (20 tokens) duplication in the following files: 
Starting at line 29 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\ASTVariableDeclaratorId.java
Starting at line 26 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\ast\ASTVariableOrConstantDeclaratorId.java

    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }

    private int arrayDepth;
    private VariableNameDeclaration nameDeclaration;
=====================================================================
Found a 4 line (20 tokens) duplication in the following files: 
Starting at line 81 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\ast\CommentUtil.java
Starting at line 126 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\comments\AbstractCommentRule.java

		String[] lines = comment.split(CR);
		List<String> filteredLines = new ArrayList<String>(lines.length);

		for (String rawLine : lines) {
=====================================================================
Found a 2 line (20 tokens) duplication in the following files: 
Starting at line 111 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 115 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 119 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 123 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 176 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 199 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 202 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 305 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 200 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 205 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 209 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 213 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 225 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java

            LOGGER.finest("pushOnStack parent IF_EXPR: line " + node.getBeginLine() +", column " + node.getBeginColumn());
        } else if (node.jjtGetParent() instanceof ASTWhileStatement) {
=====================================================================
Found a 5 line (20 tokens) duplication in the following files: 
Starting at line 135 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 212 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 252 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java

            return data;
        }
        Structure dataFlow = (Structure) data;
        super.visit(node, data);
        dataFlow.pushOnStack(NodeType.FOR_INIT, dataFlow.getLast());
=====================================================================
Found a 3 line (20 tokens) duplication in the following files: 
Starting at line 187 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 452 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 470 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java

            if (!st.hasElse()) {
                dataFlow.pushOnStack(NodeType.IF_LAST_STATEMENT_WITHOUT_ELSE, dataFlow.getLast());
                LOGGER.finest("pushOnStack IF_LAST_STATEMENT_WITHOUT_ELSE: line " + node.getBeginLine() +", column " + node.getBeginColumn());
=====================================================================
Found a 3 line (20 tokens) duplication in the following files: 
Starting at line 190 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 483 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java

            } else if (st.hasElse() && !st.jjtGetChild(1).equals(node)) {
                dataFlow.pushOnStack(NodeType.ELSE_LAST_STATEMENT, dataFlow.getLast());
                LOGGER.finest("pushOnStack ELSE_LAST_STATEMENT: line " + node.getBeginLine() +", column " + node.getBeginColumn());
=====================================================================
Found a 3 line (20 tokens) duplication in the following files: 
Starting at line 200 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 353 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java

        } else if (node.jjtGetParent() instanceof ASTForStatement) {
            dataFlow.pushOnStack(NodeType.FOR_END, dataFlow.getLast());
            LOGGER.finest("pushOnStack FOR_END: line " + node.getBeginLine() +", column " + node.getBeginColumn());
=====================================================================
Found a 3 line (20 tokens) duplication in the following files: 
Starting at line 203 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\dfa\StatementAndBraceFinder.java
Starting at line 375 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java

        } else if (node.jjtGetParent() instanceof ASTLabeledStatement) {
            dataFlow.pushOnStack(NodeType.LABEL_LAST_STATEMENT, dataFlow.getLast());
            LOGGER.finest("pushOnStack LABEL_LAST_STATEMENT: line " + node.getBeginLine() +", column " + node.getBeginColumn());
=====================================================================
Found a 5 line (20 tokens) duplication in the following files: 
Starting at line 27 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\AbstractStatisticalJavaRule.java
Starting at line 27 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\AbstractStatisticalPLSQLRule.java
Starting at line 29 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\rule\AbstractStatisticalVmRule.java

    public void apply(List<? extends Node> nodes, RuleContext ctx) {
	super.apply(nodes, ctx);
	helper.apply(ctx);
    }
}
=====================================================================
Found a 6 line (20 tokens) duplication in the following files: 
Starting at line 67 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\basic\BooleanInstantiationRule.java
Starting at line 34 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\naming\SuspiciousHashcodeMethodNameRule.java

                super.addViolation(data, node);
                return data;
            }
    	}
        return super.visit(node, data);
    }
=====================================================================
Found a 2 line (20 tokens) duplication in the following files: 
Starting at line 53 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\basic\DoubleCheckedLockingRule.java
Starting at line 28 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\basic\OverrideBothEqualsAndHashcodeRule.java
Starting at line 187 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\CyclomaticComplexityRule.java
Starting at line 19 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\controversial\OnlyOneReturnRule.java
Starting at line 62 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\coupling\CouplingBetweenObjectsRule.java
Starting at line 156 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\AccessorClassGenerationRule.java
Starting at line 56 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\javabeans\BeanMembersShouldSerializeRule.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\junit\JUnitTestsShouldIncludeAssertRule.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\naming\AvoidFieldNameMatchingMethodNameRule.java
Starting at line 12 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\naming\AvoidFieldNameMatchingTypeNameRule.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\optimizations\AbstractOptimizationRule.java
Starting at line 36 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\sunsecure\ArrayIsStoredDirectlyRule.java
Starting at line 26 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\sunsecure\MethodReturnsInternalArrayRule.java
Starting at line 27 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\unusedcode\UnusedPrivateMethodRule.java

    public Object visit(ASTClassOrInterfaceDeclaration node, Object data) {
        if (node.isInterface()) {
=====================================================================
Found a 6 line (20 tokens) duplication in the following files: 
Starting at line 45 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\AbstractNcssCountRule.java
Starting at line 23 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\ExcessiveLengthRule.java
Starting at line 28 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\ExcessiveNodeCountRule.java
Starting at line 26 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\design\ExcessiveLengthRule.java
Starting at line 28 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\design\ExcessiveNodeCountRule.java

    protected AbstractNcssCountRule(Class<?> nodeClass) {
        this.nodeClass = nodeClass;
    }

    @Override
    public Object visit(JavaNode node, Object data) {
=====================================================================
Found a 6 line (20 tokens) duplication in the following files: 
Starting at line 91 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\AbstractNcssCountRule.java
Starting at line 96 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\AbstractNcssCountRule.java
Starting at line 113 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\AbstractNcssCountRule.java
Starting at line 123 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\AbstractNcssCountRule.java
Starting at line 133 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\AbstractNcssCountRule.java
Starting at line 138 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\AbstractNcssCountRule.java
Starting at line 143 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\AbstractNcssCountRule.java
Starting at line 148 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\AbstractNcssCountRule.java
Starting at line 169 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\AbstractNcssCountRule.java
Starting at line 44 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\NcssTypeCountRule.java
Starting at line 68 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\NcssTypeCountRule.java
Starting at line 73 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\NcssTypeCountRule.java
Starting at line 103 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\AbstractNcssCountRule.java
Starting at line 108 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\AbstractNcssCountRule.java
Starting at line 137 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\AbstractNcssCountRule.java
Starting at line 147 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\AbstractNcssCountRule.java
Starting at line 162 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\AbstractNcssCountRule.java
Starting at line 167 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\AbstractNcssCountRule.java
Starting at line 188 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\AbstractNcssCountRule.java

    public Object visit(ASTForStatement node, Object data) {
        return countNodeChildren(node, data);
    }

    @Override
    public Object visit(ASTDoStatement node, Object data) {
=====================================================================
Found a 5 line (20 tokens) duplication in the following files: 
Starting at line 69 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\NPathComplexityRule.java
Starting at line 82 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NPathComplexityRule.java
Starting at line 98 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NPathComplexityRule.java
Starting at line 114 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NPathComplexityRule.java
Starting at line 130 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NPathComplexityRule.java
Starting at line 146 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NPathComplexityRule.java
Starting at line 42 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\design\ExcessiveLengthRule.java

        int npath = complexityMultipleOf(node, 1, data);

        DataPoint point = new DataPoint();
        point.setNode(node);
        point.setScore(1.0 * npath);
=====================================================================
Found a 5 line (20 tokens) duplication in the following files: 
Starting at line 91 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\NPathComplexityRule.java
Starting at line 172 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NPathComplexityRule.java
Starting at line 223 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NPathComplexityRule.java

        int boolCompIf = sumExpressionComplexity(node.getFirstChildOfType(ASTExpression.class));

        int complexity = 0;

        List<JavaNode> statementChildren = new ArrayList<JavaNode>();
=====================================================================
Found a 6 line (20 tokens) duplication in the following files: 
Starting at line 26 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\NcssConstructorCountRule.java
Starting at line 49 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\NcssTypeCountRule.java

    public Object visit(ASTExplicitConstructorInvocation node, Object data) {
        return NumericConstants.ONE;
    }

    @Override
    public Object[] getViolationParameters(DataPoint point) {
=====================================================================
Found a 6 line (20 tokens) duplication in the following files: 
Starting at line 25 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\NcssMethodCountRule.java
Starting at line 464 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\ClassTypeResolver.java
Starting at line 25 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NcssMethodCountRule.java

    public Object visit(ASTMethodDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object[] getViolationParameters(DataPoint point) {
=====================================================================
Found a 6 line (20 tokens) duplication in the following files: 
Starting at line 74 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\codesize\NcssTypeCountRule.java
Starting at line 65 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\migrating\UnnecessaryCastRule.java

        return countNodeChildren(node, data);
    }

    @Override
    public Object visit(ASTFieldDeclaration node, Object data) {
        return NumericConstants.ONE;
=====================================================================
Found a 3 line (20 tokens) duplication in the following files: 
Starting at line 11 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\controversial\DontImportSunRule.java
Starting at line 24 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\imports\DontImportJavaLangRule.java

    public Object visit(ASTImportDeclaration node, Object data) {
        String img = node.jjtGetChild(0).getImage();
        if (img.startsWith("sun.") && !img.startsWith("sun.misc.Signal")) {
=====================================================================
Found a 3 line (20 tokens) duplication in the following files: 
Starting at line 70 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\coupling\CouplingBetweenObjectsRule.java
Starting at line 117 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\coupling\CouplingBetweenObjectsRule.java

    public Object visit(ASTResultType node, Object data) {
        for (int x = 0; x < node.jjtGetNumChildren(); x++) {
            Node tNode = node.jjtGetChild(x);
=====================================================================
Found a 9 line (20 tokens) duplication in the following files: 
Starting at line 80 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\coupling\CouplingBetweenObjectsRule.java
Starting at line 85 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\rules\CloneMethodMustImplementCloneable.java

                    }
                }
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTLocalVariableDeclaration node, Object data) {
=====================================================================
Found a 10 line (20 tokens) duplication in the following files: 
Starting at line 240 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\CloseResourceRule.java
Starting at line 252 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\CloseResourceRule.java
Starting at line 272 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\CloseResourceRule.java

                                        && closeTargets.contains(prefixName.getImage()))
                                {
                                    // Found a call to a "close target" that is a direct
                                    // method call without a "ClassName." prefix.
                                    closed = variableIsPassedToMethod(expr, variableToClose);
                                    if (closed) {
                                        break;
                                    }
                                }
                            } else if (suffix.getImage() != null) {
=====================================================================
Found a 4 line (20 tokens) duplication in the following files: 
Starting at line 279 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\ConstructorCallsOverridableMethodRule.java
Starting at line 342 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\ConstructorCallsOverridableMethodRule.java

                                }
                            }
                            OTHERNODES:{ //variables
                                for (int x = 1; x < i - 1; x++) {
=====================================================================
Found a 7 line (20 tokens) duplication in the following files: 
Starting at line 757 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\ConstructorCallsOverridableMethodRule.java
Starting at line 48 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\logging\MoreThanOneLoggerRule.java

        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTEnumDeclaration node, Object data) {
        // just skip Enums
        return data;
=====================================================================
Found a 3 line (20 tokens) duplication in the following files: 
Starting at line 61 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\NonThreadSafeSingletonRule.java
Starting at line 113 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\unnecessary\UselessOverridingMethodRule.java

	if (checkNonStaticMethods && !node.isStatic() || node.isSynchronized()) {
	    return super.visit(node, data);
	}
=====================================================================
Found a 3 line (20 tokens) duplication in the following files: 
Starting at line 45 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\design\PositionalIteratorRule.java
Starting at line 33 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\naming\AvoidFieldNameMatchingMethodNameRule.java

        for (int i = 0; i < node.jjtGetNumChildren(); i++) {
            Node child = node.jjtGetChild(i);
            if (child.jjtGetNumChildren() > 0) {
=====================================================================
Found a 5 line (20 tokens) duplication in the following files: 
Starting at line 18 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\junit\JUnitTestsShouldIncludeAssertRule.java
Starting at line 12 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\junit\TestClassWithoutTestCasesRule.java

public class JUnitTestsShouldIncludeAssertRule extends AbstractJUnitRule {

    @Override
    public Object visit(ASTClassOrInterfaceDeclaration node, Object data) {
        if (node.isInterface()) {
=====================================================================
Found a 6 line (20 tokens) duplication in the following files: 
Starting at line 47 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\logging\MoreThanOneLoggerRule.java
Starting at line 52 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\logging\MoreThanOneLoggerRule.java

    public Object visit(ASTClassOrInterfaceDeclaration node, Object data) {
	return init(node, data);
    }

    @Override
    public Object visit(ASTEnumDeclaration node, Object data) {
=====================================================================
Found a 2 line (20 tokens) duplication in the following files: 
Starting at line 138 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\naming\VariableNamingConventionsRule.java
Starting at line 149 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\naming\VariableNamingConventionsRule.java

    private Object checkVariableDeclarators(String[] prefixes, String[] suffixes, Node root, boolean isStatic,
	    boolean isFinal, Object data) {
=====================================================================
Found a 3 line (20 tokens) duplication in the following files: 
Starting at line 43 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\optimizations\UseStringBufferForStringAppendsRule.java
Starting at line 48 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\optimizations\UseStringBufferForStringAppendsRule.java

                    if (astName.equals(name)) {
                        ASTAssignmentOperator assignmentOperator = statement.getFirstDescendantOfType(ASTAssignmentOperator.class);
                        if (assignmentOperator != null && assignmentOperator.isCompound()) {
=====================================================================
Found a 3 line (20 tokens) duplication in the following files: 
Starting at line 22 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\strictexception\AvoidCatchingThrowableRule.java
Starting at line 35 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\strictexception\ExceptionAsFlowControlRule.java

        ASTType type = node.getFirstDescendantOfType(ASTType.class);
        ASTClassOrInterfaceType name = type.getFirstDescendantOfType(ASTClassOrInterfaceType.class);
        if (name.hasImageEqualTo("Throwable")) {
=====================================================================
Found a 2 line (20 tokens) duplication in the following files: 
Starting at line 68 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\strings\InefficientStringBufferingRule.java
Starting at line 131 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\rule\strings\InefficientStringBufferingRule.java

            if (name.getNameDeclaration() != null && name.getNameDeclaration() instanceof VariableNameDeclaration) {
                VariableNameDeclaration vnd = (VariableNameDeclaration)name.getNameDeclaration();
=====================================================================
Found a 2 line (20 tokens) duplication in the following files: 
Starting at line 75 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\ClassScope.java
Starting at line 21 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\LocalScope.java

        } else if (decl != null && !javaOccurrence.isThisOrSuper()) {
            List<NameOccurrence> nameOccurrences = getVariableDeclarations().get(decl);
=====================================================================
Found a 3 line (20 tokens) duplication in the following files: 
Starting at line 30 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\NameFinder.java
Starting at line 34 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\NameFinder.java

        }
        for (int i = 0; i < node.jjtGetNumChildren(); i++) {
            checkForNameChild((JavaNode)node.jjtGetChild(i));
=====================================================================
Found a 3 line (20 tokens) duplication in the following files: 
Starting at line 63 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\NameFinder.java
Starting at line 69 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\NameFinder.java

    private void add(JavaNameOccurrence name) {
        names.add(name);
        if (names.size() > 1) {
=====================================================================
Found a 9 line (20 tokens) duplication in the following files: 
Starting at line 33 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\symboltable\Search.java
Starting at line 35 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\symboltable\Search.java

            System.out.println("found " + decl);
        }
    }

    public NameDeclaration getResult() {
        return decl;
    }

    private NameDeclaration searchUpward(NameOccurrence nameOccurrence, Scope scope) {
=====================================================================
Found a 6 line (20 tokens) duplication in the following files: 
Starting at line 582 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\ClassTypeResolver.java
Starting at line 601 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\ClassTypeResolver.java

				if (child instanceof TypeNode) {
					typeNode.setType(((TypeNode)child).getType());
				}
			}
		}
	}
=====================================================================
Found a 6 line (20 tokens) duplication in the following files: 
Starting at line 176 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\visitors\PMDASMVisitor.java
Starting at line 196 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\visitors\PMDASMVisitor.java

		public PMDFieldVisitor(PMDASMVisitor visitor) {
		    super(Opcodes.ASM4);
			parent = visitor;
		}

		public AnnotationVisitor visitAnnotation(String desc, boolean visible) {
=====================================================================
Found a 6 line (20 tokens) duplication in the following files: 
Starting at line 181 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\visitors\PMDASMVisitor.java
Starting at line 305 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\visitors\PMDASMVisitor.java
Starting at line 394 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\java\typeresolution\visitors\PMDASMVisitor.java

		public AnnotationVisitor visitAnnotation(String desc, boolean visible) {
			parent.addType(Type.getType(desc));
			return parent.annotationVisitor;
		}

		public void visitAttribute(Attribute attr) {
=====================================================================
Found a 6 line (20 tokens) duplication in the following files: 
Starting at line 46 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\rule\basic\NoInlineStyleInformationRule.java
Starting at line 54 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\jsp\rule\basic\NoInlineStyleInformationRule.java
Starting at line 23 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\rule\basic\EmptyForeachStmtRule.java

        if (isStyleAttribute(node)) {
            addViolation(data, node);
        }

        return super.visit(node, data);
    }
=====================================================================
Found a 3 line (20 tokens) duplication in the following files: 
Starting at line 109 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 120 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java

     public Object visit(ASTSqlStatement node, Object data) {
        if (!(data instanceof Structure)) {
            LOGGER.finest("immediate return ASTSqlStatement: line " + node.getBeginLine() +", column " + node.getBeginColumn());
=====================================================================
Found a 5 line (20 tokens) duplication in the following files: 
Starting at line 112 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 123 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 133 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 143 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 153 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 163 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 175 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java

            return data;
        }
        Structure dataFlow = (Structure) data;
        dataFlow.createNewNode(node);
        LOGGER.finest("createNewNode ASTSqlStatement: line " + node.getBeginLine() +", column " + node.getBeginColumn());
=====================================================================
Found a 3 line (20 tokens) duplication in the following files: 
Starting at line 223 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java
Starting at line 360 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\dfa\StatementAndBraceFinder.java

              LOGGER.finest("pushOnStack parent FOR_EXPR: line " + node.getBeginLine() +", column " + node.getBeginColumn());
            }
            LOGGER.finest("parent (ASTForStatement): line " + node.getBeginLine() +", column " + node.getBeginColumn());
=====================================================================
Found a 5 line (20 tokens) duplication in the following files: 
Starting at line 112 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\CyclomaticComplexityRule.java
Starting at line 165 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\NPathComplexityRule.java

  }

  @Override
public Object visit(ASTIfStatement node, Object data) {
    LOGGER.entering(CLASS_NAME,"visit(ASTIfClause)");
=====================================================================
Found a 5 line (20 tokens) duplication in the following files: 
Starting at line 222 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\CyclomaticComplexityRule.java
Starting at line 247 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\CyclomaticComplexityRule.java
Starting at line 272 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\CyclomaticComplexityRule.java
Starting at line 328 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\CyclomaticComplexityRule.java
Starting at line 378 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\plsql\rule\codesize\CyclomaticComplexityRule.java

    LOGGER.entering(CLASS_NAME,"visit(ASTPackageBody)");

    entryStack.push( new Entry( node ) );
    super.visit( node, data );
    Entry classEntry = entryStack.pop();
=====================================================================
Found a 1 line (20 tokens) duplication in the following files: 
Starting at line 30 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\AbstractRuleViolationFactory.java
Starting at line 24 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\RuleViolationFactory.java

	public void addViolation(RuleContext ruleContext, Rule rule, Node node,	String message, Object[] args) {
=====================================================================
Found a 3 line (20 tokens) duplication in the following files: 
Starting at line 67 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\properties\CharacterMultiProperty.java
Starting at line 95 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\properties\CharacterMultiProperty.java
Starting at line 82 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\properties\TypeMultiProperty.java

	    Character[] chars = new Character[values.length];
	    
	    for (int i=0; i<values.length;i++) {
=====================================================================
Found a 2 line (20 tokens) duplication in the following files: 
Starting at line 81 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\properties\PropertyDescriptorFactory.java
Starting at line 83 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\properties\PropertyDescriptorFactory.java
Starting at line 85 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\properties\PropertyDescriptorFactory.java
Starting at line 87 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\rule\properties\PropertyDescriptorFactory.java

			return new TypeProperty(name, description, value, (String[]) null,	0.0f);
		} else if ("Type[]".equals(type)) {
=====================================================================
Found a 2 line (20 tokens) duplication in the following files: 
Starting at line 51 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\TemplateParseException.java
Starting at line 69 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\TemplateParseException.java

    public TemplateParseException(final Token currentTokenVal, final int[][] expectedTokenSequencesVal,
            final String[] tokenImageVal, final String templateNameVal) {
=====================================================================
Found a 5 line (20 tokens) duplication in the following files: 
Starting at line 138 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\VmParserVisitorAdapter.java
Starting at line 214 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\rule\AbstractVmRule.java
Starting at line 26 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\rule\basic\EmptyIfStmtRule.java

        return visit((VmNode) node, data);
    }

    @Override
    public Object visit(final ASTElseStatement node, final Object data) {
=====================================================================
Found a 5 line (20 tokens) duplication in the following files: 
Starting at line 144 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\ast\VmParserVisitorAdapter.java
Starting at line 220 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\rule\AbstractVmRule.java
Starting at line 22 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\rule\basic\CollapsibleIfStatementsRule.java
Starting at line 20 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\rule\basic\EmptyIfStmtRule.java

        return visit((VmNode) node, data);
    }

    @Override
    public Object visit(final ASTElseIfStatement node, final Object data) {
=====================================================================
Found a 22 line (20 tokens) duplication in the following files: 
Starting at line 39 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\directive\Break.java
Starting at line 67 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\directive\Include.java
Starting at line 38 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\directive\Stop.java

    }

    /**
     * Return type of this directive.
     * @return The type of this directive.
     */
    public int getType()
    {
        return LINE;
    }

    /**
     * Since there is no processing of content,
     * there is never a need for an internal scope.
     */
    public boolean isScopeProvided()
    {
        return false;
    }


}
=====================================================================
Found a 21 line (20 tokens) duplication in the following files: 
Starting at line 45 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\directive\Literal.java
Starting at line 49 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\directive\Macro.java

    }

    /**
     * Return type of this directive.
     * @return The type of this directive.
     */
    public int getType()
    {
        return BLOCK;
    }

    /**
     * Since there is no processing of content,
     * there is never a need for an internal scope.
     */
    public boolean isScopeProvided()
    {
        return false;
    }

}
=====================================================================
Found a 4 line (20 tokens) duplication in the following files: 
Starting at line 77 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\util\VelocityCharStream.java
Starting at line 92 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\util\VelocityCharStream.java

                        bufsize - tokenBegin, bufpos);
                buffer = newbuffer;

                System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
=====================================================================
Found a 4 line (20 tokens) duplication in the following files: 
Starting at line 81 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\util\VelocityCharStream.java
Starting at line 95 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\lang\vm\util\VelocityCharStream.java

                System.arraycopy(bufline, 0, newbufline, bufsize - tokenBegin, bufpos);
                bufline = newbufline;

                System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
=====================================================================
Found a 12 line (20 tokens) duplication in the following files: 
Starting at line 39 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\AbstractAccumulatingRenderer.java
Starting at line 46 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\AbstractIncrementingRenderer.java

    }

    /**
     * {@inheritDoc}
     */
    public void startFileAnalysis(DataSource dataSource) {
    }

    /**
     * {@inheritDoc}
     */
    public void renderFileReport(Report report) throws IOException {
=====================================================================
Found a 3 line (20 tokens) duplication in the following files: 
Starting at line 149 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\HTMLRenderer.java
Starting at line 118 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\XMLRenderer.java

	    for (Report.ProcessingError pe : errors) {
			buf.setLength(0);
			buf.append("<tr");
=====================================================================
Found a 4 line (20 tokens) duplication in the following files: 
Starting at line 159 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\HTMLRenderer.java
Starting at line 191 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\HTMLRenderer.java
Starting at line 132 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\TextColorRenderer.java

			buf.append("</tr>" + PMD.EOL);
			writer.write(buf.toString());	
		    }
	    writer.write("</table>");
=====================================================================
Found a 4 line (20 tokens) duplication in the following files: 
Starting at line 71 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\IDEAJRenderer.java
Starting at line 84 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\IDEAJRenderer.java
Starting at line 55 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\TextPadRenderer.java
Starting at line 48 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\TextRenderer.java
Starting at line 65 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\TextRenderer.java
Starting at line 75 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\TextRenderer.java
Starting at line 140 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\XMLRenderer.java

					.append(rv.getBeginLine()).append(')').append(PMD.EOL);
			writer.write(buf.toString());
		}
	}
=====================================================================
Found a 3 line (20 tokens) duplication in the following files: 
Starting at line 132 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\TextColorRenderer.java
Starting at line 154 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\TextColorRenderer.java

		    + PMD.EOL + PMD.EOL);
	    writer.write(buf.toString());
	}
=====================================================================
Found a 11 line (20 tokens) duplication in the following files: 
Starting at line 49 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\TextRenderer.java
Starting at line 81 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\VBHTMLRenderer.java
Starting at line 106 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\XMLRenderer.java

		    writer.write(buf.toString());
		}
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void end() throws IOException {
		Writer writer = getWriter();
		StringBuilder buf = new StringBuilder(500);
=====================================================================
Found a 4 line (20 tokens) duplication in the following files: 
Starting at line 101 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\XMLRenderer.java
Starting at line 124 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\renderers\XMLRenderer.java

		    buf.append(PMD.EOL);
		    writer.write(buf.toString());
		}
		if (filename != null) { // Not first file ?
=====================================================================
Found a 3 line (20 tokens) duplication in the following files: 
Starting at line 448 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\database\DBMSMetadata.java
Starting at line 456 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\database\DBMSMetadata.java
Starting at line 526 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\database\DBMSMetadata.java
Starting at line 533 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\database\DBMSMetadata.java

                                   ,sourceCodeObjects.getString("PROCEDURE_SCHEM")
                                   ,sourceCodeObjects.getString("PROCEDURE_TYPE")
                                   ,sourceCodeObjects.getString("PROCEDURE_NAME")
=====================================================================
Found a 3 line (20 tokens) duplication in the following files: 
Starting at line 70 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\filter\Filters.java
Starting at line 126 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\filter\Filters.java

	public static Filter<File> toNormalizedFileFilter(final Filter<String> filter) {
		return new Filter<File>() {
			public boolean filter(File file) {
=====================================================================
Found a 15 line (20 tokens) duplication in the following files: 
Starting at line 95 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\filter\Filters.java
Starting at line 112 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\filter\Filters.java

				return filter.filter(obj.toString());
			}

			public String toString() {
				return filter.toString();
			}
		};
	}

	/**
	 * Given a File Filter, expose as a FilenameFilter.
	 * @param filter The File Filter.
	 * @return A FilenameFilter.
	 */
	public static FilenameFilter toFilenameFilter(final Filter<File> filter) {
=====================================================================
Found a 10 line (20 tokens) duplication in the following files: 
Starting at line 55 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\log\AntLogHandler.java
Starting at line 31 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\log\ConsoleLogHandler.java

            antTask.log(stringWriter.toString(), antLevel);
        }
    }

    public void close() throws SecurityException {
    }

    public void flush() {
    }
}
=====================================================================
Found a 3 line (20 tokens) duplication in the following files: 
Starting at line 75 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\viewer\gui\ASTPanel.java
Starting at line 65 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\viewer\gui\EvaluationResultsPanel.java
Starting at line 57 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\viewer\gui\XPathPanel.java

    public void viewerModelChanged(ViewerModelEvent e) {
        switch (e.getReason()) {
            case ViewerModelEvent.CODE_RECOMPILED:
=====================================================================
Found a 6 line (20 tokens) duplication in the following files: 
Starting at line 22 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\viewer\gui\menu\ASTNodePopupMenu.java
Starting at line 31 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\viewer\gui\menu\AttributesSubMenu.java
Starting at line 34 of C:\Dissertation\workspace\de.uni-mannheim.phd.pmd.StandAlone\src\main\java\net\sourceforge\pmd\util\viewer\gui\menu\SimpleNodeSubMenu.java

        this.model = model;
        this.node = node;
        init();
    }

    private void init() {
